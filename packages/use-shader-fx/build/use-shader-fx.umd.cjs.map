{"version":3,"file":"use-shader-fx.umd.cjs","sources":["../src/fxs/interactions/useBrush/shader/main.vert","../src/fxs/interactions/useBrush/shader/main.frag","../src/utils/useResolution.ts","../src/utils/setUniforms.ts","../src/utils/useAddObject.ts","../src/libs/constants.ts","../src/libs/shaders/shaderChunk/wobble3D.glsl","../src/libs/shaders/shaderChunk/snoise.glsl","../src/libs/shaders/shaderChunk/coverTexture.glsl","../src/libs/shaders/shaderChunk/fxBlending.glsl","../src/libs/shaders/shaderChunk/planeVertex.glsl","../src/libs/shaders/shaderChunk/defaultVertex.glsl","../src/libs/shaders/shaderChunk/hsv2rgb.glsl","../src/libs/shaders/shaderChunk/rgb2hsv.glsl","../src/libs/shaders/ShaderChunk.ts","../src/libs/shaders/resolveShaders.ts","../src/utils/createMaterialParameters.ts","../src/fxs/interactions/useBrush/useMesh.ts","../src/utils/useCamera.ts","../src/misc/usePointer.ts","../src/utils/useParams.ts","../src/utils/useSingleFBO.ts","../src/utils/useDoubleFBO.ts","../src/utils/getDpr.ts","../src/fxs/interactions/useBrush/index.ts","../src/fxs/simulations/useFluid/shaders/main.vert","../src/fxs/simulations/useFluid/shaders/init.frag","../src/fxs/simulations/useFluid/materials/useInitialMaterial.ts","../src/fxs/simulations/useFluid/shaders/advection.frag","../src/fxs/simulations/useFluid/materials/useAdvectionMaterial.ts","../src/fxs/simulations/useFluid/shaders/divergence.frag","../src/fxs/simulations/useFluid/materials/useDivergenceMaterial.ts","../src/fxs/simulations/useFluid/shaders/pressure.frag","../src/fxs/simulations/useFluid/materials/usePressureMaterial.ts","../src/fxs/simulations/useFluid/shaders/curl.frag","../src/fxs/simulations/useFluid/materials/useCurlMaterial.ts","../src/fxs/simulations/useFluid/shaders/vorticity.frag","../src/fxs/simulations/useFluid/materials/useVorticityMaterial.ts","../src/fxs/simulations/useFluid/shaders/clear.frag","../src/fxs/simulations/useFluid/materials/useClearMaterial.ts","../src/fxs/simulations/useFluid/shaders/gradientSubtract.frag","../src/fxs/simulations/useFluid/materials/useGradientSubtractMaterial.ts","../src/fxs/simulations/useFluid/shaders/splat.frag","../src/fxs/simulations/useFluid/materials/useSplatMaterial.ts","../src/fxs/simulations/useFluid/useMesh.ts","../src/fxs/simulations/useFluid/index.ts","../src/fxs/simulations/useRipple/shader/main.vert","../src/fxs/simulations/useRipple/shader/main.frag","../src/fxs/simulations/useRipple/useMesh.ts","../src/fxs/simulations/useRipple/index.ts","../src/fxs/noises/useNoise/shader/main.vert","../src/fxs/noises/useNoise/shader/main.frag","../src/fxs/noises/useNoise/useMesh.ts","../src/fxs/noises/useNoise/index.ts","../src/fxs/noises/useColorStrata/shader/main.vert","../src/fxs/noises/useColorStrata/shader/main.frag","../src/fxs/noises/useColorStrata/useMesh.ts","../src/fxs/noises/useColorStrata/index.ts","../src/fxs/noises/useMarble/shader/main.vert","../src/fxs/noises/useMarble/shader/main.frag","../src/fxs/noises/useMarble/useMesh.ts","../src/fxs/noises/useMarble/index.ts","../src/fxs/noises/useCosPalette/shader/main.vert","../src/fxs/noises/useCosPalette/shader/main.frag","../src/fxs/noises/useCosPalette/useMesh.ts","../src/fxs/noises/useCosPalette/index.ts","../src/fxs/utils/useDuoTone/shader/main.vert","../src/fxs/utils/useDuoTone/shader/main.frag","../src/fxs/utils/useDuoTone/useMesh.ts","../src/fxs/utils/useDuoTone/index.ts","../src/fxs/utils/useBlending/shader/main.vert","../src/fxs/utils/useBlending/shader/main.frag","../src/fxs/utils/useBlending/useMesh.ts","../src/fxs/utils/useBlending/index.ts","../src/fxs/utils/useFxTexture/shader/main.vert","../src/fxs/utils/useFxTexture/shader/main.frag","../src/fxs/utils/useFxTexture/useMesh.ts","../src/fxs/utils/useFxTexture/index.ts","../src/fxs/utils/useBrightnessPicker/shader/main.vert","../src/fxs/utils/useBrightnessPicker/shader/main.frag","../src/fxs/utils/useBrightnessPicker/useMesh.ts","../src/fxs/utils/useBrightnessPicker/index.ts","../src/fxs/utils/useFxBlending/shader/main.vert","../src/fxs/utils/useFxBlending/shader/main.frag","../src/fxs/utils/useFxBlending/useMesh.ts","../src/fxs/utils/useFxBlending/index.ts","../src/fxs/utils/useAlphaBlending/shader/main.vert","../src/fxs/utils/useAlphaBlending/shader/main.frag","../src/fxs/utils/useAlphaBlending/useMesh.ts","../src/fxs/utils/useAlphaBlending/index.ts","../src/fxs/utils/useHSV/shader/main.vert","../src/fxs/utils/useHSV/shader/main.frag","../src/fxs/utils/useHSV/useMesh.ts","../src/fxs/utils/useHSV/index.ts","../src/fxs/utils/useCoverTexture/shader/main.vert","../src/fxs/utils/useCoverTexture/shader/main.frag","../src/fxs/utils/useCoverTexture/useMesh.ts","../src/fxs/utils/useCoverTexture/index.ts","../src/fxs/effects/useSimpleBlur/shader/main.vert","../src/fxs/effects/useSimpleBlur/shader/main.frag","../src/fxs/effects/useSimpleBlur/useMesh.ts","../src/fxs/effects/useSimpleBlur/index.ts","../src/fxs/effects/useMotionBlur/shader/main.vert","../src/fxs/effects/useMotionBlur/shader/main.frag","../src/fxs/effects/useMotionBlur/useMesh.ts","../src/fxs/effects/useMotionBlur/index.ts","../src/fxs/effects/useWave/shader/main.vert","../src/fxs/effects/useWave/shader/main.frag","../src/fxs/effects/useWave/useMesh.ts","../src/fxs/effects/useWave/index.ts","../src/fxs/misc/useChromaKey/shader/main.vert","../src/fxs/misc/useChromaKey/shader/main.frag","../src/fxs/misc/useChromaKey/useMesh.ts","../src/fxs/misc/useChromaKey/index.ts","../src/fxs/blank/useBlank/shader/main.vert","../src/fxs/blank/useBlank/shader/main.frag","../src/fxs/blank/useBlank/useMesh.ts","../src/fxs/blank/useBlank/index.ts","../src/fxs/blank/useRawBlank/shader/main.vert","../src/fxs/blank/useRawBlank/shader/main.frag","../src/fxs/blank/useRawBlank/useMesh.ts","../src/fxs/blank/useRawBlank/index.ts","../src/fxs/3D/useMorphParticles/utils/useCreateObject.ts","../src/fxs/3D/useMorphParticles/shaders/main.vert","../src/fxs/3D/useMorphParticles/shaders/main.frag","../src/fxs/3D/useMorphParticles/utils/rewriteVertexShader.ts","../src/fxs/3D/useMorphParticles/utils/modifyAttributes.ts","../src/fxs/3D/useMorphParticles/utils/rewriteFragmentShader.ts","../src/fxs/3D/useMorphParticles/utils/useMaterial.ts","../src/fxs/3D/useMorphParticles/useCreateMorphParticles.ts","../src/fxs/3D/useMorphParticles/index.ts","../src/fxs/3D/useWobble3D/utils/rewriteVertexShader.ts","../src/fxs/3D/useWobble3D/utils/rewriteFragmentShader.ts","../src/fxs/3D/useWobble3D/shaders/transmission_pars_fragment.glsl","../src/fxs/3D/useWobble3D/shaders/transmission_fragment.glsl","../src/fxs/3D/useWobble3D/utils/resolveEachMaterial.ts","../src/fxs/3D/useWobble3D/useMaterial.ts","../src/fxs/3D/useWobble3D/useCreateWobble3D.ts","../src/fxs/3D/useWobble3D/index.ts","../src/utils/useAddMesh.ts","../src/utils/useResizeBoundary.ts","../src/libs/Easings.ts","../src/misc/useBeat.ts","../src/misc/useFPSLimiter.ts","../src/misc/useDomSyncer/utils/errorHandler.ts","../src/misc/useDomSyncer/shader/main.vert","../src/misc/useDomSyncer/shader/main.frag","../src/misc/useDomSyncer/utils/createMesh.ts","../src/misc/useDomSyncer/utils/useIntersectionHandler.ts","../src/misc/useDomSyncer/utils/useUpdateDomRect.ts","../src/misc/useDomSyncer/utils/useIsIntersecting.ts","../src/misc/useDomSyncer/utils/createUseDomView.ts","../src/misc/useDomSyncer/index.ts","../src/misc/useCopyTexture.ts","../src/libs/Utils.ts"],"sourcesContent":["#usf <planeVertex>","precision highp float;\n\nuniform sampler2D uBuffer;\nuniform sampler2D uTexture;\nuniform bool uIsTexture;\nuniform sampler2D uMap;\nuniform bool uIsMap;\nuniform float uMapIntensity;\nuniform float uRadius;\nuniform float uDissipation;\nuniform vec2 uResolution;\nuniform float uSmudge;\nuniform vec2 uMouse;\nuniform vec2 uPrevMouse;\nuniform vec2 uVelocity;\nuniform vec3 uColor;\nuniform float uMotionBlur;\nuniform int uMotionSample;\nuniform bool uIsCursor;\nuniform float uPressureStart;\nuniform float uPressureEnd;\n\nvarying vec2 vUv;\n\nfloat isOnLine(vec2 point, vec2 start, vec2 end, float radius, float pressureStart, float pressureEnd) {\n\t\n\tfloat aspect = uResolution.x / uResolution.y;\n\n\tpoint.x *= aspect;\n\tstart.x *= aspect;\n\tend.x *= aspect;\n\n\tvec2 dir = normalize(end - start);\n\tvec2 n = vec2(dir.y, -dir.x);\n\tvec2 p0 = point - start;\n\t\n\tfloat distToLine = abs(dot(p0, n));\n\tfloat distAlongLine = dot(p0, dir);\n\tfloat totalLength = length(end - start);\n\n\tfloat progress = clamp(distAlongLine / totalLength, 0.0, 1.0);\n\tfloat pressure = mix(pressureStart, pressureEnd, progress);\n\tradius = min(radius,radius * pressure);\n\n\tfloat distFromStart = length(point - start);\n\tfloat distFromEnd = length(point - end);\n\t\n\tbool withinLine = (distToLine < radius && distAlongLine > 0.0 && distAlongLine < totalLength) || distFromStart < radius || distFromEnd < radius;\n\n\treturn float(withinLine);\n}\n\nvec4 createSmudge(vec2 uv){\n\tvec2 offsets[9];\n\toffsets[0] = vec2(-1, -1); offsets[1] = vec2( 0, -1); offsets[2] = vec2( 1, -1);\n\toffsets[3] = vec2(-1,  0); offsets[4] = vec2( 0,  0); offsets[5] = vec2( 1,  0);\n\toffsets[6] = vec2(-1,  1); offsets[7] = vec2( 0,  1); offsets[8] = vec2( 1,  1);\n\n\tfor(int i = 0; i < 9; i++) {\n\t\toffsets[i] = (offsets[i] * uSmudge) / uResolution;\n\t}\t\n\tvec4 smudgedColor = vec4(0.);\n\tfor(int i = 0; i < 9; i++) {\n\t\tsmudgedColor += texture2D(uBuffer, uv + offsets[i]);\n\t}\n\treturn smudgedColor / 9.0;\n}\n\nvec4 createMotionBlur(vec2 uv , vec4 baseColor, vec2 velocity) {\n\tvec2 scaledV = velocity * uMotionBlur;\n\tfor(int i = 1; i < uMotionSample; i++) {\n\t\tfloat t = float(i) / float(uMotionSample - 1);\n\t\tvec2 offset = t * scaledV / uResolution;\n\t\tbaseColor += texture2D(uBuffer, uv + offset);\n\t}\n\treturn baseColor / float(uMotionSample);\n}\n\nvoid main() {\n\n\tvec2 uv = vUv;\n\tif(uIsMap){\n\t\tvec2 mapColor = texture2D(uMap, uv).rg;\n\t\tvec2 normalizedMap = mapColor * 2.0 - 1.0;\n\t\tuv = uv * 2.0 - 1.0;\n\t\tuv *= mix(vec2(1.0), abs(normalizedMap.rg), uMapIntensity);\n\t\tuv = (uv + 1.0) / 2.0;\n\t}\n\tvec2 suv = uv*2.-1.;\n\n\tvec2 velocity = uVelocity * uResolution;\n\n\tfloat radius = max(0.0,uRadius);\n\t\n\tvec4 smudgedColor = uSmudge > 0. ? createSmudge(uv) : texture2D(uBuffer, uv);\n\n\tvec4 motionBlurredColor = uMotionBlur > 0. ? createMotionBlur(uv,smudgedColor, velocity) : smudgedColor;\n\n\tvec4 bufferColor = motionBlurredColor;\n\tbufferColor.a = bufferColor.a < 1e-10 ? 0.0 : bufferColor.a * uDissipation;\n\t\n\tvec4 brushColor = uIsTexture ? texture2D(uTexture, uv) : vec4(uColor,1.);\n\t\n\tfloat onLine = isOnLine(suv, uPrevMouse, uMouse, radius, uPressureStart,uPressureEnd);\n\tfloat isOnLine = length(velocity) > 0. ? onLine : uIsCursor ? onLine : 0.;\n\n\tvec4 finalColor = mix(bufferColor, brushColor, isOnLine);\n\n\tgl_FragColor = finalColor;\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport { Size } from \"../fxs/types\";\n\n/**\n * @params dpr if dpr is set, it returns the resolution which is size multiplied by dpr.\n */\nexport const useResolution = (size: Size, dpr: number | false = false) => {\n   const _width = dpr ? size.width * dpr : size.width;\n   const _height = dpr ? size.height * dpr : size.height;\n\n   const resolution = useMemo(\n      () => new THREE.Vector2(_width, _height),\n      [_width, _height]\n   );\n   return resolution;\n};\n","import * as THREE from \"three\";\ntype UniformValue =\n   | THREE.CubeTexture\n   | THREE.Texture\n   | Int32Array\n   | Float32Array\n   | THREE.Matrix4\n   | THREE.Matrix3\n   | THREE.Quaternion\n   | THREE.Vector4\n   | THREE.Vector3\n   | THREE.Vector2\n   | THREE.Color\n   | number\n   | boolean\n   | Array<any>\n   | null\n   | undefined;\ntype UniformObject = { [key: string]: { value: UniformValue } };\n\nexport const setUniform =\n   <T extends UniformObject>(material: { uniforms: T }) =>\n   (key: keyof T, value: UniformValue) => {\n      if (value === undefined) {\n         return;\n      }\n      const uniforms = material.uniforms;\n      if (uniforms && uniforms[key]) {\n         uniforms[key].value = value;\n      }\n   };\n\nexport type CustomParams = { [uniform: string]: UniformValue };\nexport const setCustomUniform =\n   (material: { uniforms: UniformObject }) =>\n   (customParams: CustomParams | undefined) => {\n      if (customParams === undefined) {\n         return;\n      }\n      Object.keys(customParams).forEach((key) => {\n         const uniforms = material.uniforms;\n         if (uniforms && uniforms[key]) {\n            uniforms[key].value = customParams[key];\n         }\n      });\n   };\n","import * as THREE from \"three\";\nimport { useEffect, useMemo } from \"react\";\n\ntype Object3DConstructor<T, M extends THREE.Material> = new (\n   geometry: THREE.BufferGeometry,\n   material: M\n) => T;\n\n/**\n * Add geometry and material to Object3D and add them to scene.\n */\nexport const useAddObject = <\n   T extends THREE.Object3D,\n   M extends THREE.Material\n>(\n   scene: THREE.Scene | false,\n   geometry: THREE.BufferGeometry,\n   material: M,\n   Proto: Object3DConstructor<T, M>\n) => {\n   const object3D = useMemo(() => {\n      const obj = new Proto(geometry, material);\n      scene && scene.add(obj);\n      return obj;\n   }, [geometry, material, Proto, scene]);\n\n   useEffect(() => {\n      return () => {\n         scene && scene.remove(object3D);\n         geometry.dispose();\n         material.dispose();\n      };\n   }, [scene, geometry, material, object3D]);\n\n   return object3D;\n};\n","import * as THREE from \"three\";\n\nexport const ISDEV = process.env.NODE_ENV === \"development\";\n\nexport const MATERIAL_BASIC_PARAMS = {\n   transparent: false,\n   depthTest: false,\n   depthWrite: false,\n};\n\nexport const DEFAULT_TEXTURE = new THREE.DataTexture(\n   new Uint8Array([0, 0, 0, 0]),\n   1,\n   1,\n   THREE.RGBAFormat\n);\n","//\tSimplex 4D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 grad4(float j, vec4 ip)\n{\n\tconst vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n\tvec4 p,s;\n\n\tp.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n\tp.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n\ts = vec4(lessThan(p, vec4(0.0)));\n\tp.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n\treturn p;\n}\n\nfloat simplexNoise4d(vec4 v)\n{\n\tconst vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n\t\t\t\t\t\t\t\t\t0.309016994374947451); // (sqrt(5) - 1)/4   F4\n\t// First corner\n\tvec4 i  = floor(v + dot(v, C.yyyy) );\n\tvec4 x0 = v -   i + dot(i, C.xxxx);\n\n\t// Other corners\n\n\t// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n\tvec4 i0;\n\n\tvec3 isX = step( x0.yzw, x0.xxx );\n\tvec3 isYZ = step( x0.zww, x0.yyz );\n\t//  i0.x = dot( isX, vec3( 1.0 ) );\n\ti0.x = isX.x + isX.y + isX.z;\n\ti0.yzw = 1.0 - isX;\n\n\t//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n\ti0.y += isYZ.x + isYZ.y;\n\ti0.zw += 1.0 - isYZ.xy;\n\n\ti0.z += isYZ.z;\n\ti0.w += 1.0 - isYZ.z;\n\n\t// i0 now contains the unique values 0,1,2,3 in each channel\n\tvec4 i3 = clamp( i0, 0.0, 1.0 );\n\tvec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n\tvec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n\t//  x0 = x0 - 0.0 + 0.0 * C \n\tvec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n\tvec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n\tvec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n\tvec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n\t// Permutations\n\ti = mod(i, 289.0); \n\tfloat j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n\tvec4 j1 = permute( permute( permute( permute (\n\t\t\t\t\ti.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n\t\t\t\t+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n\t\t\t\t+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n\t\t\t\t+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\t// Gradients\n\t// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n\t// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n\tvec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n\tvec4 p0 = grad4(j0,   ip);\n\tvec4 p1 = grad4(j1.x, ip);\n\tvec4 p2 = grad4(j1.y, ip);\n\tvec4 p3 = grad4(j1.z, ip);\n\tvec4 p4 = grad4(j1.w, ip);\n\n\t// Normalise gradients\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\tp4 *= taylorInvSqrt(dot(p4,p4));\n\n\t// Mix contributions from the five corners\n\tvec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n\tvec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n\tm0 = m0 * m0;\n\tm1 = m1 * m1;\n\treturn 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n\t\t\t\t\t\t+ dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\nfloat getWobble(vec3 position)\n{\n\tvec3 warpedPosition = position;\n\twarpedPosition += simplexNoise4d(\n\t\tvec4(\n\t\t\t\tposition * uWarpPositionFrequency,\n\t\t\t\tuTime * uWarpTimeFrequency\n\t\t)\n\t) * uWarpStrength;\n\n\treturn simplexNoise4d(vec4(\n\t\twarpedPosition * uWobblePositionFrequency, // XYZ\n\t\tuTime * uWobbleTimeFrequency          // W\n\t)) * uWobbleStrength;\n}","// <www.shadertoy.com/view/XsX3zB>\n//\tby Nikita Miropolskiy\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nfloat snoise(vec3 p) {\n\n\tvec3 s = floor(p + dot(p, vec3(F3)));\n\tvec3 x = p - s + dot(s, vec3(G3));\n\t\n\tvec3 e = step(vec3(0.0), x - x.yzx);\n\tvec3 i1 = e*(1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\n \t\n\tvec3 x1 = x - i1 + G3;\n\tvec3 x2 = x - i2 + 2.0*G3;\n\tvec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\tvec4 w, d;\n\t \n\tw.x = dot(x, x);\n\tw.y = dot(x1, x1);\n\tw.z = dot(x2, x2);\n\tw.w = dot(x3, x3);\n\t \n\tw = max(0.6 - w, 0.0);\n\t \n\td.x = dot(random3(s), x);\n\td.y = dot(random3(s + i1), x1);\n\td.z = dot(random3(s + i2), x2);\n\td.w = dot(random3(s + 1.0), x3);\n\t \n\tw *= w;\n\tw *= w;\n\td *= w;\n\t \n\treturn dot(d, vec4(52.0));\n}\n\nfloat snoiseFractal(vec3 m) {\n\treturn   0.5333333* snoise(m)\n\t\t\t\t+0.2666667* snoise(2.0*m)\n\t\t\t\t+0.1333333* snoise(4.0*m)\n\t\t\t\t+0.0666667* snoise(8.0*m);\n}","float screenAspect = uResolution.x / uResolution.y;\nfloat textureAspect = uTextureResolution.x / uTextureResolution.y;\nvec2 aspectRatio = vec2(\n\tmin(screenAspect / textureAspect, 1.0),\n\tmin(textureAspect / screenAspect, 1.0)\n);\nvec2 uv = vUv * aspectRatio + (1.0 - aspectRatio) * .5;","vec3 mapColor = texture2D(uMap, uv).rgb;\nvec3 normalizedMap = mapColor * 2.0 - 1.0;\n\nuv = uv * 2.0 - 1.0;\nuv *= mix(vec2(1.0), abs(normalizedMap.rg), uMapIntensity);\nuv = (uv + 1.0) / 2.0;","precision highp float;\n\nvarying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}","vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}","vec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}","import wobble3D from \"./shaderChunk/wobble3D.glsl\";\nimport snoise from \"./shaderChunk/snoise.glsl\";\nimport coverTexture from \"./shaderChunk/coverTexture.glsl\";\nimport fxBlending from \"./shaderChunk/fxBlending.glsl\";\nimport planeVertex from \"./shaderChunk/planeVertex.glsl\";\nimport defaultVertex from \"./shaderChunk/defaultVertex.glsl\";\nimport hsv2rgb from \"./shaderChunk/hsv2rgb.glsl\";\nimport rgb2hsv from \"./shaderChunk/rgb2hsv.glsl\";\n\nexport type ShaderChunkTypes =\n   | \"wobble3D\"\n   | \"snoise\"\n   | \"coverTexture\"\n   | \"fxBlending\"\n   | \"planeVertex\"\n   | \"defaultVertex\"\n   | \"hsv2rgb\"\n   | \"rgb2hsv\";\n\nexport const ShaderChunk: { [K in ShaderChunkTypes]: string } = Object.freeze({\n   wobble3D,\n   snoise,\n   coverTexture,\n   fxBlending,\n   planeVertex,\n   defaultVertex,\n   hsv2rgb,\n   rgb2hsv,\n});\n","import { ShaderChunk, ShaderChunkTypes } from \"./ShaderChunk\";\n\nconst includePattern = /^[ \\t]*#usf +<([\\w\\d./]+)>/gm;\n\nfunction includeReplacer(match: string, include: ShaderChunkTypes): string {\n   return resolveIncludes(ShaderChunk[include] || \"\");\n}\n\nfunction resolveIncludes(string: string): string {\n   return string.replace(includePattern, includeReplacer);\n}\n\nexport { resolveIncludes };\n","import { resolveIncludes } from \"../libs/shaders/resolveShaders\";\nimport { OnBeforeInitParameters } from \"../fxs/types\";\n\nexport const createMaterialParameters = (\n   parameters: OnBeforeInitParameters,\n   onBeforeInit?: (parameters: OnBeforeInitParameters) => void\n) => {\n   onBeforeInit && onBeforeInit(parameters);\n   parameters.vertexShader = resolveIncludes(parameters.vertexShader);\n   parameters.fragmentShader = resolveIncludes(parameters.fragmentShader);\n   return parameters;\n};\n","import * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useMemo } from \"react\";\nimport { useResolution } from \"../../../utils/useResolution\";\nimport { setUniform } from \"../../../utils/setUniforms\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport {\n   DEFAULT_TEXTURE,\n   MATERIAL_BASIC_PARAMS,\n} from \"../../../libs/constants\";\nimport { BRUSH_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class BrushMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uBuffer: { value: THREE.Texture };\n      uTexture: { value: THREE.Texture };\n      uIsTexture: { value: boolean };\n      uMap: { value: THREE.Texture };\n      uIsMap: { value: boolean };\n      uMapIntensity: { value: number };\n      uResolution: { value: THREE.Vector2 };\n      uRadius: { value: number };\n      uSmudge: { value: number };\n      uDissipation: { value: number };\n      uMotionBlur: { value: number };\n      uMotionSample: { value: number };\n      uMouse: { value: number };\n      uPrevMouse: { value: number };\n      uVelocity: { value: number };\n      uColor: { value: THREE.Vector3 | THREE.Color };\n      uIsCursor: { value: boolean };\n      uPressureStart: { value: number };\n      uPressureEnd: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number | false;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uBuffer: { value: DEFAULT_TEXTURE },\n                  uResolution: { value: new THREE.Vector2(0, 0) },\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  uIsTexture: { value: false },\n                  uMap: { value: DEFAULT_TEXTURE },\n                  uIsMap: { value: false },\n                  uMapIntensity: { value: BRUSH_PARAMS.mapIntensity },\n                  uRadius: { value: BRUSH_PARAMS.radius },\n                  uSmudge: { value: BRUSH_PARAMS.smudge },\n                  uDissipation: { value: BRUSH_PARAMS.dissipation },\n                  uMotionBlur: { value: BRUSH_PARAMS.motionBlur },\n                  uMotionSample: { value: BRUSH_PARAMS.motionSample },\n                  uMouse: { value: new THREE.Vector2(-10, -10) },\n                  uPrevMouse: { value: new THREE.Vector2(-10, -10) },\n                  uVelocity: { value: new THREE.Vector2(0, 0) },\n                  uColor: { value: BRUSH_PARAMS.color },\n                  uIsCursor: { value: false },\n                  uPressureStart: { value: 1.0 },\n                  uPressureEnd: { value: 1.0 },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n         // Must be transparent\n         transparent: true,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as BrushMaterial;\n\n   const resolution = useResolution(size, dpr);\n   setUniform(material)(\"uResolution\", resolution.clone());\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import * as THREE from \"three\";\nimport { useResolution } from \"./useResolution\";\nimport { useMemo } from \"react\";\nimport { Size } from \"../fxs/types\";\n\nconst getCameraProps = (width: number, height: number) => {\n   const frustumSize = height;\n   const aspect = width / height;\n   const [w, h] = [(frustumSize * aspect) / 2, frustumSize / 2];\n   return { width: w, height: h, near: -1000, far: 1000 };\n};\n\nexport const useCamera = (\n   size: Size,\n   cameraType: \"OrthographicCamera\" | \"PerspectiveCamera\" = \"OrthographicCamera\"\n) => {\n   const resolution = useResolution(size);\n   const { width, height, near, far } = getCameraProps(\n      resolution.x,\n      resolution.y\n   );\n   const camera = useMemo(() => {\n      return cameraType === \"OrthographicCamera\"\n         ? new THREE.OrthographicCamera(\n              -width,\n              width,\n              height,\n              -height,\n              near,\n              far\n           )\n         : new THREE.PerspectiveCamera(50, width / height);\n   }, [width, height, near, far, cameraType]);\n   return camera;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useRef } from \"react\";\n\nexport type PointerValues = {\n   currentPointer: THREE.Vector2;\n   prevPointer: THREE.Vector2;\n   diffPointer: THREE.Vector2;\n   velocity: THREE.Vector2;\n   isVelocityUpdate: boolean;\n};\n\ntype UpdatePointer = (currentPointer: THREE.Vector2) => PointerValues;\n\n/**\n * @description When given the pointer vector2 from r3f's RootState, it generates an update function that returns {`currentPointer`, `prevPointer`, `diffPointer`, `isVelocityUpdate`, `velocity`}.\n * @description When calling custom in a `useFrame` loop, you can avoid duplication of execution by passing `pointerValues` to the update function of a Pointer-activated fxHook, such as `useBrush`.\n * @param lerp 0~1, lerp intensity (0 to less than 1) , default : `0`\n */\nexport const usePointer = (lerp: number = 0): UpdatePointer => {\n   const prevPointer = useRef(new THREE.Vector2(0, 0));\n   const diffPointer = useRef(new THREE.Vector2(0, 0));\n   const lerpPointer = useRef(new THREE.Vector2(0, 0));\n   const lastUpdateTime = useRef<number>(0);\n   const velocity = useRef(new THREE.Vector2(0, 0));\n   const isMoved = useRef(false);\n\n   const updatePointer = useCallback(\n      (currentPointer: THREE.Vector2) => {\n         const now = performance.now();\n\n         // lerp\n         let current: THREE.Vector2;\n         if (isMoved.current && lerp) {\n            lerpPointer.current = lerpPointer.current.lerp(\n               currentPointer,\n               1 - lerp\n            );\n            current = lerpPointer.current.clone();\n         } else {\n            current = currentPointer.clone();\n            lerpPointer.current = current;\n         }\n\n         // first frame\n         if (lastUpdateTime.current === 0) {\n            lastUpdateTime.current = now;\n            prevPointer.current = current;\n         }\n         const deltaTime = Math.max(1, now - lastUpdateTime.current);\n         lastUpdateTime.current = now;\n\n         // get velocity\n         velocity.current\n            .copy(current)\n            .sub(prevPointer.current)\n            .divideScalar(deltaTime);\n         const isUpdate = velocity.current.length() > 0;\n\n         //set prev temp pos\n         const prevTemp = isMoved.current\n            ? prevPointer.current.clone()\n            : current;\n         if (!isMoved.current && isUpdate) {\n            isMoved.current = true;\n         }\n         prevPointer.current = current;\n\n         return {\n            currentPointer: current,\n            prevPointer: prevTemp,\n            diffPointer: diffPointer.current.subVectors(current, prevTemp),\n            velocity: velocity.current,\n            isVelocityUpdate: isUpdate,\n         };\n      },\n      [lerp]\n   );\n\n   return updatePointer;\n};\n","import { useCallback, useRef } from \"react\";\n\ntype SetParams<T> = (newParams?: Partial<T>) => void;\ntype UseParamsReturn<T> = [T, SetParams<T>];\n\n/**\n * @param params Receives an initial value object. With structuredClone, deep copy and set, but if the object contains a function, just set it.\n */\nexport const useParams = <T extends object>(params: T): UseParamsReturn<T> => {\n   const isContainsFunctions = (obj: object): boolean =>\n      Object.values(obj).some((value) => typeof value === \"function\");\n   const paramsRef = useRef(\n      isContainsFunctions(params) ? params : structuredClone(params)\n   );\n\n   const setParams = useCallback<SetParams<T>>((newParams) => {\n      if (newParams === undefined) {\n         return;\n      }\n      for (const key in newParams) {\n         const paramKey = key as keyof T;\n         if (\n            paramKey in paramsRef.current &&\n            newParams[paramKey] !== undefined &&\n            newParams[paramKey] !== null\n         ) {\n            paramsRef.current[paramKey] = newParams[paramKey]!;\n         } else {\n            console.error(\n               `\"${String(\n                  paramKey\n               )}\" does not exist in the params. or \"${String(\n                  paramKey\n               )}\" is null | undefined`\n            );\n         }\n      }\n   }, []);\n   return [paramsRef.current, setParams];\n};\n","import * as THREE from \"three\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { useResolution } from \"./useResolution\";\nimport { Size } from \"../fxs/types\";\n\nexport const FBO_DEFAULT_OPTION: THREE.RenderTargetOptions = {\n   depthBuffer: false,\n};\n\nexport type UseFboProps = {\n   scene: THREE.Scene;\n   camera: THREE.Camera;\n   size: Size;\n   /** If dpr is set, dpr will be multiplied, default : `false` */\n   dpr?: number | false;\n   /** Whether to resize when resizing occurs. If isDpr is true, set FBO to setSize even if dpr is changed, default : `false` */\n   isSizeUpdate?: boolean;\n   /** If set, the scene depth will be rendered into buffer.depthTexture. default : `false` */\n   depth?: boolean;\n} & THREE.RenderTargetOptions;\n\nexport const renderFBO = ({\n   gl,\n   fbo,\n   scene,\n   camera,\n   onBeforeRender,\n   onSwap,\n}: {\n   gl: THREE.WebGLRenderer;\n   fbo: THREE.WebGLRenderTarget;\n   scene: THREE.Scene;\n   camera: THREE.Camera;\n   onBeforeRender: () => void;\n   onSwap?: () => void;\n}) => {\n   gl.setRenderTarget(fbo);\n   onBeforeRender();\n   gl.clear();\n   gl.render(scene, camera);\n   onSwap && onSwap();\n   gl.setRenderTarget(null);\n   gl.clear();\n};\n\ntype UpdateRenderTarget = (\n   gl: THREE.WebGLRenderer,\n   /**  call before FBO is rendered */\n   onBeforeRender?: ({ read }: { read: THREE.Texture }) => void\n) => THREE.Texture;\n\ntype UseSingleFBOReturn = [THREE.WebGLRenderTarget, UpdateRenderTarget];\n\n/**\n * @param dpr If dpr is set, dpr will be multiplied, default:false\n * @param isSizeUpdate Whether to resize when resizing occurs. If isDpr is true, set FBO to setSize even if dpr is changed, default:false\n * @param depthBuffer Unlike the default in three.js, the default is `false`.\n * @returns [THREE.WebGLRenderTarget , updateFBO] -Receives the RenderTarget as the first argument and the update function as the second argument.\n */\nexport const useSingleFBO = (props: UseFboProps): UseSingleFBOReturn => {\n   const {\n      scene,\n      camera,\n      size,\n      dpr = false,\n      isSizeUpdate = false,\n      depth = false,\n      ...renderTargetOptions\n   } = props;\n\n   const renderTarget = useRef<THREE.WebGLRenderTarget>();\n\n   const resolution = useResolution(size, dpr);\n\n   renderTarget.current = useMemo(\n      () => {\n         const target = new THREE.WebGLRenderTarget(\n            resolution.x,\n            resolution.y,\n            {\n               ...FBO_DEFAULT_OPTION,\n               ...renderTargetOptions,\n            }\n         );\n         if (depth) {\n            target.depthTexture = new THREE.DepthTexture(\n               resolution.x,\n               resolution.y,\n               THREE.FloatType\n            );\n         }\n         return target;\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      []\n   );\n\n   if (isSizeUpdate) {\n      renderTarget.current?.setSize(resolution.x, resolution.y);\n   }\n\n   useEffect(() => {\n      const temp = renderTarget.current;\n      return () => {\n         temp?.dispose();\n      };\n   }, []);\n\n   const updateRenderTarget: UpdateRenderTarget = useCallback(\n      (gl, onBeforeRender) => {\n         const fbo = renderTarget.current!;\n         renderFBO({\n            gl,\n            fbo,\n            scene,\n            camera,\n            onBeforeRender: () =>\n               onBeforeRender && onBeforeRender({ read: fbo.texture }),\n         });\n         return fbo.texture;\n      },\n      [scene, camera]\n   );\n\n   return [renderTarget.current, updateRenderTarget];\n};\n","import * as THREE from \"three\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { FBO_DEFAULT_OPTION, UseFboProps, renderFBO } from \"./useSingleFBO\";\nimport { useResolution } from \"./useResolution\";\n\nexport type DoubleRenderTarget = {\n   read: THREE.WebGLRenderTarget;\n   write: THREE.WebGLRenderTarget;\n};\n\ninterface WebGLDoubleRenderTarget extends DoubleRenderTarget {\n   swap: () => void;\n}\n\ntype FBOUpdateFunction = (\n   gl: THREE.WebGLRenderer,\n   /**  call before FBO is rendered */\n   onBeforeRender?: ({\n      read,\n      write,\n   }: {\n      read: THREE.Texture;\n      write: THREE.Texture;\n   }) => void\n) => THREE.Texture;\n\ntype UseDoubleFBOReturn = [\n   { read: THREE.WebGLRenderTarget; write: THREE.WebGLRenderTarget },\n   FBOUpdateFunction\n];\n\n/**\n * @description Custom hook for setting up double buffering with WebGL render targets.\n * @param UseFboProps same as `useSingleFBO`\n */\nexport const useDoubleFBO = (props: UseFboProps): UseDoubleFBOReturn => {\n   const {\n      scene,\n      camera,\n      size,\n      dpr = false,\n      isSizeUpdate = false,\n      depth = false,\n      ...renderTargetOptions\n   } = props;\n\n   const resolution = useResolution(size, dpr);\n\n   const renderTarget = useMemo<WebGLDoubleRenderTarget>(() => {\n      const read = new THREE.WebGLRenderTarget(resolution.x, resolution.y, {\n         ...FBO_DEFAULT_OPTION,\n         ...renderTargetOptions,\n      });\n      const write = new THREE.WebGLRenderTarget(resolution.x, resolution.y, {\n         ...FBO_DEFAULT_OPTION,\n         ...renderTargetOptions,\n      });\n\n      if (depth) {\n         read.depthTexture = new THREE.DepthTexture(\n            resolution.x,\n            resolution.y,\n            THREE.FloatType\n         );\n         write.depthTexture = new THREE.DepthTexture(\n            resolution.x,\n            resolution.y,\n            THREE.FloatType\n         );\n      }\n\n      return {\n         read: read,\n         write: write,\n         swap: function () {\n            let temp = this.read;\n            this.read = this.write;\n            this.write = temp;\n         },\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   if (isSizeUpdate) {\n      renderTarget.read?.setSize(resolution.x, resolution.y);\n      renderTarget.write?.setSize(resolution.x, resolution.y);\n   }\n\n   useEffect(() => {\n      const temp = renderTarget;\n      return () => {\n         temp.read?.dispose();\n         temp.write?.dispose();\n      };\n   }, [renderTarget]);\n\n   const updateRenderTarget: FBOUpdateFunction = useCallback(\n      (gl, onBeforeRender) => {\n         const fbo = renderTarget;\n         renderFBO({\n            gl,\n            scene,\n            camera,\n            fbo: fbo.write!,\n            onBeforeRender: () =>\n               onBeforeRender &&\n               onBeforeRender({\n                  read: fbo.read!.texture,\n                  write: fbo.write!.texture,\n               }),\n            onSwap: () => fbo.swap(),\n         });\n         return fbo.read?.texture as THREE.Texture;\n      },\n      [scene, camera, renderTarget]\n   );\n\n   return [\n      { read: renderTarget.read, write: renderTarget.write },\n      updateRenderTarget,\n   ];\n};\n","import { Dpr } from \"../fxs/types\";\n\nexport const getDpr = (\n   dpr: Dpr\n): { shader: number | false; fbo: number | false } => {\n   if (typeof dpr === \"number\") {\n      return { shader: dpr, fbo: dpr };\n   }\n   return {\n      shader: dpr.shader ?? false,\n      fbo: dpr.fbo ?? false,\n   };\n};\n","import * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport { RootState } from \"@react-three/fiber\";\nimport { PointerValues, usePointer } from \"../../../misc/usePointer\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { DoubleRenderTarget, useDoubleFBO } from \"../../../utils/useDoubleFBO\";\nimport { getDpr } from \"../../../utils/getDpr\";\n\nexport type BrushParams = {\n   /** Texture applied to the brush, If texture is true, it will take precedence over color , default : `false` */\n   texture?: THREE.Texture | false;\n   /** You can attach an fx map , default : `false` */\n   map?: THREE.Texture | false;\n   /** map intensity , default : `0.1` */\n   mapIntensity?: number;\n   /** size of the stamp, percentage of the size ,default : `0.05` */\n   radius?: number;\n   /** Strength of smudge effect , default : `0.0`*/\n   smudge?: number;\n   /** dissipation rate. If set to 1, it will remain. , default : `1.0` */\n   dissipation?: number;\n   /** Strength of motion blur , default : `0.0` */\n   motionBlur?: number;\n   /** Number of motion blur samples. Affects performance default : `5` */\n   motionSample?: number;\n   /** brush color , it accepts a function that returns THREE.Vector3.The function takes velocity:THREE.Vector2 as an argument. , default : `THREE.Vector3(1.0, 1.0, 1.0)` */\n   color?:\n      | ((velocity: THREE.Vector2) => THREE.Vector3)\n      | THREE.Vector3\n      | THREE.Color;\n   /** Follows the cursor even if it loses speed , default : `false` */\n   isCursor?: boolean;\n   /** brush pressure (0 to 1) , default : `1.0` */\n   pressure?: number;\n   /** When calling usePointer in a frame loop, setting PointerValues ​​to this value prevents double calls , default : `false` */\n   pointerValues?: PointerValues | false;\n};\n\nexport type BrushObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: DoubleRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const BRUSH_PARAMS: BrushParams = Object.freeze({\n   texture: false,\n   map: false,\n   mapIntensity: 0.1,\n   radius: 0.05,\n   smudge: 0.0,\n   dissipation: 1.0,\n   motionBlur: 0.0,\n   motionSample: 5,\n   color: new THREE.Vector3(1.0, 0.0, 0.0),\n   isCursor: false,\n   pressure: 1.0,\n   pointerValues: false,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useBrush = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<BrushParams, BrushObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      dpr: _dpr.shader,\n      onBeforeInit,\n   });\n   const camera = useCamera(size);\n   const updatePointer = usePointer();\n   const [renderTarget, updateRenderTarget] = useDoubleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<BrushParams>(BRUSH_PARAMS);\n\n   const pressureEnd = useRef<number | null>(null);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: BrushParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: BrushParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl, pointer } = rootState;\n\n         updateParams(newParams, customParams);\n\n         if (params.texture!) {\n            updateValue(\"uIsTexture\", true);\n            updateValue(\"uTexture\", params.texture!);\n         } else {\n            updateValue(\"uIsTexture\", false);\n         }\n\n         if (params.map!) {\n            updateValue(\"uIsMap\", true);\n            updateValue(\"uMap\", params.map!);\n            updateValue(\"uMapIntensity\", params.mapIntensity!);\n         } else {\n            updateValue(\"uIsMap\", false);\n         }\n\n         updateValue(\"uRadius\", params.radius!);\n         updateValue(\"uSmudge\", params.smudge!);\n         updateValue(\"uDissipation\", params.dissipation!);\n         updateValue(\"uMotionBlur\", params.motionBlur!);\n         updateValue(\"uMotionSample\", params.motionSample!);\n\n         const pointerValues = params.pointerValues! || updatePointer(pointer);\n\n         if (pointerValues.isVelocityUpdate) {\n            updateValue(\"uMouse\", pointerValues.currentPointer);\n            updateValue(\"uPrevMouse\", pointerValues.prevPointer);\n         }\n         updateValue(\"uVelocity\", pointerValues.velocity);\n\n         const color: THREE.Vector3 | THREE.Color =\n            typeof params.color === \"function\"\n               ? params.color(pointerValues.velocity)\n               : params.color!;\n         updateValue(\"uColor\", color);\n\n         updateValue(\"uIsCursor\", params.isCursor!);\n\n         // pressure\n         updateValue(\"uPressureEnd\", params.pressure!);\n         if (pressureEnd.current === null) {\n            pressureEnd.current = params.pressure!;\n         }\n         updateValue(\"uPressureStart\", pressureEnd.current);\n         pressureEnd.current = params.pressure!;\n\n         return updateRenderTarget(gl, ({ read }) => {\n            updateValue(\"uBuffer\", read);\n         });\n      },\n      [updateValue, updatePointer, updateRenderTarget, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.read.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform vec2 texelSize;\n\nvoid main () {\n\tvUv = uv;\n\tvL = vUv - vec2(texelSize.x, 0.0);\n\tvR = vUv + vec2(texelSize.x, 0.0);\n\tvT = vUv + vec2(0.0, texelSize.y);\n\tvB = vUv - vec2(0.0, texelSize.y);\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvoid main(){\n\tgl_FragColor = vec4(0.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/init.frag\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../../libs/constants\";\n\nexport const useInitialMaterial = () => {\n   const initialMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         vertexShader: vertexShader,\n         fragmentShader: fragmentShader,\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, []);\n\n   return initialMaterial as THREE.ShaderMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uVelocity;\nuniform sampler2D uSource;\nuniform vec2 texelSize;\nuniform float dt;\nuniform float dissipation;\n\nvoid main () {\n\tvec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n\tgl_FragColor = vec4(dissipation * texture2D(uSource, coord).rgb,1.);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/advection.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport {\n   DEFAULT_TEXTURE,\n   MATERIAL_BASIC_PARAMS,\n} from \"../../../../libs/constants\";\nimport { DELTA_TIME } from \"..\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class AdvectionMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      uSource: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n      dt: { value: number };\n      dissipation: { value: number };\n   };\n}\n\nexport const useAdvectionMaterial = ({ onBeforeInit }: MaterialProps) => {\n   const advectionMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uVelocity: { value: DEFAULT_TEXTURE },\n                  uSource: { value: DEFAULT_TEXTURE },\n                  texelSize: { value: new THREE.Vector2() },\n                  dt: { value: DELTA_TIME },\n                  dissipation: { value: 0.0 },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]);\n\n   return advectionMaterial as AdvectionMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\n\nvec2 sampleVelocity(in vec2 uv) {\n\tvec2 clampedUV = clamp(uv, 0.0, 1.0);\n\tvec2 multiplier = vec2(1.0, 1.0);\n\tmultiplier.x = uv.x < 0.0 || uv.x > 1.0 ? -1.0 : 1.0;\n\tmultiplier.y = uv.y < 0.0 || uv.y > 1.0 ? -1.0 : 1.0;\n\treturn multiplier * texture2D(uVelocity, clampedUV).xy;\n}\n\nvoid main () {\n\tfloat L = sampleVelocity(vL).x;\n\tfloat R = sampleVelocity(vR).x;\n\tfloat T = sampleVelocity(vT).y;\n\tfloat B = sampleVelocity(vB).y;\n\tfloat div = 0.5 * (R - L + T - B);\n\tgl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/divergence.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class DivergenceMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useDivergenceMaterial = ({ onBeforeInit }: MaterialProps) => {\n   const divergenceMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uVelocity: { value: null },\n                  texelSize: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]);\n\n   return divergenceMaterial as DivergenceMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uDivergence;\n\nvoid main () {\n\tfloat L = texture2D(uPressure, clamp(vL,0.,1.)).x;\n\tfloat R = texture2D(uPressure, clamp(vR,0.,1.)).x;\n\tfloat T = texture2D(uPressure, clamp(vT,0.,1.)).x;\n\tfloat B = texture2D(uPressure, clamp(vB,0.,1.)).x;\n\tfloat C = texture2D(uPressure, vUv).x;\n\tfloat divergence = texture2D(uDivergence, vUv).x;\n\tfloat pressure = (L + R + B + T - divergence) * 0.25;\n\tgl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/pressure.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class PressureMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uPressure: { value: THREE.Texture };\n      uDivergence: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const usePressureMaterial = ({ onBeforeInit }: MaterialProps) => {\n   const pressureMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uPressure: { value: null },\n                  uDivergence: { value: null },\n                  texelSize: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]);\n\n   return pressureMaterial as PressureMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\n\nvoid main () {\n\tfloat L = texture2D(uVelocity, vL).y;\n\tfloat R = texture2D(uVelocity, vR).y;\n\tfloat T = texture2D(uVelocity, vT).x;\n\tfloat B = texture2D(uVelocity, vB).x;\n\tfloat vorticity = R - L - T + B;\n\tgl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/curl.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class CurlMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useCurlMaterial = ({ onBeforeInit }: MaterialProps) => {\n   const curlMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uVelocity: { value: null },\n                  texelSize: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]);\n\n   return curlMaterial as CurlMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\nuniform sampler2D uCurl;\nuniform float curl;\nuniform float dt;\n\nvoid main () {\n\tfloat T = texture2D(uCurl, vT).x;\n\tfloat B = texture2D(uCurl, vB).x;\n\tfloat C = texture2D(uCurl, vUv).x;\n\tvec2 force = vec2(abs(T) - abs(B), 0.0);\n\tforce *= 1.0 / length(force + 0.00001) * curl * C;\n\tvec2 vel = texture2D(uVelocity, vUv).xy;\n\tgl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/vorticity.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../../libs/constants\";\nimport { DELTA_TIME } from \"..\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class VorticityMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      uCurl: { value: THREE.Texture };\n      curl: { value: number };\n      dt: { value: number };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useVorticityMaterial = ({ onBeforeInit }: MaterialProps) => {\n   const vorticityMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uVelocity: { value: null },\n                  uCurl: { value: null },\n                  curl: { value: 0 },\n                  dt: { value: DELTA_TIME },\n                  texelSize: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]);\n\n   return vorticityMaterial as VorticityMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\nuniform float value;\n\nvoid main () {\n\tgl_FragColor = value * texture2D(uTexture, vUv);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/clear.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class ClearMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      value: { value: number };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useClearMaterial = ({ onBeforeInit }: MaterialProps) => {\n   const advectionMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  value: { value: 0.0 },\n                  texelSize: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]);\n\n   return advectionMaterial as ClearMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uVelocity;\n\nvoid main () {\n\tfloat L = texture2D(uPressure, clamp(vL,0.,1.)).x;\n\tfloat R = texture2D(uPressure, clamp(vR,0.,1.)).x;\n\tfloat T = texture2D(uPressure, clamp(vT,0.,1.)).x;\n\tfloat B = texture2D(uPressure, clamp(vB,0.,1.)).x;\n\tvec2 velocity = texture2D(uVelocity, vUv).xy;\n\tvelocity.xy -= vec2(R - L, T - B);\n\tgl_FragColor = vec4(velocity, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/gradientSubtract.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class GradientSubtractMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uPressure: { value: THREE.Texture };\n      uVelocity: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useGradientSubtractMaterial = ({\n   onBeforeInit,\n}: MaterialProps) => {\n   const gradientSubtractMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uPressure: { value: DEFAULT_TEXTURE },\n                  uVelocity: { value: DEFAULT_TEXTURE },\n                  texelSize: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]);\n\n   return gradientSubtractMaterial as GradientSubtractMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTarget;\nuniform float aspectRatio;\nuniform vec3 color;\nuniform vec2 point;\nuniform float radius;\n\nvoid main () {\n\tvec2 nPoint = (point + vec2(1.0)) * 0.5;\n\tvec2 p = vUv - nPoint.xy;\n\tp.x *= aspectRatio;\n\tvec3 splat = exp(-dot(p, p) / radius) * color;\n\tvec3 base = texture2D(uTarget, vUv).xyz;\n\tgl_FragColor = vec4(base + splat, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/splat.frag\";\nimport { MaterialProps } from \"../../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class SplatMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTarget: { value: THREE.Texture };\n      aspectRatio: { value: number };\n      color: { value: THREE.Vector3 | THREE.Color };\n      point: { value: THREE.Vector2 };\n      radius: { value: number };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useSplatMaterial = ({ onBeforeInit }: MaterialProps) => {\n   const splatMaterial = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTarget: { value: DEFAULT_TEXTURE },\n                  aspectRatio: { value: 0 },\n                  color: { value: new THREE.Vector3() },\n                  point: { value: new THREE.Vector2() },\n                  radius: { value: 0.0 },\n                  texelSize: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]);\n\n   return splatMaterial as SplatMaterial;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useInitialMaterial } from \"./materials/useInitialMaterial\";\nimport {\n   AdvectionMaterial,\n   useAdvectionMaterial,\n} from \"./materials/useAdvectionMaterial\";\nimport {\n   DivergenceMaterial,\n   useDivergenceMaterial,\n} from \"./materials/useDivergenceMaterial\";\nimport {\n   PressureMaterial,\n   usePressureMaterial,\n} from \"./materials/usePressureMaterial\";\nimport { CurlMaterial, useCurlMaterial } from \"./materials/useCurlMaterial\";\nimport {\n   VorticityMaterial,\n   useVorticityMaterial,\n} from \"./materials/useVorticityMaterial\";\nimport { useResolution } from \"../../../utils/useResolution\";\nimport { ClearMaterial, useClearMaterial } from \"./materials/useClearMaterial\";\nimport {\n   GradientSubtractMaterial,\n   useGradientSubtractMaterial,\n} from \"./materials/useGradientSubtractMaterial\";\nimport { SplatMaterial, useSplatMaterial } from \"./materials/useSplatMaterial\";\nimport { CustomParams, setUniform } from \"../../../utils/setUniforms\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\n\ntype TMaterials =\n   | AdvectionMaterial\n   | DivergenceMaterial\n   | CurlMaterial\n   | PressureMaterial\n   | ClearMaterial\n   | GradientSubtractMaterial\n   | SplatMaterial;\n\nexport type FluidMaterials = {\n   vorticityMaterial: VorticityMaterial;\n   curlMaterial: CurlMaterial;\n   advectionMaterial: AdvectionMaterial;\n   divergenceMaterial: DivergenceMaterial;\n   pressureMaterial: PressureMaterial;\n   clearMaterial: ClearMaterial;\n   gradientSubtractMaterial: GradientSubtractMaterial;\n   splatMaterial: SplatMaterial;\n};\n\nexport type CustomizableKeys =\n   | \"advection\"\n   | \"splat\"\n   | \"curl\"\n   | \"vorticity\"\n   | \"divergence\"\n   | \"clear\"\n   | \"pressure\"\n   | \"gradientSubtract\";\n\nexport type CustomFluidProps = {\n   [K in CustomizableKeys]?: MaterialProps;\n};\nexport type CustomFluidParams = {\n   [K in CustomizableKeys]?: CustomParams;\n};\n\nconst useCustomMaterial = <T extends THREE.Material>(\n   materialHook: (materialProps: MaterialProps) => T,\n   materialProps?: MaterialProps\n) => {\n   return materialHook(materialProps ?? {});\n};\n\n/**\n * Returns the material update function in the second argument\n */\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n   customFluidProps,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number | false;\n   customFluidProps?: CustomFluidProps;\n}) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n\n   const {\n      curl,\n      vorticity,\n      advection,\n      divergence,\n      pressure,\n      clear,\n      gradientSubtract,\n      splat,\n   } = customFluidProps ?? {};\n\n   const initialMaterial = useCustomMaterial(useInitialMaterial);\n   const updateMaterial = initialMaterial.clone();\n   const curlMaterial = useCustomMaterial(useCurlMaterial, curl);\n   const vorticityMaterial = useCustomMaterial(useVorticityMaterial, vorticity);\n   const advectionMaterial = useCustomMaterial(useAdvectionMaterial, advection);\n   const divergenceMaterial = useCustomMaterial(\n      useDivergenceMaterial,\n      divergence\n   );\n   const pressureMaterial = useCustomMaterial(usePressureMaterial, pressure);\n   const clearMaterial = useCustomMaterial(useClearMaterial, clear);\n   const gradientSubtractMaterial = useCustomMaterial(\n      useGradientSubtractMaterial,\n      gradientSubtract\n   );\n   const splatMaterial = useCustomMaterial(useSplatMaterial, splat);\n   const materials = useMemo(\n      () => ({\n         vorticityMaterial,\n         curlMaterial,\n         advectionMaterial,\n         divergenceMaterial,\n         pressureMaterial,\n         clearMaterial,\n         gradientSubtractMaterial,\n         splatMaterial,\n      }),\n      [\n         vorticityMaterial,\n         curlMaterial,\n         advectionMaterial,\n         divergenceMaterial,\n         pressureMaterial,\n         clearMaterial,\n         gradientSubtractMaterial,\n         splatMaterial,\n      ]\n   );\n\n   const resolution = useResolution(size, dpr);\n   useMemo(() => {\n      setUniform(materials.splatMaterial)(\n         \"aspectRatio\",\n         resolution.x / resolution.y\n      );\n      for (const material of Object.values(materials)) {\n         setUniform<typeof material.uniforms>(material)(\n            \"texelSize\",\n            new THREE.Vector2(1.0 / resolution.x, 1.0 / resolution.y)\n         );\n      }\n   }, [resolution, materials]);\n\n   const mesh = useAddObject(scene, geometry, initialMaterial, THREE.Mesh);\n\n   useMemo(() => {\n      initialMaterial.dispose();\n      mesh.material = updateMaterial;\n   }, [initialMaterial, mesh, updateMaterial]);\n\n   useEffect(() => {\n      return () => {\n         for (const material of Object.values(materials)) {\n            material.dispose();\n         }\n      };\n   }, [materials]);\n\n   const setMeshMaterial = useCallback(\n      (material: TMaterials) => {\n         mesh.material = material;\n         mesh.material.needsUpdate = true;\n      },\n      [mesh]\n   );\n\n   return { materials, setMeshMaterial, mesh };\n};\n","import * as THREE from \"three\";\nimport {\n   CustomizableKeys,\n   FluidMaterials,\n   CustomFluidProps,\n   CustomFluidParams,\n   useMesh,\n} from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport { PointerValues, usePointer } from \"../../../misc/usePointer\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { UseFboProps } from \"../../../utils/useSingleFBO\";\nimport { DoubleRenderTarget, useDoubleFBO } from \"../../../utils/useDoubleFBO\";\nimport { getDpr } from \"../../../utils/getDpr\";\n\nexport const DELTA_TIME = 0.016;\n\nexport type FluidParams = {\n   /** density disspation , default : `0.98` */\n   densityDissipation?: number;\n   /** velocity dissipation , default : `0.99` */\n   velocityDissipation?: number;\n   /** velocity acceleration , default : `10.0` */\n   velocityAcceleration?: number;\n   /** pressure dissipation , default : `0.9` */\n   pressureDissipation?: number;\n   /** pressure iterations. affects performance , default : `20` */\n   pressureIterations?: number;\n   /** curl_strength , default : `35` */\n   curlStrength?: number;\n   /** splat radius , default : `0.002` */\n   splatRadius?: number;\n   /** Fluid Color.THREE.Vector3 Alternatively, it accepts a function that returns THREE.Vector3.The function takes velocity:THREE.Vector2 as an argument. , default : `THREE.Vector3(1.0, 1.0, 1.0)` */\n   fluidColor?:\n      | ((velocity: THREE.Vector2) => THREE.Vector3)\n      | THREE.Vector3\n      | THREE.Color;\n   /** When calling usePointer in a frame loop, setting PointerValues ​​to this value prevents double calls , default : `false` */\n   pointerValues?: PointerValues | false;\n};\n\nexport type FluidObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   materials: FluidMaterials;\n   camera: THREE.Camera;\n   renderTarget: {\n      velocity: DoubleRenderTarget;\n      density: DoubleRenderTarget;\n      curl: THREE.WebGLRenderTarget;\n      divergence: THREE.WebGLRenderTarget;\n      pressure: DoubleRenderTarget;\n   };\n   output: THREE.Texture;\n};\n\nexport const FLUID_PARAMS: FluidParams = Object.freeze({\n   densityDissipation: 0.98,\n   velocityDissipation: 0.99,\n   velocityAcceleration: 10.0,\n   pressureDissipation: 0.9,\n   pressureIterations: 20,\n   curlStrength: 35,\n   splatRadius: 0.002,\n   fluidColor: new THREE.Vector3(1.0, 1.0, 1.0),\n   pointerValues: false,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useFluid = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   customFluidProps,\n}: {\n   /** you can add `onBeforeInit` of the next material.`initial`,`curl`,`vorticity`,`advection`,`divergence`,`pressure`,`clear`,`gradientSubtract`,`splat` \n\t * ```ts\n\t * customFluidProps: {\n         vorticity: {\n            onBeforeInit: (parameters) => console.log(parameters),\n         },\n      },\n\t * ```\n\t*/\n   customFluidProps?: CustomFluidProps;\n} & HooksProps): HooksReturn<FluidParams, FluidObject, CustomFluidParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { materials, setMeshMaterial, mesh } = useMesh({\n      scene,\n      size,\n      dpr: _dpr.shader,\n      customFluidProps,\n   });\n   const camera = useCamera(size);\n   const updatePointer = usePointer();\n\n   const fboProps = useMemo<UseFboProps>(\n      () => ({\n         scene,\n         camera,\n         dpr: _dpr.fbo,\n         size,\n         isSizeUpdate,\n         type: THREE.HalfFloatType,\n         ...renderTargetOptions,\n      }),\n      [scene, camera, size, _dpr.fbo, isSizeUpdate, renderTargetOptions]\n   );\n   const [velocityFBO, updateVelocityFBO] = useDoubleFBO(fboProps);\n   const [densityFBO, updateDensityFBO] = useDoubleFBO(fboProps);\n   const [curlFBO, updateCurlFBO] = useSingleFBO(fboProps);\n   const [divergenceFBO, updateDivergenceFBO] = useSingleFBO(fboProps);\n   const [pressureFBO, updatePressureFBO] = useDoubleFBO(fboProps);\n\n   const scaledDiffVec = useRef(new THREE.Vector2(0, 0));\n   const spaltVec = useRef(new THREE.Vector3(0, 0, 0));\n\n   const [params, setParams] = useParams<FluidParams>(FLUID_PARAMS);\n\n   // setUniform\n   const updateParamsList = useMemo(\n      () => ({\n         advection: setUniform(materials.advectionMaterial),\n         splat: setUniform(materials.splatMaterial),\n         curl: setUniform(materials.curlMaterial),\n         vorticity: setUniform(materials.vorticityMaterial),\n         divergence: setUniform(materials.divergenceMaterial),\n         clear: setUniform(materials.clearMaterial),\n         pressure: setUniform(materials.pressureMaterial),\n         gradientSubtract: setUniform(materials.gradientSubtractMaterial),\n      }),\n      [materials]\n   );\n   // customSetUniform\n   const updateCustomParamsList = useMemo<{\n      [K in CustomizableKeys]: (customParams: CustomParams | undefined) => void;\n   }>(\n      () => ({\n         advection: setCustomUniform(materials.advectionMaterial),\n         splat: setCustomUniform(materials.splatMaterial),\n         curl: setCustomUniform(materials.curlMaterial),\n         vorticity: setCustomUniform(materials.vorticityMaterial),\n         divergence: setCustomUniform(materials.divergenceMaterial),\n         clear: setCustomUniform(materials.clearMaterial),\n         pressure: setCustomUniform(materials.pressureMaterial),\n         gradientSubtract: setCustomUniform(materials.gradientSubtractMaterial),\n      }),\n      [materials]\n   );\n\n   const updateParams = useCallback(\n      (newParams?: FluidParams, customParams?: CustomFluidParams) => {\n         setParams(newParams);\n         if (customParams) {\n            Object.keys(customParams).forEach((key) => {\n               updateCustomParamsList[key as CustomizableKeys](\n                  customParams[key as CustomizableKeys]\n               );\n            });\n         }\n      },\n      [setParams, updateCustomParamsList]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: FluidParams,\n         customParams?: CustomFluidParams\n      ) => {\n         const { gl, pointer, size } = rootState;\n\n         updateParams(newParams, customParams);\n\n         const velocityTex = updateVelocityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.advectionMaterial);\n            updateParamsList.advection(\"uVelocity\", read);\n            updateParamsList.advection(\"uSource\", read);\n            updateParamsList.advection(\n               \"dissipation\",\n               params.velocityDissipation!\n            );\n         });\n\n         const densityTex = updateDensityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.advectionMaterial);\n            updateParamsList.advection(\"uVelocity\", velocityTex);\n            updateParamsList.advection(\"uSource\", read);\n            updateParamsList.advection(\n               \"dissipation\",\n               params.densityDissipation!\n            );\n         });\n\n         const pointerValues = params.pointerValues! || updatePointer(pointer);\n\n         if (pointerValues.isVelocityUpdate) {\n            updateVelocityFBO(gl, ({ read }) => {\n               setMeshMaterial(materials.splatMaterial);\n               updateParamsList.splat(\"uTarget\", read);\n               updateParamsList.splat(\"point\", pointerValues.currentPointer);\n               const scaledDiff = pointerValues.diffPointer.multiply(\n                  scaledDiffVec.current\n                     .set(size.width, size.height)\n                     .multiplyScalar(params.velocityAcceleration!)\n               );\n               updateParamsList.splat(\n                  \"color\",\n                  spaltVec.current.set(scaledDiff.x, scaledDiff.y, 1.0)\n               );\n               updateParamsList.splat(\"radius\", params.splatRadius!);\n            });\n            updateDensityFBO(gl, ({ read }) => {\n               setMeshMaterial(materials.splatMaterial);\n               updateParamsList.splat(\"uTarget\", read);\n               const color: THREE.Vector3 | THREE.Color =\n                  typeof params.fluidColor === \"function\"\n                     ? params.fluidColor(pointerValues.velocity)\n                     : params.fluidColor!;\n               updateParamsList.splat(\"color\", color);\n            });\n         }\n\n         const curlTex = updateCurlFBO(gl, () => {\n            setMeshMaterial(materials.curlMaterial);\n            updateParamsList.curl(\"uVelocity\", velocityTex);\n         });\n\n         updateVelocityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.vorticityMaterial);\n            updateParamsList.vorticity(\"uVelocity\", read);\n            updateParamsList.vorticity(\"uCurl\", curlTex);\n            updateParamsList.vorticity(\"curl\", params.curlStrength!);\n         });\n\n         const divergenceTex = updateDivergenceFBO(gl, () => {\n            setMeshMaterial(materials.divergenceMaterial);\n            updateParamsList.divergence(\"uVelocity\", velocityTex);\n         });\n\n         updatePressureFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.clearMaterial);\n            updateParamsList.clear(\"uTexture\", read);\n            updateParamsList.clear(\"value\", params.pressureDissipation!);\n         });\n\n         setMeshMaterial(materials.pressureMaterial);\n         updateParamsList.pressure(\"uDivergence\", divergenceTex);\n         let pressureTexTemp: THREE.Texture;\n         for (let i = 0; i < params.pressureIterations!; i++) {\n            pressureTexTemp = updatePressureFBO(gl, ({ read }) => {\n               updateParamsList.pressure(\"uPressure\", read);\n            });\n         }\n\n         updateVelocityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.gradientSubtractMaterial);\n            updateParamsList.gradientSubtract(\"uPressure\", pressureTexTemp);\n            updateParamsList.gradientSubtract(\"uVelocity\", read);\n         });\n\n         return densityTex;\n      },\n      [\n         materials,\n         updateParamsList,\n         setMeshMaterial,\n         updateCurlFBO,\n         updateDensityFBO,\n         updateDivergenceFBO,\n         updatePointer,\n         updatePressureFBO,\n         updateVelocityFBO,\n         params,\n         updateParams,\n      ]\n   );\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         materials: materials,\n         camera: camera,\n         renderTarget: {\n            velocity: velocityFBO,\n            density: densityFBO,\n            curl: curlFBO,\n            divergence: divergenceFBO,\n            pressure: pressureFBO,\n         },\n         output: densityFBO.read.texture,\n      },\n   ];\n};\n","#usf <defaultVertex>","precision highp float;\n\nuniform sampler2D uMap;\nuniform float uOpacity;\n\nvarying vec2 vUv;\n\nvoid main() {\n\tvec2 uv = vUv;\n\tvec3 color = texture2D(uMap, uv).rgb;\n\tgl_FragColor = vec4(color,uOpacity);\n}","import * as THREE from \"three\";\nimport { useEffect, useMemo } from \"react\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   DEFAULT_TEXTURE,\n   MATERIAL_BASIC_PARAMS,\n} from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\ntype UseMeshProps = {\n   scale: number;\n   max: number;\n   scene: THREE.Scene;\n   texture?: THREE.Texture;\n};\n\nexport const useMesh = ({\n   scale,\n   max,\n   texture,\n   scene,\n   onBeforeInit,\n}: UseMeshProps & MaterialProps) => {\n   const geometry = useMemo(\n      () => new THREE.PlaneGeometry(scale, scale),\n      [scale]\n   );\n\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uOpacity: { value: 0.0 },\n                  uMap: { value: texture || DEFAULT_TEXTURE },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         blending: THREE.AdditiveBlending,\n         ...MATERIAL_BASIC_PARAMS,\n         // Must be transparent.\n         transparent: true,\n      });\n      return mat;\n   }, [texture, onBeforeInit]);\n\n   const meshArr = useMemo(() => {\n      const temp = [];\n      for (let i = 0; i < max; i++) {\n         const clonedMat = material.clone();\n         const mesh = new THREE.Mesh(geometry.clone(), clonedMat);\n         mesh.rotateZ(2 * Math.PI * Math.random());\n         mesh.visible = false;\n         scene.add(mesh);\n         temp.push(mesh);\n      }\n      return temp;\n   }, [geometry, material, scene, max]);\n\n   useEffect(() => {\n      return () => {\n         meshArr.forEach((mesh) => {\n            mesh.geometry.dispose();\n            if (Array.isArray(mesh.material)) {\n               mesh.material.forEach((material) => material.dispose());\n            } else {\n               mesh.material.dispose();\n            }\n            scene.remove(mesh);\n         });\n      };\n   }, [scene, meshArr]);\n\n   return meshArr;\n};\n","import { useCallback, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport { usePointer, PointerValues } from \"../../../misc/usePointer\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\n\nexport type RippleParams = {\n   /** How often ripples appear, default : `0.01` */\n   frequency?: number;\n   /** rotation rate, default : `0.05` */\n   rotation?: number;\n   /** fadeout speed, default : `0.9` */\n   fadeoutSpeed?: number;\n   /** scale rate, default : `0.3` */\n   scale?: number;\n   /** alpha, default : `0.6` */\n   alpha?: number;\n   /** When calling usePointer in a frame loop, setting PointerValues ​​to this value prevents double calls , default : `false` */\n   pointerValues?: PointerValues | false;\n};\n\nexport type RippleObject = {\n   scene: THREE.Scene;\n   meshArr: THREE.Mesh[];\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const RIPPLE_PARAMS: RippleParams = Object.freeze({\n   frequency: 0.01,\n   rotation: 0.05,\n   fadeoutSpeed: 0.9,\n   scale: 0.3,\n   alpha: 0.6,\n   pointerValues: false,\n});\n\ninterface UseRippleProps extends HooksProps {\n   /** texture applied to ripple */\n   texture?: THREE.Texture;\n   /** ripple size, default:64 */\n   scale?: number;\n   /** ripple max length, default:100 */\n   max?: number;\n}\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useRipple = ({\n   texture,\n   scale = 64,\n   max = 100,\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: UseRippleProps): HooksReturn<RippleParams, RippleObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const meshArr = useMesh({\n      scale: scale,\n      max: max,\n      texture,\n      scene,\n      onBeforeInit,\n   });\n   const camera = useCamera(size);\n   const updatePointer = usePointer();\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<RippleParams>(RIPPLE_PARAMS);\n\n   const currentWave = useRef(0);\n\n   const updateParams = useMemo(() => {\n      return (newParams?: RippleParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         meshArr.forEach((mesh) => {\n            if (mesh.visible) {\n               const material = mesh.material as THREE.ShaderMaterial;\n               mesh.rotation.z += params.rotation!;\n               mesh.scale.x =\n                  params.fadeoutSpeed! * mesh.scale.x + params.scale!;\n               mesh.scale.y = mesh.scale.x;\n               const opacity = material.uniforms.uOpacity.value;\n               setUniform(material)(\"uOpacity\", opacity * params.fadeoutSpeed!);\n               if (opacity < 0.001) mesh.visible = false;\n            }\n            setCustomUniform(mesh.material)(customParams);\n         });\n      };\n   }, [meshArr, params, setParams]);\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: RippleParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl, pointer, size } = rootState;\n\n         updateParams(newParams, customParams);\n\n         const pointerValues = params.pointerValues! || updatePointer(pointer);\n\n         if (params.frequency! < pointerValues.diffPointer.length()) {\n            const mesh = meshArr[currentWave.current];\n            const material = mesh.material as THREE.ShaderMaterial;\n            mesh.visible = true;\n            mesh.position.set(\n               pointerValues.currentPointer.x * (size.width / 2),\n               pointerValues.currentPointer.y * (size.height / 2),\n               0\n            );\n            mesh.scale.x = mesh.scale.y = 0.0;\n            setUniform(material)(\"uOpacity\", params.alpha!);\n            currentWave.current = (currentWave.current + 1) % max;\n         }\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, meshArr, updatePointer, max, params, updateParams]\n   );\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         camera: camera,\n         meshArr: meshArr,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\nprecision highp int;\n\nvarying vec2 vUv;\nuniform float uTime;\nuniform float timeStrength;\nuniform int noiseOctaves;\nuniform int fbmOctaves;\nuniform int warpOctaves;\nuniform vec2 warpDirection;\nuniform float warpStrength;\nuniform float scale;\n\nconst float per  = 0.5;\nconst float PI   = 3.14159265359;\n\nfloat rnd(vec2 n) {\n\tfloat a = 0.129898;\n\tfloat b = 0.78233;\n\tfloat c = 437.585453;\n\tfloat dt= dot(n ,vec2(a, b));\n\tfloat sn= mod(dt, PI);\n\treturn fract(sin(sn) * c);\n}\n\nfloat interpolate(float a, float b, float x){\n    float f = (1.0 - cos(x * PI)) * 0.5;\n    return a * (1.0 - f) + b * f;\n}\n\nfloat irnd(vec2 p){\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\tvec4 v = vec4(rnd(vec2(i.x,i.y)),rnd(vec2(i.x + 1.0,i.y)),rnd(vec2(i.x,i.y + 1.0)),rnd(vec2(i.x + 1.0, i.y + 1.0)));\n\treturn interpolate(interpolate(v.x, v.y, f.x), interpolate(v.z, v.w, f.x), f.y);\n}\n\n// Based on The Book of Shaders\n// https://thebookofshaders.com/13/\nfloat noise(vec2 p, float time){\n\tfloat t = 0.0;\n\tfor(int i = 0; i < noiseOctaves; i++){\n\t\tfloat freq = pow(2.0, float(i));\n\t\tfloat amp  = pow(per, float(noiseOctaves - i));\n\t\tt += irnd(vec2(p.y / freq + time, p.x / freq + time)) * amp;\n\t}\n\treturn t;\n}\n\nfloat fbm(vec2 x, float time) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n\tfloat sign = 1.0;\n\tfor (int i = 0; i < fbmOctaves; ++i) {\n\t\tv += a * noise(x, time * sign);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t\tsign *= -1.0;\n\t}\n\treturn v;\n}\n\nfloat warp(vec2 x, float g,float time){\n\tfloat val = 0.0;\n\tfor (int i = 0; i < warpOctaves; i++){\n\t\tval = fbm(x + g * vec2(cos(warpDirection.x * val), sin(warpDirection.y * val)), time);\n\t}\n\treturn val;\n}\n\nvoid main() {\n\tfloat noise = warp(gl_FragCoord.xy * scale ,warpStrength,uTime * timeStrength);\n\tgl_FragColor = vec4(vec3(noise),1.0);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../libs/constants\";\nimport { NOISE_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class NoiseMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTime: { value: number };\n      scale: { value: number };\n      timeStrength: { value: number };\n      noiseOctaves: { value: number };\n      fbmOctaves: { value: number };\n      warpOctaves: { value: number };\n      warpDirection: { value: THREE.Vector2 };\n      warpStrength: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTime: { value: 0.0 },\n                  scale: { value: NOISE_PARAMS.scale },\n                  timeStrength: { value: NOISE_PARAMS.timeStrength },\n                  noiseOctaves: { value: NOISE_PARAMS.noiseOctaves },\n                  fbmOctaves: { value: NOISE_PARAMS.fbmOctaves },\n                  warpOctaves: { value: NOISE_PARAMS.warpOctaves },\n                  warpDirection: { value: NOISE_PARAMS.warpDirection },\n                  warpStrength: { value: NOISE_PARAMS.warpStrength },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as NoiseMaterial;\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\n\nexport type NoiseParams = {\n   /** noise scale , default : `0.004` */\n   scale?: number;\n   /** time factor default : `0.3` */\n   timeStrength?: number;\n   /** noiseOctaves, affects performance default : `2` */\n   noiseOctaves?: number;\n   /** fbmOctaves, affects performance default : `2` */\n   fbmOctaves?: number;\n   /** domain warping octaves , affects performance default : `2`  */\n   warpOctaves?: number;\n   /** direction of domain warping , default : `(2.0,2,0)` */\n   warpDirection?: THREE.Vector2;\n   /** strength of domain warping , default : `8.0` */\n   warpStrength?: number;\n   /** you can get into the rhythm ♪ , default : `false` */\n   beat?: number | false;\n};\n\nexport type NoiseObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const NOISE_PARAMS: NoiseParams = Object.freeze({\n   scale: 0.004,\n   timeStrength: 0.3,\n   noiseOctaves: 2,\n   fbmOctaves: 2,\n   warpOctaves: 2,\n   warpDirection: new THREE.Vector2(2.0, 2.0),\n   warpStrength: 8.0,\n   beat: false,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n *\n * It is a basic value noise with `fbm` and `domain warping`\n */\nexport const useNoise = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<NoiseParams, NoiseObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<NoiseParams>(NOISE_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: NoiseParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: NoiseParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl, clock } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"scale\", params.scale!);\n         updateValue(\"timeStrength\", params.timeStrength!);\n         updateValue(\"noiseOctaves\", params.noiseOctaves!);\n         updateValue(\"fbmOctaves\", params.fbmOctaves!);\n         updateValue(\"warpOctaves\", params.warpOctaves!);\n         updateValue(\"warpDirection\", params.warpDirection!);\n         updateValue(\"warpStrength\", params.warpStrength!);\n         updateValue(\"uTime\", params.beat || clock.getElapsedTime());\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\nvarying vec2 vUv;\n\nuniform sampler2D uTexture;\nuniform bool isTexture;\nuniform sampler2D noise;\nuniform bool isNoise;\nuniform vec2 noiseStrength;\nuniform float laminateLayer;\nuniform vec2 laminateInterval;\nuniform vec2 laminateDetail;\nuniform vec2 distortion;\nuniform vec3 colorFactor;\nuniform float uTime;\nuniform vec2 timeStrength;\nuniform float scale;\n\nvoid main() {\n\tvec2 uv = vUv;\n\n\tvec2 pos = isTexture ? texture2D(uTexture, uv).rg : uv * scale;\n\tvec2 noise = isNoise ? texture2D(noise, uv).rg : vec2(0.0);\n\tfloat alpha = isTexture ? texture2D(uTexture, uv).a : 1.0;\n\t\n\t// Avoid floating point bugs caused by GPU drivers.\n\talpha = (alpha < 1e-10) ? 0.0 : alpha;\n\n\tvec3 col;\n\tfor(float j = 0.0; j < 3.0; j++){\n\t\tfor(float i = 1.0; i < laminateLayer; i++){\n\t\t\tfloat timeNoiseSin = sin(uTime / (i + j)) * timeStrength.x + noise.r * noiseStrength.x;\n\t\t\tfloat timeNoiseCos = cos(uTime / (i + j)) * timeStrength.y + noise.g * noiseStrength.y;\n\t\t\tpos.x += laminateInterval.x / (i + j) * cos(i * distortion.x * pos.y + timeNoiseSin + sin(i + j));\n\t\t\tpos.y += laminateInterval.y / (i + j) * cos(i * distortion.y * pos.x + timeNoiseCos + sin(i + j));\n\t\t}\n\t\tcol[int(j)] = sin(pow(pos.x, 2.) * pow(laminateDetail.x, 2.)) + sin(pow(pos.y, 2.) * pow(laminateDetail.y, 2.));\n\t}\n\n\tcol *= colorFactor * alpha;\n\tcol = clamp(col, 0.0, 1.0);\n\t\n\tgl_FragColor = vec4(col, alpha);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { COLORSTRATA_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class ColorStrataMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      isTexture: { value: boolean };\n      scale: { value: number };\n      noise: { value: THREE.Texture };\n      noiseStrength: { value: THREE.Vector2 };\n      isNoise: { value: boolean };\n      laminateLayer: { value: number };\n      laminateInterval: { value: THREE.Vector2 };\n      laminateDetail: { value: THREE.Vector2 };\n      distortion: { value: THREE.Vector2 };\n      colorFactor: { value: THREE.Vector3 };\n      uTime: { value: number };\n      timeStrength: { value: THREE.Vector2 };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  isTexture: { value: false },\n                  scale: { value: COLORSTRATA_PARAMS.scale },\n                  noise: { value: DEFAULT_TEXTURE },\n                  noiseStrength: { value: COLORSTRATA_PARAMS.noiseStrength },\n                  isNoise: { value: false },\n                  laminateLayer: { value: COLORSTRATA_PARAMS.laminateLayer },\n                  laminateInterval: {\n                     value: COLORSTRATA_PARAMS.laminateInterval,\n                  },\n                  laminateDetail: { value: COLORSTRATA_PARAMS.laminateDetail },\n                  distortion: { value: COLORSTRATA_PARAMS.distortion },\n                  colorFactor: { value: COLORSTRATA_PARAMS.colorFactor },\n                  uTime: { value: 0 },\n                  timeStrength: { value: COLORSTRATA_PARAMS.timeStrength },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as ColorStrataMaterial;\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\n\nexport type ColorStrataParams = {\n   /** default : `null` */\n   texture?: THREE.Texture | false;\n   /** Valid when texture is false. default : `1` */\n   scale?: number;\n   /** default : `1.0` */\n   laminateLayer?: number;\n   /** default : `(0.1, 0.1)` */\n   laminateInterval?: THREE.Vector2;\n   /** default : `(1.0, 1.0)` */\n   laminateDetail?: THREE.Vector2;\n   /** default : `(0.0, 0.0)` */\n   distortion?: THREE.Vector2;\n   /** default : `(1.0, 1.0, 1.0)` */\n   colorFactor?: THREE.Vector3;\n   /** default : `(0.0, 0.0)` */\n   timeStrength?: THREE.Vector2;\n   /** default : `false` */\n   noise?: THREE.Texture | false;\n   /** default : `(0.0,0.0)` */\n   noiseStrength?: THREE.Vector2;\n   /** you can get into the rhythm ♪ , default : `false` */\n   beat?: number | false;\n};\n\nexport type ColorStrataObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const COLORSTRATA_PARAMS: ColorStrataParams = Object.freeze({\n   texture: false,\n   scale: 1.0,\n   laminateLayer: 1.0,\n   laminateInterval: new THREE.Vector2(0.1, 0.1),\n   laminateDetail: new THREE.Vector2(1, 1),\n   distortion: new THREE.Vector2(0, 0),\n   colorFactor: new THREE.Vector3(1, 1, 1),\n   timeStrength: new THREE.Vector2(0, 0),\n   noise: false,\n   noiseStrength: new THREE.Vector2(0, 0),\n   beat: false,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useColorStrata = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   ColorStrataParams,\n   ColorStrataObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<ColorStrataParams>(COLORSTRATA_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: ColorStrataParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: ColorStrataParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl, clock } = rootState;\n\n         updateParams(newParams, customParams);\n\n         if (params.texture) {\n            updateValue(\"uTexture\", params.texture);\n            updateValue(\"isTexture\", true);\n         } else {\n            updateValue(\"isTexture\", false);\n            updateValue(\"scale\", params.scale!);\n         }\n\n         if (params.noise) {\n            updateValue(\"noise\", params.noise);\n            updateValue(\"isNoise\", true);\n            updateValue(\"noiseStrength\", params.noiseStrength!);\n         } else {\n            updateValue(\"isNoise\", false);\n         }\n\n         updateValue(\"uTime\", params.beat || clock.getElapsedTime());\n\n         updateValue(\"laminateLayer\", params.laminateLayer!);\n         updateValue(\"laminateInterval\", params.laminateInterval!);\n         updateValue(\"laminateDetail\", params.laminateDetail!);\n         updateValue(\"distortion\", params.distortion!);\n         updateValue(\"colorFactor\", params.colorFactor!);\n         updateValue(\"timeStrength\", params.timeStrength!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform float u_time;\nuniform float u_pattern;\nuniform float u_complexity;\nuniform float u_complexityAttenuation;\nuniform float u_iterations;\nuniform float u_timeStrength;\nuniform float u_scale;\n\nvec3 marble(vec3 p){\n\tvec4 n;\n\tfor(float i;i<u_iterations;i++){\n\t\tp+=sin(p.yzx + u_pattern);\n\t\tn=u_complexity*n+vec4(cross(cos(p + u_pattern),sin(p.zxy + u_pattern)),1.)*(1.+i*u_complexityAttenuation);\n\t\tp*=u_complexity;\n\t}\n\treturn n.xyz/n.w;\n}\n\nvoid main() {\n\tfloat time = u_time * u_timeStrength;\n\tvec3 color = clamp(marble(vec3(gl_FragCoord.xy*u_scale,time)),0.,1.);\n\tgl_FragColor = vec4(color,1.);\n}\n\n","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../libs/constants\";\nimport { MARBLE_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class MarbleMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_time: { value: number };\n      u_pattern: { value: number };\n      u_complexity: { value: number };\n      u_complexityAttenuation: { value: number };\n      u_iterations: { value: number };\n      u_timeStrength: { value: number };\n      u_scale: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  u_time: { value: 0 },\n                  u_pattern: { value: MARBLE_PARAMS.pattern },\n                  u_complexity: { value: MARBLE_PARAMS.complexity },\n                  u_complexityAttenuation: {\n                     value: MARBLE_PARAMS.complexityAttenuation,\n                  },\n                  u_iterations: { value: MARBLE_PARAMS.iterations },\n                  u_timeStrength: { value: MARBLE_PARAMS.timeStrength },\n                  u_scale: { value: MARBLE_PARAMS.scale },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as MarbleMaterial;\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\n\nexport type MarbleParams = {\n   /** You can add random patterns to noise by passing random numbers ,default : `0` */\n   pattern?: number;\n   /** default : `2` */\n   complexity?: number;\n   /** default : `0.2` */\n   complexityAttenuation?: number;\n   /** default : `8` */\n   iterations?: number;\n   /** default : `0.2` */\n   timeStrength?: number;\n   /** default : `0.002` */\n   scale?: number;\n   /** you can get into the rhythm ♪ , default : `false` */\n   beat?: number | false;\n};\n\nexport type MarbleObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const MARBLE_PARAMS: MarbleParams = Object.freeze({\n   pattern: 0,\n   complexity: 2,\n   complexityAttenuation: 0.2,\n   iterations: 8,\n   timeStrength: 0.2,\n   scale: 0.002,\n   beat: false,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useMarble = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<MarbleParams, MarbleObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<MarbleParams>(MARBLE_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: MarbleParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: MarbleParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl, clock } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"u_pattern\", params.pattern!);\n         updateValue(\"u_complexity\", params.complexity!);\n         updateValue(\"u_complexityAttenuation\", params.complexityAttenuation!);\n         updateValue(\"u_iterations\", params.iterations!);\n         updateValue(\"u_timeStrength\", params.timeStrength!);\n         updateValue(\"u_scale\", params.scale!);\n         updateValue(\"u_time\", params.beat || clock.getElapsedTime());\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\nprecision highp int;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\nuniform vec3 uColor1;\nuniform vec3 uColor2;\nuniform vec3 uColor3;\nuniform vec3 uColor4;\nuniform vec3 uRgbWeight;\n\n\n// Based on glsl-cos-palette by Erkaman\n// https://github.com/Erkaman/glsl-cos-palette\nvec3 cosPalette(  float t,  vec3 color1,  vec3 color2,  vec3 color3, vec3 color4 ){\n    return color1 + color2 * cos( 6.28318 * ( color3 * t + color4) );\n}\n\nvoid main() {\n\n\tvec4 tex = texture2D(uTexture, vUv);\n\tfloat gray = dot(tex.rgb, uRgbWeight);\t\t\n\n\tvec3 outColor = cosPalette(\n\t\tgray,\n\t\tuColor1,\n\t\tuColor2,\n\t\tuColor3,\n\t\tuColor4\n\t);\n\n\tgl_FragColor = vec4(outColor, tex.a);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { COSPALETTE_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class CosPaletteMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      uRgbWeight: { value: THREE.Vector3 };\n      uColor1: { value: THREE.Color };\n      uColor2: { value: THREE.Color };\n      uColor3: { value: THREE.Color };\n      uColor4: { value: THREE.Color };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  uRgbWeight: { value: COSPALETTE_PARAMS.rgbWeight },\n                  uColor1: { value: COSPALETTE_PARAMS.color1 },\n                  uColor2: { value: COSPALETTE_PARAMS.color2 },\n                  uColor3: { value: COSPALETTE_PARAMS.color3 },\n                  uColor4: { value: COSPALETTE_PARAMS.color4 },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as CosPaletteMaterial;\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type CosPaletteParams = {\n   /** color1, default : `rgb(50%, 50%, 50%)` */\n   color1?: THREE.Color;\n   /** color2, default : `rgb(50%, 50%, 50%)` */\n   color2?: THREE.Color;\n   /** color3, default : `rgb(100%, 100%, 100%)` */\n   color3?: THREE.Color;\n   /** color4, default : `rgb(0%, 10%, 20%)` */\n   color4?: THREE.Color;\n   /** texture to be used as a palette */\n   texture?: THREE.Texture;\n   /** weight of the rgb, default : `THREE.Vector3(1.0,0.0,0.0)` */\n   rgbWeight?: THREE.Vector3;\n};\n\nexport type ColorPaletteObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const COSPALETTE_PARAMS: CosPaletteParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   color1: new THREE.Color().set(0.5, 0.5, 0.5),\n   color2: new THREE.Color().set(0.5, 0.5, 0.5),\n   color3: new THREE.Color().set(1, 1, 1),\n   color4: new THREE.Color().set(0, 0.1, 0.2),\n   rgbWeight: new THREE.Vector3(0.299, 0.587, 0.114),\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useCosPalette = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   CosPaletteParams,\n   ColorPaletteObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<CosPaletteParams>(COSPALETTE_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: CosPaletteParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: CosPaletteParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uTexture\", params.texture!);\n         updateValue(\"uColor1\", params.color1!);\n         updateValue(\"uColor2\", params.color2!);\n         updateValue(\"uColor3\", params.color3!);\n         updateValue(\"uColor4\", params.color4!);\n         updateValue(\"uRgbWeight\", params.rgbWeight!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\n\nuniform vec3 uColor0;\nuniform vec3 uColor1;\n\nvoid main() {\n\tvec2 uv = vUv;\n\tvec4 texColor = texture2D(uTexture, uv);\n\tfloat grayscale = dot(texColor.rgb, vec3(0.299, 0.587, 0.114));\n\tvec3 duotone = mix(uColor0, uColor1, grayscale);\n\tgl_FragColor = vec4(duotone, texColor.a);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { DUOTONE_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class DuoToneMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      uColor0: { value: THREE.Color };\n      uColor1: { value: THREE.Color };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  uColor0: { value: DUOTONE_PARAMS.color0 },\n                  uColor1: { value: DUOTONE_PARAMS.color1 },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as DuoToneMaterial;\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { DuoToneMaterial, useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type DuoToneParams = {\n   /** Make this texture duotone , Default : `THREE.Texture()` */\n   texture?: THREE.Texture;\n   /** 1st color ,　Default : `THREE.Color(0xffffff)` */\n   color0?: THREE.Color;\n   /** 2nd color , Default : `THREE.Color(0x000000)` */\n   color1?: THREE.Color;\n};\n\nexport type DuoToneObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: DuoToneMaterial;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const DUOTONE_PARAMS: DuoToneParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   color0: new THREE.Color(0xffffff),\n   color1: new THREE.Color(0x000000),\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useDuoTone = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<DuoToneParams, DuoToneObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<DuoToneParams>(DUOTONE_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: DuoToneParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: DuoToneParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uTexture\", params.texture!);\n         updateValue(\"uColor0\", params.color0!);\n         updateValue(\"uColor1\", params.color1!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform sampler2D uMap;\nuniform bool u_isAlphaMap;\nuniform sampler2D u_alphaMap;\nuniform float uMapIntensity;\nuniform vec3 u_brightness;\nuniform float u_min;\nuniform float u_max;\nuniform vec3 u_dodgeColor;\nuniform bool u_isDodgeColor;\n\nvoid main() {\n\tvec2 uv = vUv;\n\n\t#usf <fxBlending>\n\n\t// color blending\n\tfloat brightness = dot(mapColor,u_brightness);\n\tvec4 textureMap = texture2D(u_texture, uv);\n\tfloat blendValue = smoothstep(u_min, u_max, brightness);\n\n\t// set dodge color\n\tvec3 dodgeColor = u_isDodgeColor ? u_dodgeColor : mapColor;\n\tvec3 outputColor = blendValue * dodgeColor + (1.0 - blendValue) * textureMap.rgb;\n\t\n\t// alpha blending\n\tfloat alpha = u_isAlphaMap ? texture2D(u_alphaMap, uv).a : textureMap.a;\n\tfloat mixValue = u_isAlphaMap ? alpha : 0.0;\n\tvec3 alphaColor = vec3(mix(outputColor,mapColor,mixValue));\n\n\tgl_FragColor = vec4(alphaColor,alpha);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   DEFAULT_TEXTURE,\n   MATERIAL_BASIC_PARAMS,\n} from \"../../../libs/constants\";\nimport { BLENDING_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class BlendingMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      uMap: { value: THREE.Texture };\n      u_alphaMap: { value: THREE.Texture };\n      u_isAlphaMap: { value: boolean };\n      uMapIntensity: { value: number };\n      u_brightness: { value: THREE.Vector3 };\n      u_min: { value: number };\n      u_max: { value: number };\n      u_dodgeColor: { value: THREE.Color };\n      u_isDodgeColor: { value: boolean };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  u_texture: { value: DEFAULT_TEXTURE },\n                  uMap: { value: DEFAULT_TEXTURE },\n                  u_alphaMap: { value: DEFAULT_TEXTURE },\n                  u_isAlphaMap: { value: false },\n                  uMapIntensity: { value: BLENDING_PARAMS.mapIntensity },\n                  u_brightness: { value: BLENDING_PARAMS.brightness },\n                  u_min: { value: BLENDING_PARAMS.min },\n                  u_max: { value: BLENDING_PARAMS.max },\n                  u_dodgeColor: { value: new THREE.Color() },\n                  u_isDodgeColor: { value: false },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as BlendingMaterial;\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type BlendingParams = {\n   /** Make this texture Blending , default : `THREE.Texture` */\n   texture?: THREE.Texture;\n   /** map texture, default : `THREE.Texture` */\n   map?: THREE.Texture;\n   /** map strength , r,g value are affecting , default : `0.3` */\n   mapIntensity?: number;\n   /** Alpha blending is performed using the alpha of the set texture. , default : `false` */\n   alphaMap?: THREE.Texture | false;\n   /** default : `(0.5,0.5,0.5)` */\n   brightness?: THREE.Vector3;\n   /** default : `0.0` */\n   min?: number;\n   /** default : `1.0` */\n   max?: number;\n   /** If set, this value will apply color dodge , default : `false` */\n   dodgeColor?: THREE.Color | false;\n};\n\nexport type BlendingObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const BLENDING_PARAMS: BlendingParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   map: DEFAULT_TEXTURE,\n   alphaMap: false,\n   mapIntensity: 0.3,\n   brightness: new THREE.Vector3(0.5, 0.5, 0.5),\n   min: 0.0,\n   max: 1.0,\n   dodgeColor: false,\n});\n\n/**\n * Blend map to texture. You can set the threshold for blending with brightness. You can set the dodge color by setting color. \nIf you don't want to reflect the map's color, you can use useFxBlending instead.\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useBlending = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<BlendingParams, BlendingObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<BlendingParams>(BLENDING_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: BlendingParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: BlendingParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"u_texture\", params.texture!);\n         updateValue(\"uMap\", params.map!);\n         updateValue(\"uMapIntensity\", params.mapIntensity!);\n         if (params.alphaMap) {\n            updateValue(\"u_alphaMap\", params.alphaMap!);\n            updateValue(\"u_isAlphaMap\", true);\n         } else {\n            updateValue(\"u_isAlphaMap\", false);\n         }\n         updateValue(\"u_brightness\", params.brightness!);\n         updateValue(\"u_min\", params.min!);\n         updateValue(\"u_max\", params.max!);\n         if (params.dodgeColor) {\n            updateValue(\"u_dodgeColor\", params.dodgeColor);\n            updateValue(\"u_isDodgeColor\", true);\n         } else {\n            updateValue(\"u_isDodgeColor\", false);\n         }\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform vec2 uResolution;\nuniform vec2 uTextureResolution;\nuniform sampler2D uTexture0;\nuniform sampler2D uTexture1;\nuniform sampler2D uMap;\nuniform float mapIntensity;\nuniform float edgeIntensity;\nuniform float progress;\nuniform float dirX;\nuniform float dirY;\nuniform vec2 epicenter;\nuniform float padding;\n\nbool isInPaddingArea(vec2 uv) {\n   return uv.x < padding || uv.x > 1.0 - padding || uv.y < padding || uv.y > 1.0 - padding;\n}\n\nvoid main() {\n\t#usf <coverTexture>\n\n\t// fx map\n\tvec2 map = texture2D(uMap, uv).rg;\n\tvec2 normalizedMap = map * 2.0 - 1.0;\n\n\t// multiply edge fx\n\tuv = uv * 2.0 - 1.0;\n\tuv *= map * distance(epicenter, uv) * edgeIntensity + 1.0;\n\tuv = (uv + 1.0) / 2.0;\n\n\t// padding\n\tif (isInPaddingArea(uv)) {\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n\t}\n\tvec2 paddedUV = uv * (1.0 - 2.0 * padding * -1.) + padding * -1.;\n\n\t// centered uv\n\tvec2 centeredUV = paddedUV - vec2(0.5);\n\n\t// multiply map fx\n\tcenteredUV *= normalizedMap * map * mapIntensity + 1.0;\n\n\t// texture 0\n\tfloat xOffsetTexture0 = 0.5 - dirX * progress;\n\tfloat yOffsetTexture0 = 0.5 - dirY * progress;\n\tvec2 samplePosTexture0 = vec2(xOffsetTexture0, yOffsetTexture0) + centeredUV;\n\n\t//texture 1\n\tfloat xOffsetTexture1 = 0.5 + dirX * (1.0 - progress);\n\tfloat yOffsetTexture1 = 0.5 + dirY * (1.0 - progress);\n\tvec2 samplePosTexture1 = vec2(xOffsetTexture1, yOffsetTexture1) + centeredUV;\n\n\tvec4 color0 = texture2D(uTexture0, samplePosTexture0);\n\tvec4 color1 = texture2D(uTexture1, samplePosTexture1);\n\n\tgl_FragColor = mix(color0, color1, progress);\n\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useResolution } from \"../../../utils/useResolution\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { setUniform } from \"../../../utils/setUniforms\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { FXTEXTURE_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class FxTextureMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uResolution: { value: THREE.Vector2 };\n      uTextureResolution: { value: THREE.Vector2 };\n      uTexture0: { value: THREE.Texture };\n      uTexture1: { value: THREE.Texture };\n      padding: { value: number };\n      uMap: { value: THREE.Texture };\n      edgeIntensity: { value: number };\n      mapIntensity: { value: number };\n      epicenter: { value: THREE.Vector2 };\n      progress: { value: number };\n      dirX: { value: number };\n      dirY: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number | false;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uResolution: { value: new THREE.Vector2() },\n                  uTextureResolution: { value: new THREE.Vector2() },\n                  uTexture0: { value: DEFAULT_TEXTURE },\n                  uTexture1: { value: DEFAULT_TEXTURE },\n                  padding: { value: FXTEXTURE_PARAMS.padding },\n                  uMap: { value: DEFAULT_TEXTURE },\n                  edgeIntensity: { value: FXTEXTURE_PARAMS.edgeIntensity },\n                  mapIntensity: { value: FXTEXTURE_PARAMS.mapIntensity },\n                  epicenter: { value: FXTEXTURE_PARAMS.epicenter },\n                  progress: { value: FXTEXTURE_PARAMS.progress },\n                  dirX: { value: FXTEXTURE_PARAMS.dir?.x },\n                  dirY: { value: FXTEXTURE_PARAMS.dir?.y },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as FxTextureMaterial;\n\n   const resolution = useResolution(size, dpr);\n   setUniform(material)(\"uResolution\", resolution.clone());\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo } from \"react\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type FxTextureParams = {\n   /** 1st texture , default : `THREE.Texture()` */\n   texture0?: THREE.Texture;\n   /** 2nd texture , default : `THREE.Texture()` */\n   texture1?: THREE.Texture;\n   /** add transparent padding, 0.0 ~ 1.0 , default : `0.0` */\n   padding?: number;\n   /** The color map. The uv value is affected according to this rbg , default : `THREE.Texture()` */\n   map?: THREE.Texture;\n   /** intensity of map , r,g value are affecting , default : `0.0` */\n   mapIntensity?: number;\n   /** Intensity of effect on edges , default : `0.0` */\n   edgeIntensity?: number;\n   /** epicenter of fx, -1 ~ 1 , default : `vec2(0.0,0.0)` */\n   epicenter?: THREE.Vector2;\n   /** Switch value to switch between texture0 and texture1 , 0 ~ 1 , default : `0` */\n   progress?: number;\n   /** direction of transition , default: `THREE.Vector2(0, 0)` */\n   dir?: THREE.Vector2;\n};\n\nexport type FxTextureObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const FXTEXTURE_PARAMS: FxTextureParams = Object.freeze({\n   texture0: DEFAULT_TEXTURE,\n   texture1: DEFAULT_TEXTURE,\n   padding: 0.0,\n   map: DEFAULT_TEXTURE,\n   mapIntensity: 0.0,\n   edgeIntensity: 0.0,\n   epicenter: new THREE.Vector2(0, 0),\n   progress: 0.0,\n   dir: new THREE.Vector2(0, 0),\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useFxTexture = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<FxTextureParams, FxTextureObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      dpr: _dpr.shader,\n      onBeforeInit,\n   });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      dpr: _dpr.fbo,\n      size,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<FxTextureParams>(FXTEXTURE_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: FxTextureParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: FxTextureParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uTexture0\", params.texture0!);\n         updateValue(\"uTexture1\", params.texture1!);\n         updateValue(\"progress\", params.progress!);\n         // calculate resolution by linear interpolation.\n         const tex0Res = [\n            params.texture0!?.image?.width || 0,\n            params.texture0!?.image?.height || 0,\n         ];\n         const tex1Res = [\n            params.texture1!?.image?.width || 0,\n            params.texture1!?.image?.height || 0,\n         ];\n         const interpolatedResolution = tex0Res.map((value, index) => {\n            return value + (tex1Res[index] - value) * params.progress!;\n         });\n         updateValue(\"uTextureResolution\", interpolatedResolution);\n         updateValue(\"padding\", params.padding!);\n         updateValue(\"uMap\", params.map!);\n         updateValue(\"mapIntensity\", params.mapIntensity!);\n         updateValue(\"edgeIntensity\", params.edgeIntensity!);\n         updateValue(\"epicenter\", params.epicenter!);\n         updateValue(\"dirX\", params.dir!.x);\n         updateValue(\"dirY\", params.dir!.y);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform vec3 u_brightness;\nuniform float u_min;\nuniform float u_max;\n\nvoid main() {\n\tvec2 uv = vUv;\n\tvec3 color = texture2D(u_texture, uv).rgb;\n\tfloat brightness = dot(color,u_brightness);\n\tfloat alpha = clamp(smoothstep(u_min, u_max, brightness),0.0,1.0);\n\tgl_FragColor = vec4(color, alpha);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { BRIGHTNESSPICKER_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class BrightnessPickerMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_brightness: { value: THREE.Vector3 };\n      u_min: { value: number };\n      u_max: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  u_texture: { value: DEFAULT_TEXTURE },\n                  u_brightness: { value: BRIGHTNESSPICKER_PARAMS.brightness },\n                  u_min: { value: BRIGHTNESSPICKER_PARAMS.min },\n                  u_max: { value: BRIGHTNESSPICKER_PARAMS.max },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as BrightnessPickerMaterial;\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type BrightnessPickerParams = {\n   /** pick brightness from this texture , default : `THREE.Texture` */\n   texture?: THREE.Texture;\n   /** default : `(0.5,0.5,0.5)` */\n   brightness?: THREE.Vector3;\n   /** default : `0.0` */\n   min?: number;\n   /** default : `1.0` */\n   max?: number;\n};\n\nexport type BrightnessPickerObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const BRIGHTNESSPICKER_PARAMS: BrightnessPickerParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   brightness: new THREE.Vector3(0.5, 0.5, 0.5),\n   min: 0.0,\n   max: 1.0,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useBrightnessPicker = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   BrightnessPickerParams,\n   BrightnessPickerObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<BrightnessPickerParams>(\n      BRIGHTNESSPICKER_PARAMS\n   );\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: BrightnessPickerParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: BrightnessPickerParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"u_texture\", params.texture!);\n         updateValue(\"u_brightness\", params.brightness!);\n         updateValue(\"u_min\", params.min!);\n         updateValue(\"u_max\", params.max!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform sampler2D uMap;\nuniform float uMapIntensity;\n\nvoid main() {\n\tvec2 uv = vUv;\n\n\t#usf <fxBlending>\n\n\tgl_FragColor = texture2D(u_texture, uv);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { FXBLENDING_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class FxBlendingMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      uMap: { value: THREE.Texture };\n      uMapIntensity: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  u_texture: { value: DEFAULT_TEXTURE },\n                  uMap: { value: DEFAULT_TEXTURE },\n                  uMapIntensity: { value: FXBLENDING_PARAMS.mapIntensity },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as FxBlendingMaterial;\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type FxBlendingParams = {\n   /** Make this texture Blending , default : `THREE.Texture` */\n   texture?: THREE.Texture;\n   /** map texture, default : `THREE.Texture` */\n   map?: THREE.Texture;\n   /** map strength , r,g value are affecting , default : `0.3` */\n   mapIntensity?: number;\n};\n\nexport type FxBlendingObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const FXBLENDING_PARAMS: FxBlendingParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   map: DEFAULT_TEXTURE,\n   mapIntensity: 0.3,\n});\n\n/**\n * Blend map to texture. You can change the intensity of fx applied by the rg value of map. Unlike \"useBlending\", the map color is not reflected.\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useFxBlending = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   FxBlendingParams,\n   FxBlendingObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<FxBlendingParams>(FXBLENDING_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: FxBlendingParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: FxBlendingParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"u_texture\", params.texture!);\n         updateValue(\"uMap\", params.map!);\n         updateValue(\"uMapIntensity\", params.mapIntensity!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nuniform sampler2D uTexture;\nuniform sampler2D uMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n\tvec2 uv = vUv;\n\tvec4 tex = texture2D(uTexture, uv);\n\tvec4 map = texture2D(uMap, uv);\n\tgl_FragColor = mix(tex,map,map.a);\n}\n\n","import * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useMemo } from \"react\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport {\n   DEFAULT_TEXTURE,\n   MATERIAL_BASIC_PARAMS,\n} from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class AlphaBlendingMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      uMap: { value: THREE.Texture };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  uMap: { value: DEFAULT_TEXTURE },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as AlphaBlendingMaterial;\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useCallback, useMemo } from \"react\";\nimport { RootState } from \"@react-three/fiber\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type AlphaBlendingParams = {\n   /** default : `THREE.Texture()` */\n   texture?: THREE.Texture;\n   /** alpha map , default : `THREE.Texture()` */\n   map?: THREE.Texture;\n};\n\nexport type AlphaBlendingObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const ALPHABLENDING_PARAMS: AlphaBlendingParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   map: DEFAULT_TEXTURE,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useAlphaBlending = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   AlphaBlendingParams,\n   AlphaBlendingObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      onBeforeInit,\n   });\n   const camera = useCamera(size);\n\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] =\n      useParams<AlphaBlendingParams>(ALPHABLENDING_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: AlphaBlendingParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: AlphaBlendingParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uTexture\", params.texture!);\n         updateValue(\"uMap\", params.map!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateValue, updateRenderTarget, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform float u_brightness;\nuniform float u_saturation;\n\n#usf <rgb2hsv>\n\n#usf <hsv2rgb>\n\nvoid main() {\n\tvec4 tex = texture2D(u_texture, vUv);\n\tvec3 hsv = rgb2hsv(tex.rgb);\n\thsv.y *= u_saturation;\n\thsv.z *= u_brightness;\n\tvec3 final = hsv2rgb(hsv);\n\tgl_FragColor = vec4(final, tex.a);\n}\n\n","import * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useMemo } from \"react\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { HSV_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class HSVMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_brightness: { value: number };\n      u_saturation: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  u_texture: { value: DEFAULT_TEXTURE },\n                  u_brightness: { value: HSV_PARAMS.brightness },\n                  u_saturation: { value: HSV_PARAMS.saturation },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as HSVMaterial;\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n   return { material, mesh };\n};\n","import * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useCallback, useMemo } from \"react\";\nimport { RootState } from \"@react-three/fiber\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type HSVParams = {\n   /** default : `THREE.Texture()` */\n   texture?: THREE.Texture;\n   /** default : `1` */\n   brightness?: number;\n   /** default : `1` */\n   saturation?: number;\n};\n\nexport type HSVObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const HSV_PARAMS: HSVParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   brightness: 1,\n   saturation: 1,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useHSV = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<HSVParams, HSVObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      onBeforeInit,\n   });\n   const camera = useCamera(size);\n\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<HSVParams>(HSV_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: HSVParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: HSVParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"u_texture\", params.texture!);\n         updateValue(\"u_brightness\", params.brightness!);\n         updateValue(\"u_saturation\", params.saturation!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateValue, updateRenderTarget, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform vec2 uResolution;\nuniform vec2 uTextureResolution;\nuniform sampler2D uTexture;\n\nvoid main() {\n\t#usf <coverTexture>\n\t\n\tgl_FragColor = texture2D(uTexture, uv);\n}\n\n","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useResolution } from \"../../../utils/useResolution\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { setUniform } from \"../../../utils/setUniforms\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class FxTextureMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uResolution: { value: THREE.Vector2 };\n      uTextureResolution: { value: THREE.Vector2 };\n      uTexture: { value: THREE.Texture };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number | false;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uResolution: { value: new THREE.Vector2() },\n                  uTextureResolution: { value: new THREE.Vector2() },\n                  uTexture: { value: DEFAULT_TEXTURE },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as FxTextureMaterial;\n\n   const resolution = useResolution(size, dpr);\n   setUniform(material)(\"uResolution\", resolution.clone());\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo } from \"react\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type CoverTextureParams = {\n   /** Textures that you want to display exactly on the screen , default : `THREE.Texture()` */\n   texture?: THREE.Texture;\n};\n\nexport type CoverTextureObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const COVERTEXTURE_PARAMS: CoverTextureParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useCoverTexture = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   CoverTextureParams,\n   CoverTextureObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      dpr: _dpr.shader,\n      onBeforeInit,\n   });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      dpr: _dpr.fbo,\n      size,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] =\n      useParams<CoverTextureParams>(COVERTEXTURE_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: CoverTextureParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: CoverTextureParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uTexture\", params.texture!);\n         updateValue(\"uTextureResolution\", [\n            params.texture!?.source?.data?.width || 0,\n            params.texture!?.source?.data?.height || 0,\n         ]);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\nuniform vec2 uResolution;\nuniform float uBlurSize;\n\nvoid main() {\n\tvec2 uv = vUv;\t\n\tvec2 perDivSize = uBlurSize / uResolution;\n\n\t// calc average color value from adjacent point\n\tvec4 outColor = vec4(\n\t\ttexture2D(uTexture, uv + perDivSize * vec2(-1.0, -1.0)) +\n\t\ttexture2D(uTexture, uv + perDivSize * vec2(0.0, -1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(1.0, -1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(-1.0, 0.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(0.0,  0.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(1.0,  0.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(-1.0, 1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(0.0,  1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(1.0,  1.0))\n\t\t) / 9.0;\n\t\n\tgl_FragColor = outColor;\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { SIMPLEBLUR_PARAMS } from \".\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class SampleMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      uResolution: { value: THREE.Vector2 };\n      uBlurSize: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  uResolution: { value: new THREE.Vector2(0, 0) },\n                  uBlurSize: { value: SIMPLEBLUR_PARAMS.blurSize },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as SampleMaterial;\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useDoubleFBO, DoubleRenderTarget } from \"../../../utils/useDoubleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { useParams } from \"../../../utils/useParams\";\nimport type { HooksProps, HooksReturn } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { UseFboProps } from \"../../..\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type SimpleBlurParams = {\n   /** Make this texture blur , default : `THREE.Texture()` */\n   texture?: THREE.Texture;\n   /** blurSize, default : `3` */\n   blurSize?: number;\n   /** blurPower, affects performance default : `5` */\n   blurPower?: number;\n};\n\nexport type SimpleBlurObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: DoubleRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const SIMPLEBLUR_PARAMS: SimpleBlurParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   blurSize: 3,\n   blurPower: 5,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useSimpleBlur = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   SimpleBlurParams,\n   SimpleBlurObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n\n   const fboProps = useMemo(\n      () => ({\n         scene,\n         camera,\n         size,\n         dpr: _dpr.fbo,\n         isSizeUpdate,\n         ...renderTargetOptions,\n      }),\n      [scene, camera, size, _dpr.fbo, isSizeUpdate, renderTargetOptions]\n   ) as UseFboProps;\n\n   const [renderTarget, updateTempTexture] = useDoubleFBO(fboProps);\n   const [params, setParams] = useParams<SimpleBlurParams>(SIMPLEBLUR_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: SimpleBlurParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: SimpleBlurParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uTexture\", params.texture!);\n         updateValue(\"uResolution\", [\n            params.texture!?.source?.data?.width || 0,\n            params.texture!?.source?.data?.height || 0,\n         ]);\n         updateValue(\"uBlurSize\", params.blurSize!);\n\n         let _tempTexture: THREE.Texture = updateTempTexture(gl);\n\n         for (let i = 0; i < params.blurPower!; i++) {\n            updateValue(\"uTexture\", _tempTexture);\n            _tempTexture = updateTempTexture(gl);\n         }\n\n         return _tempTexture;\n      },\n      [updateTempTexture, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.read.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\nuniform sampler2D uBackbuffer;\nuniform vec2 uBegin;\nuniform vec2 uEnd;\nuniform float uStrength;\n\nvoid main() {\n\tvec2 uv = vUv;\t\n\tvec4 current = texture2D(uTexture, uv + uBegin*.1);\n\tvec4 back = texture2D(uBackbuffer, uv + uEnd*.1);\n\tvec4 mixed = mix(current,back,uStrength);\n\tgl_FragColor = mixed;\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MOTIONBLUR_PARAMS } from \".\";\nimport { MaterialProps } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class MotionBlurMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      uBackbuffer: { value: THREE.Texture };\n      uBegin: { value: THREE.Vector2 };\n      uEnd: { value: THREE.Vector2 };\n      uStrength: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  uBackbuffer: { value: DEFAULT_TEXTURE },\n                  uBegin: { value: MOTIONBLUR_PARAMS.begin },\n                  uEnd: { value: MOTIONBLUR_PARAMS.end },\n                  uStrength: { value: MOTIONBLUR_PARAMS.strength },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as MotionBlurMaterial;\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useDoubleFBO, DoubleRenderTarget } from \"../../../utils/useDoubleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { useParams } from \"../../../utils/useParams\";\nimport type { HooksProps, HooksReturn } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { UseFboProps } from \"../../..\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type MotionBlurParams = {\n   /** Make this texture blur, default : `THREE.Texture()` */\n   texture?: THREE.Texture;\n   /** motion begin, default : `THREE.Vector2(0, 0)` */\n   begin?: THREE.Vector2;\n   /** motion end, default : `THREE.Vector2(0, 0)` */\n   end?: THREE.Vector2;\n   /** motion strength, default : `0.9` */\n   strength?: number;\n};\n\nexport type MotionBlurObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: DoubleRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const MOTIONBLUR_PARAMS: MotionBlurParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   begin: new THREE.Vector2(0, 0),\n   end: new THREE.Vector2(0, 0),\n   strength: 0.9,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useMotionBlur = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<\n   MotionBlurParams,\n   MotionBlurObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n\n   const fboProps = useMemo(\n      () => ({\n         scene,\n         camera,\n         size,\n         dpr: _dpr.fbo,\n         isSizeUpdate,\n         ...renderTargetOptions,\n      }),\n      [scene, camera, size, _dpr.fbo, isSizeUpdate, renderTargetOptions]\n   ) as UseFboProps;\n\n   const [renderTarget, updateRenderTarget] = useDoubleFBO(fboProps);\n\n   const [params, setParams] = useParams<MotionBlurParams>(MOTIONBLUR_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: MotionBlurParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: MotionBlurParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uTexture\", params.texture!);\n         updateValue(\"uBegin\", params.begin!);\n         updateValue(\"uEnd\", params.end!);\n         updateValue(\"uStrength\", params.strength!);\n\n         return updateRenderTarget(gl, ({ read }) => {\n            updateValue(\"uBackbuffer\", read);\n         });\n      },\n      [updateRenderTarget, updateValue, updateParams, params]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.read.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\n\nvarying vec2 vUv;\nuniform float uProgress;\nuniform float uStrength;\nuniform float uWidth;\nuniform vec2 uEpicenter;\nuniform int uMode;\n\nfloat PI = 3.141592653589;\n\nvoid main() {\n\n\tvec2 uv = vUv;\n\n\tfloat progress = min(uProgress, 1.0);\n\tfloat progressFactor = sin(progress * PI);\n\n\tfloat border = progress - progress * progressFactor * uWidth;\n\tfloat blur = uStrength * progressFactor;\n\t\n\t// 0 ~ 1\n\tvec2 normalizeCenter = (uEpicenter + 1.0) / 2.0;\n\n\t// 0:center 1:horizontal 2:vertical\n\tfloat dist = uMode == 0 ? length(uv - normalizeCenter) : uMode == 1 ? length(uv.x - normalizeCenter.x) : length(uv.y - normalizeCenter.y);\n\n\t// Calculate the maximum distance to the four corners of the screen\n\tfloat maxDistance = max(\n\t\tlength(vec2(0.0, 0.0) - normalizeCenter),\n\t\tmax(\n\t\t\t\tlength(vec2(1.0, 0.0) - normalizeCenter),\n\t\t\t\tmax(\n\t\t\t\t\tlength(vec2(0.0, 1.0) - normalizeCenter),\n\t\t\t\t\tlength(vec2(1.0, 1.0) - normalizeCenter)\n\t\t\t\t)\n\t\t)\n\t);\n\n\t// Scale distance so that waves extend to the edge of the screen\n\tdist = maxDistance > 0.0 ? dist / maxDistance : dist;\n\n\tvec3 color = vec3(smoothstep(border - blur, border, dist) -\n                  smoothstep(progress, progress + blur, dist));\n\t\n\t// Ensure color is 0 when progress is 0,1\n\tcolor *= progressFactor;\n\n\tgl_FragColor = vec4(color, 1.0);\n}\n\n","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { WAVE_PARAMS } from \".\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps } from \"../../types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class WaveMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uEpicenter: { value: THREE.Vector2 };\n      uProgress: { value: number };\n      uStrength: { value: number };\n      uWidth: { value: number };\n      uMode: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   onBeforeInit,\n}: { scene: THREE.Scene } & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uEpicenter: { value: WAVE_PARAMS.epicenter },\n                  uProgress: { value: WAVE_PARAMS.progress },\n                  uStrength: { value: WAVE_PARAMS.strength },\n                  uWidth: { value: WAVE_PARAMS.width },\n                  uMode: { value: 0 },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as WaveMaterial;\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo } from \"react\";\nimport { useMesh } from \"./useMesh\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\n\nexport type WaveParams = {\n   /** -1.0 ~ 1.0 , default : `vec2(0.0,0.0)` */\n   epicenter?: THREE.Vector2;\n   /** 0.0 ~ 1.0 , default : `0.0` */\n   progress?: number;\n   /** default : `0.0` */\n   width?: number;\n   /** default : `0.0` */\n   strength?: number;\n   /** default : `center` */\n   mode?: \"center\" | \"horizontal\" | \"vertical\";\n};\n\nexport type WaveObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const WAVE_PARAMS: WaveParams = Object.freeze({\n   epicenter: new THREE.Vector2(0.0, 0.0),\n   progress: 0.0,\n   width: 0.0,\n   strength: 0.0,\n   mode: \"center\",\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx\n */\nexport const useWave = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<WaveParams, WaveObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({ scene, onBeforeInit });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<WaveParams>(WAVE_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: WaveParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: WaveParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uEpicenter\", params.epicenter!);\n         updateValue(\"uProgress\", params.progress!);\n         updateValue(\"uWidth\", params.width!);\n         updateValue(\"uStrength\", params.strength!);\n         updateValue(\n            \"uMode\",\n            params.mode! === \"center\"\n               ? 0\n               : params.mode! === \"horizontal\"\n               ? 1\n               : 2\n         );\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","#usf <planeVertex>","precision highp float;\nvarying vec2 vUv;\n\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\nuniform vec3 u_keyColor;\nuniform float u_similarity;\nuniform float u_smoothness;\nuniform float u_spill;\n\nuniform vec4 u_color;\nuniform float u_contrast;\nuniform float u_brightness;\nuniform float u_gamma;\n\n// From https://github.com/libretro/glsl-shaders/blob/master/nnedi3/shaders/rgb-to-yuv.glsl\nvec2 RGBtoUV(vec3 rgb) {\n  return vec2(\n    rgb.r * -0.169 + rgb.g * -0.331 + rgb.b *  0.5    + 0.5,\n    rgb.r *  0.5   + rgb.g * -0.419 + rgb.b * -0.081  + 0.5\n  );\n}\nfloat getChromeDist(vec3 texColor){\n\tfloat chromaDist = distance(RGBtoUV(texColor), RGBtoUV(u_keyColor));\n\treturn chromaDist;\n}\n\nfloat getBoxFilteredChromaDist(vec3 rgb, vec2 uv)\n{\n\tvec2 pixel_size = vec2(1.) / u_resolution;\n\tvec2 h_pixel_size = pixel_size / 2.0;\n\tvec2 point_0 = vec2(pixel_size.x, h_pixel_size.y);\n\tvec2 point_1 = vec2(h_pixel_size.x, -pixel_size.y);\n\tfloat distVal = getChromeDist(texture2D(u_texture,uv-point_0).rgb);\n\tdistVal += getChromeDist(texture2D(u_texture,uv+point_0).rgb);\n\tdistVal += getChromeDist(texture2D(u_texture,uv-point_1).rgb);\n\tdistVal += getChromeDist(texture2D(u_texture,uv+point_1).rgb);\n\tdistVal *= 2.0;\n\tdistVal += getChromeDist(rgb);\n\treturn distVal / 9.0;\n}\n\nvec4 CalcColor(vec4 rgba)\n{\n\treturn vec4(pow(rgba.rgb, vec3(u_gamma, u_gamma, u_gamma)) * u_contrast + u_brightness, rgba.a);\n}\n\nvoid main() {\n\n\tvec2 uv = vUv;\n\n\tvec4 texColor = texture2D(u_texture, uv);\n\ttexColor.rgb *= (texColor.a > 0.) ? (1. / texColor.a) : 0.;\n\n\tfloat chromaDist = getBoxFilteredChromaDist(texColor.rgb,uv);\n\t\n\tfloat baseMask = chromaDist - u_similarity;\n\tfloat fullMask = pow(clamp(baseMask / u_smoothness, 0., 1.), 1.5);\n\t\n\ttexColor.rgba *= u_color;\n\ttexColor.a = fullMask;\n\n\tfloat spillVal = pow(clamp(baseMask / u_spill, 0., 1.), 1.5);\n\tfloat desat = clamp(texColor.r * 0.2126 + texColor.g * 0.7152 + texColor.b * 0.0722, 0., 1.);\n\ttexColor.rgb = mix(vec3(desat, desat, desat), texColor.rgb, spillVal);\n\n\tvec4 finColor = CalcColor(texColor);\n\n\tgl_FragColor = finColor;\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { setUniform } from \"../../../utils/setUniforms\";\nimport { useResolution } from \"../../../utils/useResolution\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { CHROMAKEY_PARAMS } from \".\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class ChromaKeyMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_resolution: { value: THREE.Vector2 };\n      u_keyColor: { value: THREE.Color };\n      u_similarity: { value: number };\n      u_smoothness: { value: number };\n      u_spill: { value: number };\n      u_color: { value: THREE.Vector4 };\n      u_contrast: { value: number };\n      u_brightness: { value: number };\n      u_gamma: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number | false;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  u_texture: { value: DEFAULT_TEXTURE },\n                  u_resolution: { value: new THREE.Vector2() },\n                  u_keyColor: { value: CHROMAKEY_PARAMS.color },\n                  u_similarity: { value: CHROMAKEY_PARAMS.similarity },\n                  u_smoothness: { value: CHROMAKEY_PARAMS.smoothness },\n                  u_spill: { value: CHROMAKEY_PARAMS.spill },\n                  u_color: { value: CHROMAKEY_PARAMS.color },\n                  u_contrast: { value: CHROMAKEY_PARAMS.contrast },\n                  u_brightness: { value: CHROMAKEY_PARAMS.brightness },\n                  u_gamma: { value: CHROMAKEY_PARAMS.gamma },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n\n      return mat;\n   }, [onBeforeInit]) as ChromaKeyMaterial;\n\n   const resolution = useResolution(size, dpr);\n   setUniform(material)(\"u_resolution\", resolution.clone());\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../../types\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type ChromaKeyParams = {\n   /** Process this texture with chroma key , default : `THREE.Texture` */\n   texture?: THREE.Texture;\n   /** key color for chromakey processing , default: `THREE.Color(0x00ff00)` */\n   keyColor?: THREE.Color;\n   /** If the similarity with the key color exceeds this value, it becomes transparent. , default : `0.2` */\n   similarity?: number;\n   /** smoothness , default : `0.1` */\n   smoothness?: number;\n   /** spill , default : `0.2` */\n   spill?: number;\n   /** tone correction , default : `THREE.Vector4(1.0, 1.0, 1.0, 1.0)` */\n   color?: THREE.Vector4;\n   /** contrast , default : `1.0` */\n   contrast?: number;\n   /** brightness , default : `0.0` */\n   brightness?: number;\n   /** gamma correction , default : `1.0` */\n   gamma?: number;\n};\n\nexport type ChromaKeyObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const CHROMAKEY_PARAMS: ChromaKeyParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   keyColor: new THREE.Color(0x00ff00),\n   similarity: 0.2,\n   smoothness: 0.1,\n   spill: 0.2,\n   color: new THREE.Vector4(1.0, 1.0, 1.0, 1.0),\n   contrast: 1.0,\n   brightness: 0.0,\n   gamma: 1.0,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useChromaKey = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<ChromaKeyParams, ChromaKeyObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      dpr: _dpr.shader,\n      onBeforeInit,\n   });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n\n   const [params, setParams] = useParams<ChromaKeyParams>(CHROMAKEY_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: ChromaKeyParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: ChromaKeyParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"u_texture\", params.texture!);\n         updateValue(\"u_keyColor\", params.keyColor!);\n         updateValue(\"u_similarity\", params.similarity!);\n         updateValue(\"u_smoothness\", params.smoothness!);\n         updateValue(\"u_spill\", params.spill!);\n         updateValue(\"u_color\", params.color!);\n         updateValue(\"u_contrast\", params.contrast!);\n         updateValue(\"u_brightness\", params.brightness!);\n         updateValue(\"u_gamma\", params.gamma!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","precision highp float;\n\nvarying vec2 vUv;\n#usf <varyings>\n\n#usf <uniforms>\n\nvoid main() {\n\tvec4 usf_Position = vec4(position,1.);\n\tvUv = uv;\n\n\t#usf <main>\n\t\n\tgl_Position = usf_Position;\n}","precision highp float;\n\nvarying vec2 vUv;\n#usf <varyings>\n\nuniform sampler2D uTexture;\nuniform sampler2D uBackbuffer;\nuniform float uTime;\nuniform vec2 uPointer;\nuniform vec2 uResolution;\n\n#usf <uniforms>\n\nvoid main() {\n\tvec4 usf_FragColor = vec4(1.);\n\n\t#usf <main>\n\t\n\tgl_FragColor = usf_FragColor;\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport { setUniform, useResolution } from \"../../..\";\nimport {\n   MATERIAL_BASIC_PARAMS,\n   DEFAULT_TEXTURE,\n} from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class BlankMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      uBackbuffer: { value: THREE.Texture };\n      uTime: { value: number };\n      uPointer: { value: THREE.Vector2 };\n      uResolution: { value: THREE.Vector2 };\n   };\n}\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number | false;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uTexture: { value: DEFAULT_TEXTURE },\n                  uBackbuffer: { value: DEFAULT_TEXTURE },\n                  uTime: { value: 0 },\n                  uPointer: { value: new THREE.Vector2() },\n                  uResolution: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as BlankMaterial;\n\n   const resolution = useResolution(size, dpr);\n   setUniform(material)(\"uResolution\", resolution.clone());\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { RootState } from \"@react-three/fiber\";\nimport { BlankMaterial, useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { useDoubleFBO, DoubleRenderTarget } from \"../../../utils/useDoubleFBO\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { useParams } from \"../../../utils/useParams\";\nimport type { HooksProps, HooksReturn } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { UseFboProps } from \"../../..\";\nimport { DEFAULT_TEXTURE } from \"../../../libs/constants\";\n\nexport type BlankParams = {\n   /** texture, default : `THREE.Texture()` */\n   texture?: THREE.Texture;\n   /** you can get into the rhythm ♪ , default : `false` */\n   beat?: number | false;\n};\n\nexport type BlankObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh<\n      THREE.BufferGeometry<THREE.NormalBufferAttributes>,\n      BlankMaterial\n   >;\n   material: BlankMaterial;\n   camera: THREE.Camera;\n   renderTarget: DoubleRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const BLANK_PARAMS: BlankParams = Object.freeze({\n   texture: DEFAULT_TEXTURE,\n   beat: false,\n});\n\n/**\n * By default, it is a blank canvas with nothing drawn on it. You can customise the shaders using `onBeforeCompile`.\n * Fragment shaders have `uTexture`,`uBackbuffer`,`uTime`,`uPointer` and `uResolution` as default uniforms.\n *\n * ※ `usf_FragColor` overrides `gl_FragColor`\n *\n * ※ `usf_Position` overrides `gl_Position`\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useBlank = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<BlankParams, BlankObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      dpr: _dpr.shader,\n      onBeforeInit,\n   });\n\n   const camera = useCamera(size);\n\n   const fboProps = useMemo(\n      () => ({\n         scene,\n         camera,\n         size,\n         dpr: _dpr.fbo,\n         isSizeUpdate,\n         ...renderTargetOptions,\n      }),\n      [scene, camera, size, _dpr.fbo, isSizeUpdate, renderTargetOptions]\n   ) as UseFboProps;\n\n   const [renderTarget, updateRenderTarget] = useDoubleFBO(fboProps);\n\n   const [params, setParams] = useParams<BlankParams>(BLANK_PARAMS);\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: BlankParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateCustomValue(customParams);\n      },\n      [setParams, updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: BlankParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl, clock, pointer } = rootState;\n\n         updateParams(newParams, customParams);\n\n         updateValue(\"uPointer\", pointer);\n         updateValue(\"uTexture\", params.texture!);\n         updateValue(\"uTime\", params.beat || clock.getElapsedTime());\n\n         return updateRenderTarget(gl, ({ read }) => {\n            updateValue(\"uBackbuffer\", read);\n         });\n      },\n      [updateRenderTarget, updateValue, params, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.read.texture,\n      },\n   ];\n};\n","precision highp float;\n\nvarying vec2 vUv;\n#usf <varyings>\n\n#usf <uniforms>\n\nvoid main() {\n\tvec4 usf_Position = vec4(position,1.);\n\tvUv = uv;\n\n\t#usf <main>\n\t\n\tgl_Position = usf_Position;\n}","precision highp float;\n\nvarying vec2 vUv;\n#usf <varyings>\n\nuniform vec2 uResolution;\n\n#usf <uniforms>\n\nvoid main() {\n\tvec4 usf_FragColor = vec4(1.);\n\n\t#usf <main>\n\t\n\tgl_FragColor = usf_FragColor;\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { MaterialProps, Size } from \"../../types\";\nimport { setUniform, useResolution } from \"../../..\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class RawBlankMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uResolution: { value: THREE.Vector2 };\n   };\n}\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n   onBeforeInit,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number | false;\n} & MaterialProps) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(() => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uResolution: { value: new THREE.Vector2() },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n      });\n      return mat;\n   }, [onBeforeInit]) as RawBlankMaterial;\n\n   const resolution = useResolution(size, dpr);\n   setUniform(material)(\"uResolution\", resolution.clone());\n\n   const mesh = useAddObject(scene, geometry, material, THREE.Mesh);\n\n   return { material, mesh };\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { RootState } from \"@react-three/fiber\";\nimport { RawBlankMaterial, useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../../utils/useCamera\";\nimport { CustomParams, setCustomUniform } from \"../../../utils/setUniforms\";\nimport type { HooksProps, HooksReturn } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { UseFboProps, useSingleFBO } from \"../../../utils/useSingleFBO\";\n\nexport type RawBlankParams = {};\n\nexport type RawBlankObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh<\n      THREE.BufferGeometry<THREE.NormalBufferAttributes>,\n      RawBlankMaterial\n   >;\n   material: RawBlankMaterial;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const RAWBLANK_PARAMS: RawBlankParams = Object.freeze({});\n\n/**\n * By default, it is a blank canvas with nothing drawn on it. You can customise the shaders using `onBeforeCompile`.\n * Fragment shaders have `uResolution` as default uniforms.\n *\n * ※ `usf_FragColor` overrides `gl_FragColor`\n *\n * ※ `usf_Position` overrides `gl_Position`\n * \n * `RawBlankParams` is an empty object. so you can't pass any parameters to second argument. Nothing will happen if you pass them.\n * ```tsx\n * useFrame((state) => {\n      update(\n         state,\n         {},\n         {\n            uTime: state.clock.getElapsedTime(),\n         }\n      );\n   });\n * ```\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usage\n */\nexport const useRawBlank = ({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   onBeforeInit,\n}: HooksProps): HooksReturn<RawBlankParams, RawBlankObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n\n   const { material, mesh } = useMesh({\n      scene,\n      size,\n      dpr: _dpr.shader,\n      onBeforeInit,\n   });\n\n   const camera = useCamera(size);\n\n   const fboProps = useMemo(\n      () => ({\n         scene,\n         camera,\n         size,\n         dpr: _dpr.fbo,\n         isSizeUpdate,\n         ...renderTargetOptions,\n      }),\n      [scene, camera, size, _dpr.fbo, isSizeUpdate, renderTargetOptions]\n   ) as UseFboProps;\n\n   const [renderTarget, updateRenderTarget] = useSingleFBO(fboProps);\n\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateParams = useCallback(\n      (newParams?: RawBlankParams, customParams?: CustomParams) => {\n         updateCustomValue(customParams);\n      },\n      [updateCustomValue]\n   );\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: RawBlankParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl } = rootState;\n         updateParams(newParams, customParams);\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateParams]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene: scene,\n         mesh: mesh,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport { useAddObject } from \"../../../../utils/useAddObject\";\n\ntype UseCreateObjectProps = {\n   scene: THREE.Scene | false;\n   geometry: THREE.BufferGeometry;\n   material: THREE.ShaderMaterial;\n};\n\nexport type MorphParticlePoints = THREE.Points<\n   THREE.BufferGeometry<THREE.NormalBufferAttributes>,\n   THREE.ShaderMaterial\n>;\nexport type InteractiveMesh = THREE.Mesh<\n   THREE.BufferGeometry<THREE.NormalBufferAttributes>,\n   THREE.ShaderMaterial\n>;\n\nexport const useCreateObject = ({\n   scene,\n   geometry,\n   material,\n}: UseCreateObjectProps) => {\n   const points = useAddObject(\n      scene,\n      geometry,\n      material,\n      THREE.Points\n   ) as MorphParticlePoints;\n\n   // Generate a mesh for pointer\n   const interactiveMesh = useAddObject(\n      scene,\n      useMemo(() => geometry.clone(), [geometry]),\n      useMemo(() => material.clone(), [material]),\n      THREE.Mesh\n   ) as InteractiveMesh;\n   interactiveMesh.visible = false;\n\n   return {\n      points,\n      interactiveMesh,\n   };\n};\n","uniform vec2 uResolution;\nuniform float uMorphProgress;\nuniform float uPointSize;\n\nuniform sampler2D uPicture;\nuniform bool uIsPicture;\nuniform sampler2D uAlphaPicture;\nuniform bool uIsAlphaPicture;\n\nuniform vec3 uColor0;\nuniform vec3 uColor1;\nuniform vec3 uColor2;\nuniform vec3 uColor3;\n\nuniform float uTime;\n\nuniform float uWobblePositionFrequency;\nuniform float uWobbleTimeFrequency;\nuniform float uWobbleStrength;\nuniform float uWarpPositionFrequency;\nuniform float uWarpTimeFrequency;\nuniform float uWarpStrength;\n\nuniform sampler2D uDisplacement;\nuniform bool uIsDisplacement;\nuniform float uDisplacementIntensity;\n\nuniform float uSizeRandomIntensity;\nuniform float uSizeRandomTimeFrequency;\nuniform float uSizeRandomMin;\nuniform float uSizeRandomMax;\n\nuniform float uMapArrayLength;\n\nuniform float uDivergence;\nuniform vec3 uDivergencePoint;\n\nvarying vec3 vColor;\nvarying float vPictureAlpha;\nvarying vec3 vDisplacementColor;\nvarying float vDisplacementIntensity;\nvarying float vMapArrayIndex;\n\n#usf <morphPositions>\n\n#usf <morphUvs>\n\n#usf <wobble3D>\n\nfloat random3D(vec3 co) {\n\treturn fract(sin(dot(co.xyz ,vec3(12.9898, 78.233, 45.764))) * 43758.5453);\n}\n\nvoid main() {\n\tvec3 newPosition = position;\n\tvec2 newUv = uv;\n\t\n\t#usf <morphPositionTransition>\n\t#usf <morphUvTransition>\n\n\t// displacement for `newPosition`\n\tvec3 displacement = uIsDisplacement ? texture2D(uDisplacement, newUv).rgb : vec3(0.0);\n\tfloat displacementIntensity = smoothstep(0., 1., displacement.g);\n\tvDisplacementColor = displacement;\n\tvDisplacementIntensity = displacementIntensity;\n\n\t// At this point displacement is 0 ~ 1, so normalize it to -1 ~ 1\n\tdisplacement = displacement * 2.-1.;\n\tdisplacement *= displacementIntensity * uDisplacementIntensity;\n\tnewPosition += displacement;\n\n\t// divergence\n\tvec3 divergenceDir = newPosition - uDivergencePoint;\n\tif (uDivergence > 0.0) {\n\t\tnewPosition += normalize(divergenceDir) * uDivergence;\n\t} else if (uDivergence < 0.0) {\n\t\tnewPosition -= normalize(divergenceDir) * abs(uDivergence);\n\t}\n\n\t// Final position\n\tvec4 modelPosition = modelMatrix * vec4(newPosition, 1.0);\n\tvec4 viewPosition = viewMatrix * modelPosition;\n\tvec4 projectedPosition = projectionMatrix * viewPosition;\n\n\t// wobble ※Do not calculate noise if uWobbleStrength is 0\n\tfloat wobble = uWobbleStrength > 0. ? getWobble(projectedPosition.xyz) : 0.0;\n\n\tgl_Position = projectedPosition += wobble;\n\t\n\t// If picture is true then display picture, otherwise 4 color linear interpolation\n\tvColor = uIsPicture ? texture2D(uPicture, newUv).rgb : mix(mix(uColor0, uColor1, newPosition.x), mix(uColor2, uColor3, newPosition.y), newPosition.z);\n\n\t// Set Alpha on picture's g channel\n\tvPictureAlpha = uIsAlphaPicture ? texture2D(uAlphaPicture, newUv).g : 1.;\n\n\t// Multiply the point size by picturAalpha. The size can also be adjusted with alphaMap.\n\t// If uSizeRandomTimeFrequency is greater than 0, the size will be randomly changed\n\tfloat sizeRand = uSizeRandomIntensity > 0. ? mix(uSizeRandomMin,uSizeRandomMax,(simplexNoise4d(vec4(newPosition,uTime * uSizeRandomTimeFrequency))*.5+.5)) * uSizeRandomIntensity : 1.;\n\tgl_PointSize = uPointSize * vPictureAlpha * uResolution.y * sizeRand;\n\tgl_PointSize *= (1.0 / - viewPosition.z);\n\n\t// mapArrayIndex\n\tvMapArrayIndex = uMapArrayLength > 0. ? floor(random3D(position) * uMapArrayLength) : 0.;\n}","precision highp float;\nprecision highp int;\n\nvarying vec3 vColor;\nvarying float vPictureAlpha;\nvarying vec3 vDisplacementColor;\nvarying float vDisplacementIntensity;\nvarying float vMapArrayIndex;\n\nuniform float uBlurAlpha;\nuniform float uBlurRadius;\nuniform sampler2D uMap;\nuniform bool uIsMap;\nuniform sampler2D uAlphaMap;\nuniform bool uIsAlphaMap;\nuniform float uDisplacementColorIntensity;\nuniform float uPointAlpha;\n\n#usf <mapArrayUniforms>\n\nvoid main() {    \n\tvec2 uv = gl_PointCoord;\n\tuv.y = 1.0 - uv.y;\n   \n\t// make it a circle\n\tfloat distanceToCenter = length(uv - .5);\n\tfloat alpha = clamp(uBlurRadius / distanceToCenter - (1.-uBlurAlpha) , 0. , 1.);\n\n\t// Map if there is a map\t\n\tvec4 mapArrayColor;\n\t#usf <mapArraySwitcher>\n\tvec4 mapColor = isMapArray ? mapArrayColor : uIsMap ? texture2D(uMap,uv) : vec4(1.);\n\tvec3 finalColor = isMapArray || uIsMap ? mapColor.rgb : vColor;\n\n\t// Mix with finalColor if displacement is true\n\tfloat mixIntensity = clamp(uDisplacementColorIntensity * vDisplacementIntensity,0.,1.);\n\tfinalColor = vDisplacementIntensity > 0. ? mix(finalColor,vDisplacementColor,mixIntensity) : finalColor;\n\n\t// get alpha map\n\tfloat alphaMap = uIsAlphaMap ? texture2D(uAlphaMap,uv).g : 1.;\n\n\tgl_FragColor = vec4(finalColor,alpha * vPictureAlpha * alphaMap * mapColor.a * uPointAlpha);\n}\n","import * as THREE from \"three\";\nimport { ISDEV } from \"../../../../libs/constants\";\n\nexport const rewriteVertexShader = (\n   modifeidAttributes: Float32Array[],\n   targetGeometry: THREE.BufferGeometry,\n   targetAttibute: \"position\" | \"uv\",\n   vertexShader: string,\n   itemSize: number\n) => {\n   const vTargetName =\n      targetAttibute === \"position\" ? \"positionTarget\" : \"uvTarget\";\n   const vAttributeRewriteKey =\n      targetAttibute === \"position\"\n         ? \"#usf <morphPositions>\"\n         : \"#usf <morphUvs>\";\n   const vTransitionRewriteKey =\n      targetAttibute === \"position\"\n         ? \"#usf <morphPositionTransition>\"\n         : \"#usf <morphUvTransition>\";\n   const vListName =\n      targetAttibute === \"position\" ? \"positionsList\" : \"uvsList\";\n   const vMorphTransition =\n      targetAttibute === \"position\"\n         ? `\n\t\t\t\tfloat scaledProgress = uMorphProgress * ${modifeidAttributes.length - 1}.;\n\t\t\t\tint baseIndex = int(floor(scaledProgress));\t\t\n\t\t\t\tbaseIndex = clamp(baseIndex, 0, ${modifeidAttributes.length - 1});\t\t\n\t\t\t\tfloat progress = fract(scaledProgress);\n\t\t\t\tint nextIndex = baseIndex + 1;\n\t\t\t\tnewPosition = mix(positionsList[baseIndex], positionsList[nextIndex], progress);\n\t\t\t`\n         : \"newUv = mix(uvsList[baseIndex], uvsList[nextIndex], progress);\";\n\n   if (modifeidAttributes.length > 0) {\n      // Delete the position at initialization and add the position after normalization\n      targetGeometry.deleteAttribute(targetAttibute);\n      targetGeometry.setAttribute(\n         targetAttibute,\n         new THREE.BufferAttribute(modifeidAttributes[0], itemSize)\n      );\n\n      let stringToAddToMorphAttibutes = \"\";\n      let stringToAddToMorphAttibutesList = \"\";\n\n      modifeidAttributes.forEach((target, index) => {\n         targetGeometry.setAttribute(\n            `${vTargetName}${index}`,\n            new THREE.BufferAttribute(target, itemSize)\n         );\n         stringToAddToMorphAttibutes += `attribute vec${itemSize} ${vTargetName}${index};\\n`;\n         if (index === 0) {\n            stringToAddToMorphAttibutesList += `${vTargetName}${index}`;\n         } else {\n            stringToAddToMorphAttibutesList += `,${vTargetName}${index}`;\n         }\n      });\n\n      vertexShader = vertexShader.replace(\n         `${vAttributeRewriteKey}`,\n         stringToAddToMorphAttibutes\n      );\n      vertexShader = vertexShader.replace(\n         `${vTransitionRewriteKey}`,\n         `vec${itemSize} ${vListName}[${modifeidAttributes.length}] = vec${itemSize}[](${stringToAddToMorphAttibutesList});\n\t\t\t\t${vMorphTransition}\n\t\t\t`\n      );\n   } else {\n      vertexShader = vertexShader.replace(`${vAttributeRewriteKey}`, \"\");\n      vertexShader = vertexShader.replace(`${vTransitionRewriteKey}`, \"\");\n      if (!targetGeometry?.attributes[targetAttibute]?.array) {\n         ISDEV &&\n            console.error(\n               `use-shader-fx:geometry.attributes.${targetAttibute}.array is not found`\n            );\n      }\n   }\n\n   return vertexShader;\n};\n","import * as THREE from \"three\";\n\n/**\n * Calculate the maximum length of attribute (position and uv) to match the length of all lists. Randomly map missing attributes when matching to maximum length\n * */\nexport const modifyAttributes = (\n   attribute: Float32Array[] | undefined,\n   targetGeometry: THREE.BufferGeometry,\n   targetAttibute: \"position\" | \"uv\",\n   itemSize: number\n) => {\n   let modifiedAttribute: Float32Array[] = [];\n   if (attribute && attribute.length > 0) {\n      if (targetGeometry?.attributes[targetAttibute]?.array) {\n         modifiedAttribute = [\n            targetGeometry.attributes[targetAttibute].array as Float32Array,\n            ...attribute,\n         ];\n      } else {\n         modifiedAttribute = attribute;\n      }\n\n      const maxLength = Math.max(...modifiedAttribute.map((arr) => arr.length));\n\n      modifiedAttribute.forEach((arr, i) => {\n         if (arr.length < maxLength) {\n            const diff = (maxLength - arr.length) / itemSize;\n            const addArray = [];\n            const oldArray = Array.from(arr);\n            for (let i = 0; i < diff; i++) {\n               const randomIndex =\n                  Math.floor((arr.length / itemSize) * Math.random()) *\n                  itemSize;\n               for (let j = 0; j < itemSize; j++) {\n                  addArray.push(oldArray[randomIndex + j]);\n               }\n            }\n            modifiedAttribute[i] = new Float32Array([...oldArray, ...addArray]);\n         }\n      });\n   }\n   return modifiedAttribute;\n};\n","import * as THREE from \"three\";\n\nexport const rewriteFragmentShader = (\n   mapArray: THREE.Texture[] | undefined,\n   fragmentShader: string\n) => {\n   let mapArrayShader = \"\";\n   const mapArrayUniforms: any = {};\n   let textureSwitcherCode = \"mapArrayColor = \";\n\n   if (mapArray && mapArray.length > 0) {\n      mapArray.forEach((map, index) => {\n         const condition = `vMapArrayIndex < ${index}.1`; // Comparison with a number with .1 added as the handling of floating points may vary between GPU drivers\n         const action = `texture2D(uMapArray${index}, uv)`;\n         textureSwitcherCode += `( ${condition} ) ? ${action} : `;\n         mapArrayShader += `\n        uniform sampler2D uMapArray${index};\n      `;\n         mapArrayUniforms[`uMapArray${index}`] = { value: map };\n      });\n      textureSwitcherCode += \"vec4(1.);\";\n      mapArrayShader += `bool isMapArray = true;`;\n      mapArrayUniforms[\"uMapArrayLength\"] = { value: mapArray.length };\n   } else {\n      textureSwitcherCode += \"vec4(1.0);\";\n      mapArrayShader += `bool isMapArray = false;`;\n      mapArrayUniforms[\"uMapArrayLength\"] = { value: 0 };\n   }\n   const rewritedFragmentShader = fragmentShader\n      .replace(`#usf <mapArraySwitcher>`, textureSwitcherCode)\n      .replace(`#usf <mapArrayUniforms>`, mapArrayShader);\n\n   return { rewritedFragmentShader, mapArrayUniforms };\n};\n","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport { useResolution } from \"../../../../utils/useResolution\";\nimport { setUniform } from \"../../../../utils/setUniforms\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/main.frag\";\nimport { MORPHPARTICLES_PARAMS } from \"..\";\nimport {\n   DEFAULT_TEXTURE,\n   ISDEV,\n   MATERIAL_BASIC_PARAMS,\n} from \"../../../../libs/constants\";\nimport { rewriteVertexShader } from \"./rewriteVertexShader\";\nimport { modifyAttributes } from \"./modifyAttributes\";\nimport { rewriteFragmentShader } from \"./rewriteFragmentShader\";\nimport { MaterialProps, Size } from \"../../../types\";\nimport { createMaterialParameters } from \"../../../../utils/createMaterialParameters\";\n\nexport class MorphParticlesMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uResolution: { value: THREE.Vector2 };\n      uMorphProgress: { value: number };\n      uBlurAlpha: { value: number };\n      uBlurRadius: { value: number };\n      uPointSize: { value: number };\n      uPointAlpha: { value: number };\n      uPicture: { value: THREE.Texture };\n      uIsPicture: { value: boolean };\n      uAlphaPicture: { value: THREE.Texture };\n      uIsAlphaPicture: { value: boolean };\n      uColor0: { value: THREE.Color };\n      uColor1: { value: THREE.Color };\n      uColor2: { value: THREE.Color };\n      uColor3: { value: THREE.Color };\n      uMap: { value: THREE.Texture };\n      uIsMap: { value: boolean };\n      uAlphaMap: { value: THREE.Texture };\n      uIsAlphaMap: { value: boolean };\n      uTime: { value: number };\n      uWobblePositionFrequency: { value: number };\n      uWobbleTimeFrequency: { value: number };\n      uWobbleStrength: { value: number };\n      uWarpPositionFrequency: { value: number };\n      uWarpTimeFrequency: { value: number };\n      uWarpStrength: { value: number };\n      uDisplacement: { value: THREE.Texture };\n      uIsDisplacement: { value: boolean };\n      uDisplacementIntensity: { value: number };\n      uDisplacementColorIntensity: { value: number };\n      uSizeRandomIntensity: { value: number };\n      uSizeRandomTimeFrequency: { value: number };\n      uSizeRandomMin: { value: number };\n      uSizeRandomMax: { value: number };\n      uDivergence: { value: number };\n      uDivergencePoint: { value: THREE.Vector3 };\n   };\n}\n\nexport const useMaterial = ({\n   size,\n   dpr,\n   geometry,\n   positions,\n   uvs,\n   mapArray,\n   onBeforeInit,\n}: {\n   size: Size;\n   dpr: number | false;\n   geometry: THREE.BufferGeometry;\n   positions?: Float32Array[];\n   uvs?: Float32Array[];\n   mapArray?: THREE.Texture[];\n} & MaterialProps) => {\n   const modifiedPositions = useMemo(\n      () => modifyAttributes(positions, geometry, \"position\", 3),\n      [positions, geometry]\n   );\n\n   const modifiedUvs = useMemo(\n      () => modifyAttributes(uvs, geometry, \"uv\", 2),\n      [uvs, geometry]\n   );\n\n   const material = useMemo(() => {\n      if (modifiedPositions.length !== modifiedUvs.length) {\n         ISDEV &&\n            console.log(\"use-shader-fx:positions and uvs are not matched\");\n      }\n\n      // vertex\n      const rewritedVertexShader = rewriteVertexShader(\n         modifiedUvs,\n         geometry,\n         \"uv\",\n         rewriteVertexShader(\n            modifiedPositions,\n            geometry,\n            \"position\",\n            vertexShader,\n            3\n         ),\n         2\n      );\n\n      // fragment\n      const { rewritedFragmentShader, mapArrayUniforms } =\n         rewriteFragmentShader(mapArray, fragmentShader);\n\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  uResolution: { value: new THREE.Vector2(0, 0) },\n                  uMorphProgress: {\n                     value: MORPHPARTICLES_PARAMS.morphProgress,\n                  },\n                  uBlurAlpha: { value: MORPHPARTICLES_PARAMS.blurAlpha },\n                  uBlurRadius: { value: MORPHPARTICLES_PARAMS.blurRadius },\n                  uPointSize: { value: MORPHPARTICLES_PARAMS.pointSize },\n                  uPointAlpha: { value: MORPHPARTICLES_PARAMS.pointAlpha },\n                  uPicture: { value: DEFAULT_TEXTURE },\n                  uIsPicture: { value: false },\n                  uAlphaPicture: { value: DEFAULT_TEXTURE },\n                  uIsAlphaPicture: { value: false },\n                  uColor0: { value: MORPHPARTICLES_PARAMS.color0 },\n                  uColor1: { value: MORPHPARTICLES_PARAMS.color1 },\n                  uColor2: { value: MORPHPARTICLES_PARAMS.color2 },\n                  uColor3: { value: MORPHPARTICLES_PARAMS.color3 },\n                  uMap: { value: DEFAULT_TEXTURE },\n                  uIsMap: { value: false },\n                  uAlphaMap: { value: DEFAULT_TEXTURE },\n                  uIsAlphaMap: { value: false },\n                  uTime: { value: 0 },\n                  uWobblePositionFrequency: {\n                     value: MORPHPARTICLES_PARAMS.wobblePositionFrequency,\n                  },\n                  uWobbleTimeFrequency: {\n                     value: MORPHPARTICLES_PARAMS.wobbleTimeFrequency,\n                  },\n                  uWobbleStrength: {\n                     value: MORPHPARTICLES_PARAMS.wobbleStrength,\n                  },\n                  uWarpPositionFrequency: {\n                     value: MORPHPARTICLES_PARAMS.warpPositionFrequency,\n                  },\n                  uWarpTimeFrequency: {\n                     value: MORPHPARTICLES_PARAMS.warpTimeFrequency,\n                  },\n                  uWarpStrength: { value: MORPHPARTICLES_PARAMS.warpStrength },\n                  uDisplacement: { value: DEFAULT_TEXTURE },\n                  uIsDisplacement: { value: false },\n                  uDisplacementIntensity: {\n                     value: MORPHPARTICLES_PARAMS.displacementIntensity,\n                  },\n                  uDisplacementColorIntensity: {\n                     value: MORPHPARTICLES_PARAMS.displacementColorIntensity,\n                  },\n                  uSizeRandomIntensity: {\n                     value: MORPHPARTICLES_PARAMS.sizeRandomIntensity,\n                  },\n                  uSizeRandomTimeFrequency: {\n                     value: MORPHPARTICLES_PARAMS.sizeRandomTimeFrequency,\n                  },\n                  uSizeRandomMin: {\n                     value: MORPHPARTICLES_PARAMS.sizeRandomMin,\n                  },\n                  uSizeRandomMax: {\n                     value: MORPHPARTICLES_PARAMS.sizeRandomMax,\n                  },\n                  uDivergence: { value: MORPHPARTICLES_PARAMS.divergence },\n                  uDivergencePoint: {\n                     value: MORPHPARTICLES_PARAMS.divergencePoint,\n                  },\n                  ...mapArrayUniforms,\n               },\n               vertexShader: rewritedVertexShader,\n               fragmentShader: rewritedFragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n         blending: THREE.AdditiveBlending,\n         // Must be transparent\n         transparent: true,\n      });\n\n      return mat;\n   }, [\n      geometry,\n      modifiedPositions,\n      modifiedUvs,\n      mapArray,\n      onBeforeInit,\n   ]) as MorphParticlesMaterial;\n\n   const resolution = useResolution(size, dpr);\n   setUniform(material)(\"uResolution\", resolution.clone());\n\n   return { material, modifiedPositions, modifiedUvs };\n};\n","import * as THREE from \"three\";\nimport { RootState } from \"@react-three/fiber\";\nimport {\n   InteractiveMesh,\n   MorphParticlePoints,\n   useCreateObject,\n} from \"./utils/useCreateObject\";\nimport { useMaterial } from \"./utils/useMaterial\";\nimport { MorphParticlesParams } from \".\";\nimport {\n   setUniform,\n   CustomParams,\n   setCustomUniform,\n} from \"../../../utils/setUniforms\";\nimport { useCallback, useMemo } from \"react\";\nimport { Create3DHooksProps } from \"../types\";\nimport { Dpr, Size } from \"../../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\n\nexport type UseCreateMorphParticlesProps = {\n   size: Size;\n   dpr: Dpr;\n   /** default : `THREE.SphereGeometry(1, 32, 32)` */\n   geometry?: THREE.BufferGeometry;\n   positions?: Float32Array[];\n   uvs?: Float32Array[];\n   /** Array of textures to map to points. Mapped at random. */\n   mapArray?: THREE.Texture[];\n};\n\ntype UpdateUniform = (\n   rootState: RootState | null,\n   newParams?: MorphParticlesParams,\n   customParams?: CustomParams\n) => void;\n\ntype UseCreateMorphParticlesReturn = [\n   UpdateUniform,\n   {\n      points: MorphParticlePoints;\n      interactiveMesh: InteractiveMesh;\n      positions: Float32Array[];\n      uvs: Float32Array[];\n   }\n];\n\nexport const useCreateMorphParticles = ({\n   size,\n   dpr,\n   scene = false,\n   geometry,\n   positions,\n   uvs,\n   mapArray,\n   onBeforeInit,\n}: Create3DHooksProps &\n   UseCreateMorphParticlesProps): UseCreateMorphParticlesReturn => {\n   const _dpr = getDpr(dpr);\n\n   const morphGeometry = useMemo(() => {\n      const geo = geometry || new THREE.SphereGeometry(1, 32, 32);\n      geo.setIndex(null);\n      // Since it is a particle, normal is not necessary\n      geo.deleteAttribute(\"normal\");\n      return geo;\n   }, [geometry]);\n\n   const { material, modifiedPositions, modifiedUvs } = useMaterial({\n      size,\n      dpr: _dpr.shader,\n      geometry: morphGeometry,\n      positions,\n      uvs,\n      mapArray,\n      onBeforeInit,\n   });\n\n   const { points, interactiveMesh } = useCreateObject({\n      scene,\n      geometry: morphGeometry,\n      material,\n   });\n\n   const updateValue = setUniform(material);\n   const updateCustomValue = setCustomUniform(material);\n\n   const updateUniform = useCallback<UpdateUniform>(\n      (rootState, newParams, customParams) => {\n         if (rootState) {\n            updateValue(\n               \"uTime\",\n               newParams?.beat || rootState.clock.getElapsedTime()\n            );\n         }\n         if (newParams === undefined) {\n            return;\n         }\n         updateValue(\"uMorphProgress\", newParams.morphProgress);\n         updateValue(\"uBlurAlpha\", newParams.blurAlpha);\n         updateValue(\"uBlurRadius\", newParams.blurRadius);\n         updateValue(\"uPointSize\", newParams.pointSize);\n         updateValue(\"uPointAlpha\", newParams.pointAlpha);\n         if (newParams.picture) {\n            updateValue(\"uPicture\", newParams.picture);\n            updateValue(\"uIsPicture\", true);\n         } else if (newParams.picture === false) {\n            updateValue(\"uIsPicture\", false);\n         }\n         if (newParams.alphaPicture) {\n            updateValue(\"uAlphaPicture\", newParams.alphaPicture);\n            updateValue(\"uIsAlphaPicture\", true);\n         } else if (newParams.alphaPicture === false) {\n            updateValue(\"uIsAlphaPicture\", false);\n         }\n         updateValue(\"uColor0\", newParams.color0);\n         updateValue(\"uColor1\", newParams.color1);\n         updateValue(\"uColor2\", newParams.color2);\n         updateValue(\"uColor3\", newParams.color3);\n         if (newParams.map) {\n            updateValue(\"uMap\", newParams.map);\n            updateValue(\"uIsMap\", true);\n         } else if (newParams.map === false) {\n            updateValue(\"uIsMap\", false);\n         }\n         if (newParams.alphaMap) {\n            updateValue(\"uAlphaMap\", newParams.alphaMap);\n            updateValue(\"uIsAlphaMap\", true);\n         } else if (newParams.alphaMap === false) {\n            updateValue(\"uIsAlphaMap\", false);\n         }\n         updateValue(\"uWobbleStrength\", newParams.wobbleStrength);\n         updateValue(\n            \"uWobblePositionFrequency\",\n            newParams.wobblePositionFrequency\n         );\n         updateValue(\"uWobbleTimeFrequency\", newParams.wobbleTimeFrequency);\n         updateValue(\"uWarpStrength\", newParams.warpStrength);\n         updateValue(\"uWarpPositionFrequency\", newParams.warpPositionFrequency);\n         updateValue(\"uWarpTimeFrequency\", newParams.warpTimeFrequency);\n         if (newParams.displacement) {\n            updateValue(\"uDisplacement\", newParams.displacement);\n            updateValue(\"uIsDisplacement\", true);\n         } else if (newParams.displacement === false) {\n            updateValue(\"uIsDisplacement\", false);\n         }\n         updateValue(\"uDisplacementIntensity\", newParams.displacementIntensity);\n         updateValue(\n            \"uDisplacementColorIntensity\",\n            newParams.displacementColorIntensity\n         );\n         updateValue(\"uSizeRandomIntensity\", newParams.sizeRandomIntensity);\n         updateValue(\n            \"uSizeRandomTimeFrequency\",\n            newParams.sizeRandomTimeFrequency\n         );\n         updateValue(\"uSizeRandomMin\", newParams.sizeRandomMin);\n         updateValue(\"uSizeRandomMax\", newParams.sizeRandomMax);\n         updateValue(\"uDivergence\", newParams.divergence);\n         updateValue(\"uDivergencePoint\", newParams.divergencePoint);\n\n         updateCustomValue(customParams);\n      },\n      [updateValue, updateCustomValue]\n   );\n\n   return [\n      updateUniform,\n      {\n         points,\n         interactiveMesh,\n         positions: modifiedPositions,\n         uvs: modifiedUvs,\n      },\n   ];\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo } from \"react\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport { HooksReturn } from \"../../types\";\nimport {\n   useCreateMorphParticles,\n   UseCreateMorphParticlesProps,\n} from \"./useCreateMorphParticles\";\nimport { HooksProps3D } from \"../types\";\nimport { InteractiveMesh, MorphParticlePoints } from \"./utils/useCreateObject\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { CustomParams } from \"../../../utils/setUniforms\";\n\nexport type MorphParticlesParams = {\n   /** progress value to morph vertices,0~1 */\n   morphProgress?: number;\n   blurAlpha?: number;\n   blurRadius?: number;\n   pointSize?: number;\n   /** default : `1` */\n   pointAlpha?: number;\n   /** Since the color is extracted based on the attribute `uv`, the intended behavior will not occur if there is no uv in the attribute. */\n   picture?: THREE.Texture | false;\n   /** The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). use the green channel when sampling this texture. It also affects the size of the point. default : `false` */\n   alphaPicture?: THREE.Texture | false;\n   color0?: THREE.Color;\n   color1?: THREE.Color;\n   color2?: THREE.Color;\n   color3?: THREE.Color;\n   /** This maps to point,texture */\n   map?: THREE.Texture | false;\n   /** The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). use the green channel when sampling this texture. default : `false` */\n   alphaMap?: THREE.Texture | false;\n   /** If ​​wobbleStrength is set to 0, wobble will stop. It will also affect noise calculation, default : `0` */\n   wobbleStrength?: number;\n   wobblePositionFrequency?: number;\n   wobbleTimeFrequency?: number;\n   /** default : `0` */\n   warpStrength?: number;\n   warpPositionFrequency?: number;\n   warpTimeFrequency?: number;\n   /** Manipulate the vertices using the color channels of this texture. The strength of the displacement changes depending on the g channel of this texture */\n   displacement?: THREE.Texture | false;\n   /** Strength of displacement. The strength of displacement depends on g ch, but is the value multiplied by it , default : `1` */\n   displacementIntensity?: number;\n   /** Strength to reflect color ch of displacement texture */\n   displacementColorIntensity?: number;\n   /** If set to 0, noise calculation stops, default : `0` */\n   sizeRandomIntensity?: number;\n   sizeRandomTimeFrequency?: number;\n   sizeRandomMin?: number;\n   sizeRandomMax?: number;\n   /** Divergence rate of a point. Negative cases are dense, positive cases are divergent, default : `0` */\n   divergence?: number;\n   /** Divergence centre point, default : `THREE.Vector3(0)` */\n   divergencePoint?: THREE.Vector3;\n   /** you can get into the rhythm ♪ , default : `false` */\n   beat?: number | false;\n};\n\nexport type MorphParticlesObject = {\n   scene: THREE.Scene;\n   points: MorphParticlePoints;\n   interactiveMesh: InteractiveMesh;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n   positions: Float32Array[];\n   uvs: Float32Array[];\n};\n\nexport const MORPHPARTICLES_PARAMS: MorphParticlesParams = Object.freeze({\n   morphProgress: 0,\n   blurAlpha: 0.9,\n   blurRadius: 0.05,\n   pointSize: 0.05,\n   pointAlpha: 1,\n   picture: false,\n   alphaPicture: false,\n   color0: new THREE.Color(0xff0000),\n   color1: new THREE.Color(0x00ff00),\n   color2: new THREE.Color(0x0000ff),\n   color3: new THREE.Color(0xffff00),\n   map: false,\n   alphaMap: false,\n   wobbleStrength: 0.0,\n   wobblePositionFrequency: 0.5,\n   wobbleTimeFrequency: 0.5,\n   warpStrength: 0.0,\n   warpPositionFrequency: 0.5,\n   warpTimeFrequency: 0.5,\n   displacement: false,\n   displacementIntensity: 1,\n   displacementColorIntensity: 0,\n   sizeRandomIntensity: 0,\n   sizeRandomTimeFrequency: 0.2,\n   sizeRandomMin: 0.5,\n   sizeRandomMax: 1.5,\n   divergence: 0,\n   divergencePoint: new THREE.Vector3(0),\n   beat: false,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx\n */\nexport const useMorphParticles = ({\n   size,\n   dpr,\n   isSizeUpdate,\n   renderTargetOptions,\n   camera,\n   geometry,\n   positions,\n   uvs,\n   onBeforeInit,\n}: HooksProps3D & UseCreateMorphParticlesProps): HooksReturn<\n   MorphParticlesParams,\n   MorphParticlesObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n\n   const [\n      updateUniform,\n      {\n         points,\n         interactiveMesh,\n         positions: generatedPositions,\n         uvs: generatedUvs,\n      },\n   ] = useCreateMorphParticles({\n      scene,\n      size,\n      dpr,\n      geometry,\n      positions,\n      uvs,\n      onBeforeInit,\n   });\n\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      depthBuffer: true,\n      ...renderTargetOptions,\n   });\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: MorphParticlesParams,\n         customParams?: CustomParams\n      ) => {\n         updateUniform(rootState, newParams, customParams);\n         return updateRenderTarget(rootState.gl);\n      },\n      [updateRenderTarget, updateUniform]\n   );\n\n   const updateParams = useCallback(\n      (newParams?: MorphParticlesParams, customParams?: CustomParams) => {\n         updateUniform(null, newParams, customParams);\n      },\n      [updateUniform]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene,\n         points,\n         interactiveMesh,\n         renderTarget,\n         output: renderTarget.texture,\n         positions: generatedPositions,\n         uvs: generatedUvs,\n      },\n   ];\n};\n","import * as THREE from \"three\";\n\nexport const rewriteVertexShader = (\n   parameters: THREE.WebGLProgramParametersWithUniforms\n) => {\n   const isDepth = parameters.shaderType === \"MeshDepthMaterial\";\n\n   parameters.vertexShader = parameters.vertexShader.replace(\n      \"#include <beginnormal_vertex>\",\n      `\n\t\t\tvec3 objectNormal = usf_Normal;\n\t\t\t#ifdef USE_TANGENT\n\t\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t\t\t#endif\n\t\t`\n   );\n\n   parameters.vertexShader = parameters.vertexShader.replace(\n      \"#include <begin_vertex>\",\n      `\n\t\t\tvec3 transformed = usf_Position;\n\t\t\t#ifdef USE_ALPHAHASH\n\t\t\tvPosition = vec3( position );\n\t\t\t#endif\n\t\t`\n   );\n\n   parameters.vertexShader = parameters.vertexShader.replace(\n      \"void main() {\",\n      `\n\t\tuniform float uTime;\n\t\tuniform float uWobblePositionFrequency;\n\t\tuniform float uWobbleTimeFrequency;\n\t\tuniform float uWobbleStrength;\n\t\tuniform float uWarpPositionFrequency;\n\t\tuniform float uWarpTimeFrequency;\n\t\tuniform float uWarpStrength;\n\n\t\t${isDepth ? \"attribute vec4 tangent;\" : \"\"}\n\t\t\n\t\tvarying float vWobble;\n\t\tvarying vec2 vPosition;\n\t\t\n\t\t// edge\n\t\tvarying vec3 vEdgeNormal;\n\t\tvarying vec3 vEdgeViewPosition;\n\n\t\t#usf <wobble3D>\n\n\t\tvoid main() {\n\t\t\n\t\t\tvec3 usf_Position = position;\n\t\t\tvec3 usf_Normal = normal;\n\t\t\tvec3 biTangent = cross(normal, tangent.xyz);\n\t\t\t\n\t\t\t// Neighbours positions\n\t\t\tfloat shift = 0.01;\n\t\t\tvec3 positionA = usf_Position + tangent.xyz * shift;\n\t\t\tvec3 positionB = usf_Position + biTangent * shift;\n\t\t\t\n\t\t\t// wobble\n\t\t\tfloat wobble = (uWobbleStrength > 0.) ? getWobble(usf_Position) : 0.0;\n\t\t\tfloat wobblePositionA = (uWobbleStrength > 0.) ? getWobble(positionA) : 0.0;\n\t\t\tfloat wobblePositionB = (uWobbleStrength > 0.) ? getWobble(positionB) : 0.0;\n\t\t\t\n\t\t\tusf_Position += wobble * normal;\n\t\t\tpositionA += wobblePositionA * normal;\n\t\t\tpositionB += wobblePositionB * normal;\n\n\t\t\t// Compute normal\n\t\t\tvec3 toA = normalize(positionA - usf_Position);\n\t\t\tvec3 toB = normalize(positionB - usf_Position);\n\t\t\tusf_Normal = cross(toA, toB);\n\t\t\t\n\t\t\t// Varying\n\t\t\tvPosition = usf_Position.xy;\n\t\t\tvWobble = wobble/uWobbleStrength;\n\t\t\t\n\t\t\tvEdgeNormal = normalize(normalMatrix * usf_Normal);\n\t\t\tvec4 viewPosition = viewMatrix * modelMatrix * vec4(usf_Position, 1.0);\n\t\t\tvEdgeViewPosition = normalize(viewPosition.xyz);\n\t\t`\n   );\n};\n","import * as THREE from \"three\";\n\nexport const rewriteFragmentShader = (\n   parameters: THREE.WebGLProgramParametersWithUniforms\n) => {\n   // diffuse color , Manipulate color mixing ratio with `uColorMix`\n   parameters.fragmentShader = parameters.fragmentShader.replace(\n      \"#include <color_fragment>\",\n      `\n\t\t\t#include <color_fragment>\n\n\t\t\tif (uEdgeThreshold > 0.0) {\n\t\t\t\tfloat edgeThreshold = dot(vEdgeNormal, -vEdgeViewPosition);\n\t\t\t\tdiffuseColor = edgeThreshold < uEdgeThreshold ? vec4(uEdgeColor, 1.0) : mix(diffuseColor, usf_DiffuseColor, uColorMix);\n\t\t\t} else {\n\t\t\t\tdiffuseColor = mix(diffuseColor, usf_DiffuseColor, uColorMix);\n\t\t\t}\n\t\t`\n   );\n\n   parameters.fragmentShader = parameters.fragmentShader.replace(\n      \"void main() {\",\n      `\n\t\t\tuniform vec3 uColor0;\n\t\t\tuniform vec3 uColor1;\n\t\t\tuniform vec3 uColor2;\n\t\t\tuniform vec3 uColor3;\n\t\t\tuniform float uColorMix;\n\t\t\tuniform float uEdgeThreshold;\n\t\t\tuniform vec3 uEdgeColor;\n\t\t\t\n\t\t\t// transmission\n\t\t\tuniform float uChromaticAberration;         \n\t\t\tuniform float uAnisotropicBlur;      \n\t\t\tuniform float uTime;\n\t\t\tuniform float uDistortion;\n\t\t\tuniform float uDistortionScale;\n\t\t\tuniform float uTemporalDistortion;\n\t\t\tuniform float uRefractionSamples;\n\t\t\t\n\t\t\tfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\t\t\t\n\t\t\t#usf <snoise>\n\n\t\t\tvarying float vWobble;\n\t\t\tvarying vec2 vPosition;\n\t\t\tvarying vec3 vEdgeNormal;\n\t\t\tvarying vec3 vEdgeViewPosition;\n\t\t\t\n\t\t\tvoid main(){\n\t\t\t\t\n\t\t\t\tvec4 usf_DiffuseColor = vec4(1.0);\n\t\t\t\tfloat colorWobbleMix = smoothstep(-1.,1.,vWobble);\n\t\t\t\tvec2 colorPosMix = vec2(smoothstep(-1.,1.,vPosition.x),smoothstep(-1.,1.,vPosition.y));\n\t\t\t\n\t\t\t\tusf_DiffuseColor.rgb = mix(mix(uColor0, uColor1, colorPosMix.x), mix(uColor2, uColor3, colorPosMix.y), colorWobbleMix);\n\t\t`\n   );\n};\n","#ifdef USE_TRANSMISSION\n\n\t// Transmission code is based on glTF-Sampler-Viewer\n\t// https://github.com/KhronosGroup/glTF-Sample-Viewer\n\n\tuniform float _transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\n\t#ifdef USE_TRANSMISSIONMAP\n\n\t\tuniform sampler2D transmissionMap;\n\n\t#endif\n\n\t#ifdef USE_THICKNESSMAP\n\n\t\tuniform sampler2D thicknessMap;\n\n\t#endif\n\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\n\tvarying vec3 vWorldPosition;\n\n\t// Mipped Bicubic Texture Filtering by N8\n\t// https://www.shadertoy.com/view/Dl2SDW\n\n\tfloat w0( float a ) {\n\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\n\t}\n\n\tfloat w1( float a ) {\n\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\n\t}\n\n\tfloat w2( float a ){\n\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\n\t}\n\n\tfloat w3( float a ) {\n\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\n\t}\n\n\t// g0 and g1 are the two amplitude functions\n\tfloat g0( float a ) {\n\n\t\treturn w0( a ) + w1( a );\n\n\t}\n\n\tfloat g1( float a ) {\n\n\t\treturn w2( a ) + w3( a );\n\n\t}\n\n\t// h0 and h1 are the two offset functions\n\tfloat h0( float a ) {\n\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\n\t}\n\n\tfloat h1( float a ) {\n\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\n\t}\n\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\n\t\tuv = uv * texelSize.zw + 0.5;\n\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\n\t}\n\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\n\t}\n\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\n\t\t// Direction of refracted light.\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\n\t\t// Compute rotation-independant scaling of the model matrix.\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\n\t\t// The thickness is specified in local space.\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\n\t}\n\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\n\t\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\n\t}\n\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\n\t}\n\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\n\t\tif ( isinf( attenuationDistance ) ) {\n\n\t\t\t// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\n\t\t\treturn vec3( 1.0 );\n\n\t\t} else {\n\n\t\t\t// Compute light attenuation using Beer's law.\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\n\t\t\treturn transmittance;\n\n\t\t}\n\n\t}\n\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\n\t\t// Get the specular component.\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\n\t\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job \n\t\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\n\t}\n#endif","#ifdef USE_TRANSMISSION\n\nmaterial.transmission = _transmission;\nmaterial.transmissionAlpha = 1.0;\nmaterial.thickness = thickness;\nmaterial.attenuationDistance = attenuationDistance;\nmaterial.attenuationColor = attenuationColor;\n\n#ifdef USE_TRANSMISSIONMAP\n\n\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\n#endif\n\n#ifdef USE_THICKNESSMAP\n\n\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\n#endif\n\nvec3 pos = vWorldPosition;\n\nvec3 v = normalize( cameraPosition - pos );\nvec3 n = inverseTransformDirection( normal, viewMatrix );\n\nvec4 transmitted = getIBLVolumeRefraction(\n\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\tmaterial.attenuationColor, material.attenuationDistance );\n\nmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\n// Custom from here\nfloat runningSeed = 0.0;\nvec3 transmission = vec3(0.0);\nfloat transmissionR, transmissionB, transmissionG;\nfloat randomCoords = rand(runningSeed++);\nfloat thickness_smear = thickness * max(pow(roughnessFactor, 0.33), uAnisotropicBlur);\nvec3 distortionNormal = vec3(0.0);\nvec3 temporalOffset = vec3(uTime, -uTime, -uTime) * uTemporalDistortion;\n\nif (uDistortion > 0.0) {\n\tdistortionNormal = uDistortion * vec3(snoiseFractal(vec3((pos * uDistortionScale + temporalOffset))), snoiseFractal(vec3(pos.zxy * uDistortionScale - temporalOffset)), snoiseFractal(vec3(pos.yxz * uDistortionScale + temporalOffset)));\n}\n\nfor (float i = 0.0; i < uRefractionSamples; i ++) {\n\tvec3 sampleNorm = normalize(n + roughnessFactor * roughnessFactor * 2.0 * normalize(vec3(rand(runningSeed++) - 0.5, rand(runningSeed++) - 0.5, rand(runningSeed++) - 0.5)) * pow(rand(runningSeed++), 0.33) + distortionNormal);\n\t\n\ttransmissionR = getIBLVolumeRefraction(\n\t\tsampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness  + thickness_smear * (i + randomCoords) / uRefractionSamples,\n\t\tmaterial.attenuationColor, material.attenuationDistance\n\t).r;\n\ttransmissionG = getIBLVolumeRefraction(\n\t\tsampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior  * (1.0 + uChromaticAberration * (i + randomCoords) / uRefractionSamples) , material.thickness + thickness_smear * (i + randomCoords) / uRefractionSamples,\n\t\tmaterial.attenuationColor, material.attenuationDistance\n\t).g;\n\ttransmissionB = getIBLVolumeRefraction(\n\t\tsampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior * (1.0 + 2.0 * uChromaticAberration * (i + randomCoords) / uRefractionSamples), material.thickness + thickness_smear * (i + randomCoords) / uRefractionSamples,\n\t\tmaterial.attenuationColor, material.attenuationDistance\n\t).b;\n\ttransmission.r += transmissionR;\n\ttransmission.g += transmissionG;\n\ttransmission.b += transmissionB;\n}\n\ntransmission /= uRefractionSamples;\n// to here\n\ntotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n\n#endif","import * as THREE from \"three\";\nimport transmission_pars_fragment from \"../shaders/transmission_pars_fragment.glsl\";\nimport transmission_fragment from \"../shaders/transmission_fragment.glsl\";\n\nexport const resolveEachMaterial = ({\n   mat,\n   isCustomTransmission,\n   parameters,\n}: {\n   mat: THREE.Material;\n   isCustomTransmission: boolean;\n   parameters: THREE.WebGLProgramParametersWithUniforms;\n}) => {\n   // custom transmission\n   if (mat.type === \"MeshPhysicalMaterial\" && isCustomTransmission) {\n      parameters.fragmentShader = parameters.fragmentShader.replace(\n         \"#include <transmission_pars_fragment>\",\n         `${transmission_pars_fragment}`\n      );\n\n      parameters.fragmentShader = parameters.fragmentShader.replace(\n         \"#include <transmission_fragment>\",\n         `${transmission_fragment}`\n      );\n   }\n\n   // if normalMap is defined, don't add tangent attribute\n   if (!(mat as any).normalMap) {\n      parameters.vertexShader = parameters.vertexShader.replace(\n         \"void main() {\",\n         `\n\t\t\t\tattribute vec4 tangent;\n\t\t\t\t\n\t\t\t\tvoid main() {\n\t\t\t`\n      );\n   }\n};\n","import * as THREE from \"three\";\nimport { useEffect, useMemo } from \"react\";\nimport { WOBBLE3D_PARAMS } from \".\";\nimport { MaterialProps, OnBeforeInitParameters } from \"../../types\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\nimport { rewriteVertexShader } from \"./utils/rewriteVertexShader\";\nimport { rewriteFragmentShader } from \"./utils/rewriteFragmentShader\";\nimport { resolveEachMaterial } from \"./utils/resolveEachMaterial\";\n\nexport class Wobble3DMaterial extends THREE.Material {\n   uniforms!: {\n      uTime: { value: number };\n      uWobblePositionFrequency: { value: number };\n      uWobbleTimeFrequency: { value: number };\n      uWobbleStrength: { value: number };\n      uWarpPositionFrequency: { value: number };\n      uWarpTimeFrequency: { value: number };\n      uWarpStrength: { value: number };\n      uColor0: { value: THREE.Color };\n      uColor1: { value: THREE.Color };\n      uColor2: { value: THREE.Color };\n      uColor3: { value: THREE.Color };\n      uColorMix: { value: number };\n      uEdgeThreshold: { value: number };\n      uEdgeColor: { value: THREE.Color };\n      uChromaticAberration: { value: number };\n      uAnisotropicBlur: { value: number };\n      uDistortion: { value: number };\n      uDistortionScale: { value: number };\n      uTemporalDistortion: { value: number };\n      uRefractionSamples: { value: number };\n   };\n}\n\nexport type WobbleMaterialConstructor = new (opts: {\n   [key: string]: any;\n}) => THREE.Material;\n\ntype WobbleMaterialParams<T extends WobbleMaterialConstructor> =\n   ConstructorParameters<T>[0];\n\nexport interface WobbleMaterialProps<T extends WobbleMaterialConstructor>\n   extends MaterialProps {\n   /** default:THREE.MeshPhysicalMaterial */\n   baseMaterial?: T;\n   materialParameters?: WobbleMaterialParams<T>;\n   depthOnBeforeInit?: (parameters: OnBeforeInitParameters) => void;\n   /**\n    * Whether to apply more advanced `transmission` or not. valid only for `MeshPhysicalMaterial`. This is a function referring to `drei/MeshTransmissionMaterial`, default : `false`\n    * @link https://github.com/pmndrs/drei?tab=readme-ov-file#meshtransmissionmaterial\n    * */\n   isCustomTransmission?: boolean;\n   /** Whether to initialise `MeshDepthMaterial` or not , default : `false` */\n   depth?: boolean;\n}\n\nexport const useMaterial = <T extends WobbleMaterialConstructor>({\n   baseMaterial,\n   materialParameters,\n   isCustomTransmission = false,\n   onBeforeInit,\n   depthOnBeforeInit,\n   depth = false,\n}: WobbleMaterialProps<T>) => {\n   const { material, depthMaterial } = useMemo(() => {\n      const mat = new (baseMaterial || THREE.MeshPhysicalMaterial)(\n         materialParameters || {}\n      );\n\n      Object.assign(mat.userData, {\n         uniforms: {\n            uTime: { value: 0 },\n            uWobblePositionFrequency: {\n               value: WOBBLE3D_PARAMS.wobblePositionFrequency,\n            },\n            uWobbleTimeFrequency: {\n               value: WOBBLE3D_PARAMS.wobbleTimeFrequency,\n            },\n            uWobbleStrength: { value: WOBBLE3D_PARAMS.wobbleStrength },\n            uWarpPositionFrequency: {\n               value: WOBBLE3D_PARAMS.warpPositionFrequency,\n            },\n            uWarpTimeFrequency: { value: WOBBLE3D_PARAMS.warpTimeFrequency },\n            uWarpStrength: { value: WOBBLE3D_PARAMS.warpStrength },\n            uColor0: { value: WOBBLE3D_PARAMS.color0 },\n            uColor1: { value: WOBBLE3D_PARAMS.color1 },\n            uColor2: { value: WOBBLE3D_PARAMS.color2 },\n            uColor3: { value: WOBBLE3D_PARAMS.color3 },\n            uColorMix: { value: WOBBLE3D_PARAMS.colorMix },\n            uEdgeThreshold: { value: WOBBLE3D_PARAMS.edgeThreshold },\n            uEdgeColor: { value: WOBBLE3D_PARAMS.edgeColor },\n            uChromaticAberration: {\n               value: WOBBLE3D_PARAMS.chromaticAberration,\n            },\n            uAnisotropicBlur: { value: WOBBLE3D_PARAMS.anisotropicBlur },\n            uDistortion: { value: WOBBLE3D_PARAMS.distortion },\n            uDistortionScale: { value: WOBBLE3D_PARAMS.distortionScale },\n            uTemporalDistortion: { value: WOBBLE3D_PARAMS.temporalDistortion },\n            uRefractionSamples: { value: WOBBLE3D_PARAMS.refractionSamples },\n            transmission: { value: 0 },\n            _transmission: { value: 1 },\n            transmissionMap: { value: null },\n         },\n      });\n\n      mat.onBeforeCompile = (parameters) => {\n         rewriteVertexShader(parameters);\n\n         rewriteFragmentShader(parameters);\n\n         resolveEachMaterial({\n            parameters,\n            mat,\n            isCustomTransmission,\n         });\n\n         const cutomizedParams = createMaterialParameters(\n            {\n               fragmentShader: parameters.fragmentShader,\n               vertexShader: parameters.vertexShader,\n               // Because wobble3D uses userData to update uniforms.\n               uniforms: mat.userData.uniforms,\n            },\n            onBeforeInit\n         );\n         parameters.fragmentShader = cutomizedParams.fragmentShader;\n         parameters.vertexShader = cutomizedParams.vertexShader;\n         Object.assign(parameters.uniforms, cutomizedParams.uniforms);\n      };\n      mat.needsUpdate = true;\n\n      /*===============================================\n\t\tdepthMaterial\n\t\t===============================================*/\n      let depthMat = null;\n      if (depth) {\n         depthMat = new THREE.MeshDepthMaterial({\n            depthPacking: THREE.RGBADepthPacking,\n         });\n         depthMat.onBeforeCompile = (parameters) => {\n            Object.assign(parameters.uniforms, mat.userData.uniforms);\n            rewriteVertexShader(parameters);\n            createMaterialParameters(parameters, depthOnBeforeInit);\n         };\n         depthMat.needsUpdate = true;\n      }\n\n      return { material: mat, depthMaterial: depthMat };\n   }, [\n      materialParameters,\n      baseMaterial,\n      onBeforeInit,\n      depthOnBeforeInit,\n      isCustomTransmission,\n      depth,\n   ]);\n\n   // Only the depthMaterial is disposed of because the material is disposed of by useAddObject.\n   useEffect(() => {\n      return () => {\n         if (depthMaterial) depthMaterial.dispose();\n      };\n   }, [depthMaterial]);\n\n   return {\n      material: material as Wobble3DMaterial,\n      depthMaterial,\n   };\n};\n","import * as THREE from \"three\";\nimport { RootState } from \"@react-three/fiber\";\nimport { mergeVertices } from \"three-stdlib\";\nimport {\n   useMaterial,\n   Wobble3DMaterial,\n   WobbleMaterialProps,\n   WobbleMaterialConstructor,\n} from \"./useMaterial\";\nimport { Wobble3DParams } from \".\";\nimport {\n   setUniform,\n   setCustomUniform,\n   CustomParams,\n} from \"../../../utils/setUniforms\";\nimport { useCallback, useMemo } from \"react\";\nimport { useAddObject } from \"../../../utils/useAddObject\";\nimport { Create3DHooksProps } from \"../types\";\n\nexport type UseCreateWobble3DProps = {\n   /** default : `THREE.IcosahedronGeometry(2,20)` */\n   geometry?: THREE.BufferGeometry;\n};\n\ntype UpdateUniform = (\n   rootState: RootState | null,\n   newParams?: Wobble3DParams,\n   customParams?: CustomParams\n) => void;\n\ntype UseCreateWobble3DReturn<T> = [\n   UpdateUniform,\n   {\n      mesh: THREE.Mesh;\n      depthMaterial: THREE.MeshDepthMaterial | null;\n   }\n];\n\nexport const useCreateWobble3D = <T extends WobbleMaterialConstructor>({\n   scene = false,\n   geometry,\n   isCustomTransmission,\n   baseMaterial,\n   materialParameters,\n   depth,\n   onBeforeInit,\n   depthOnBeforeInit,\n}: UseCreateWobble3DProps &\n   Create3DHooksProps &\n   WobbleMaterialProps<T>): UseCreateWobble3DReturn<T> => {\n   const wobbleGeometry = useMemo(() => {\n      let geo = geometry || new THREE.IcosahedronGeometry(2, 20);\n      geo = mergeVertices(geo);\n      geo.computeTangents();\n      return geo;\n   }, [geometry]);\n   const { material, depthMaterial } = useMaterial({\n      baseMaterial,\n      materialParameters,\n      isCustomTransmission,\n      onBeforeInit,\n      depthOnBeforeInit,\n      depth,\n   });\n\n   const mesh = useAddObject(scene, wobbleGeometry, material, THREE.Mesh);\n\n   const userData = material.userData as Wobble3DMaterial;\n\n   const updateValue = setUniform(userData);\n   const updateCustomValue = setCustomUniform(userData);\n\n   const updateUniform = useCallback<UpdateUniform>(\n      (rootState, newParams, customParams) => {\n         if (rootState) {\n            updateValue(\n               \"uTime\",\n               newParams?.beat || rootState.clock.getElapsedTime()\n            );\n         }\n         if (newParams === undefined) {\n            return;\n         }\n         updateValue(\"uWobbleStrength\", newParams.wobbleStrength);\n         updateValue(\n            \"uWobblePositionFrequency\",\n            newParams.wobblePositionFrequency\n         );\n         updateValue(\"uWobbleTimeFrequency\", newParams.wobbleTimeFrequency);\n         updateValue(\"uWarpStrength\", newParams.warpStrength);\n         updateValue(\"uWarpPositionFrequency\", newParams.warpPositionFrequency);\n         updateValue(\"uWarpTimeFrequency\", newParams.warpTimeFrequency);\n         updateValue(\"uColor0\", newParams.color0);\n         updateValue(\"uColor1\", newParams.color1);\n         updateValue(\"uColor2\", newParams.color2);\n         updateValue(\"uColor3\", newParams.color3);\n         updateValue(\"uColorMix\", newParams.colorMix);\n         updateValue(\"uEdgeThreshold\", newParams.edgeThreshold);\n         updateValue(\"uEdgeColor\", newParams.edgeColor);\n         updateValue(\"uChromaticAberration\", newParams.chromaticAberration);\n         updateValue(\"uAnisotropicBlur\", newParams.anisotropicBlur);\n         updateValue(\"uDistortion\", newParams.distortion);\n         updateValue(\"uDistortionScale\", newParams.distortionScale);\n         updateValue(\"uRefractionSamples\", newParams.refractionSamples);\n         updateValue(\"uTemporalDistortion\", newParams.temporalDistortion);\n\n         updateCustomValue(customParams);\n      },\n      [updateValue, updateCustomValue]\n   );\n\n   return [\n      updateUniform,\n      {\n         mesh,\n         depthMaterial,\n      },\n   ];\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo } from \"react\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../../utils/useSingleFBO\";\nimport { HooksReturn } from \"../../types\";\nimport { useCreateWobble3D, UseCreateWobble3DProps } from \"./useCreateWobble3D\";\nimport { WobbleMaterialProps, WobbleMaterialConstructor } from \"./useMaterial\";\nimport { HooksProps3D } from \"../types\";\nimport { getDpr } from \"../../../utils/getDpr\";\nimport { CustomParams } from \"../../../utils/setUniforms\";\n\nexport type Wobble3DParams = {\n   /** default : `0.3` */\n   wobbleStrength?: number;\n   /** default : `0.3` */\n   wobblePositionFrequency?: number;\n   /** default : `0.3` */\n   wobbleTimeFrequency?: number;\n   /** default : `0.3` */\n   warpStrength?: number;\n   /** default : `0.3` */\n   warpPositionFrequency?: number;\n   /** default : `0.3` */\n   warpTimeFrequency?: number;\n   color0?: THREE.Color;\n   color1?: THREE.Color;\n   color2?: THREE.Color;\n   color3?: THREE.Color;\n   /** Mixing ratio with the material's original output color, 0~1 , defaulat : `1` */\n   colorMix?: number;\n   /** Threshold of edge. 0 for edge disabled, default : `0` */\n   edgeThreshold?: number;\n   /** Color of edge. default : `0x000000` */\n   edgeColor?: THREE.Color;\n   /** you can get into the rhythm ♪ , default : `false` */\n   beat?: number | false;\n   /** valid only for `MeshPhysicalMaterial` && `isCustomTransmission:true` , default : `0.1` */\n   chromaticAberration?: number;\n   /** valid only for `MeshPhysicalMaterial` && `isCustomTransmission:true` , default : `0.1` */\n   anisotropicBlur?: number;\n   /** valid only for `MeshPhysicalMaterial` && `isCustomTransmission:true` , default : `0.0` */\n   distortion?: number;\n   /** valid only for `MeshPhysicalMaterial` && `isCustomTransmission:true` , default : `0.1` */\n   distortionScale?: number;\n   /** valid only for `MeshPhysicalMaterial` && `isCustomTransmission:true` , default : `0.0` */\n   temporalDistortion?: number;\n   /** valid only for `MeshPhysicalMaterial` && `isCustomTransmission:true` , default : `6`  */\n   refractionSamples?: number;\n};\n\nexport type Wobble3DObject = {\n   scene: THREE.Scene;\n   mesh: THREE.Mesh;\n   depthMaterial: THREE.MeshDepthMaterial | null;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const WOBBLE3D_PARAMS: Wobble3DParams = Object.freeze({\n   wobbleStrength: 0.3,\n   wobblePositionFrequency: 0.3,\n   wobbleTimeFrequency: 0.3,\n   warpStrength: 0.3,\n   warpPositionFrequency: 0.3,\n   warpTimeFrequency: 0.3,\n   color0: new THREE.Color(0xff0000),\n   color1: new THREE.Color(0x00ff00),\n   color2: new THREE.Color(0x0000ff),\n   color3: new THREE.Color(0xffff00),\n   colorMix: 1,\n   edgeThreshold: 0.0,\n   edgeColor: new THREE.Color(0x000000),\n   chromaticAberration: 0.1,\n   anisotropicBlur: 0.1,\n   distortion: 0.0,\n   distortionScale: 0.1,\n   temporalDistortion: 0.0,\n   refractionSamples: 6,\n   beat: false,\n});\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx\n */\nexport const useWobble3D = <T extends WobbleMaterialConstructor>({\n   size,\n   dpr,\n   renderTargetOptions,\n   isSizeUpdate,\n   camera,\n   geometry,\n   baseMaterial,\n   materialParameters,\n   isCustomTransmission,\n   onBeforeInit,\n   depthOnBeforeInit,\n   depth,\n}: HooksProps3D & UseCreateWobble3DProps & WobbleMaterialProps<T>): HooksReturn<\n   Wobble3DParams,\n   Wobble3DObject,\n   CustomParams\n> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n\n   const [updateUniform, { mesh, depthMaterial }] = useCreateWobble3D({\n      baseMaterial,\n      materialParameters,\n      scene,\n      geometry,\n      isCustomTransmission,\n      onBeforeInit,\n      depthOnBeforeInit,\n      depth,\n   });\n\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      depthBuffer: true,\n      ...renderTargetOptions,\n   });\n\n   const updateFx = useCallback(\n      (\n         RootState: RootState,\n         newParams?: Wobble3DParams,\n         customParams?: CustomParams\n      ) => {\n         updateUniform(RootState, newParams, customParams);\n         return updateRenderTarget(RootState.gl);\n      },\n      [updateRenderTarget, updateUniform]\n   );\n\n   const updateParams = useCallback(\n      (newParams?: Wobble3DParams, customParams?: CustomParams) => {\n         updateUniform(null, newParams, customParams);\n      },\n      [updateUniform]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene,\n         mesh,\n         depthMaterial,\n         renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","import * as THREE from \"three\";\nimport { useEffect, useMemo } from \"react\";\n\n/** Generate mesh from geometry and material and add to scene */\nexport const useAddMesh = (\n   scene: THREE.Scene,\n   geometry: THREE.BufferGeometry,\n   material: THREE.Material\n) => {\n   const mesh = useMemo(() => {\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      return mesh;\n   }, [geometry, material, scene]);\n\n   useEffect(() => {\n      return () => {\n         scene.remove(mesh);\n         geometry.dispose();\n         material.dispose();\n      };\n   }, [scene, geometry, material, mesh]);\n\n   return mesh;\n};\n","import { useMemo, useRef } from \"react\";\nimport { Size } from \"../fxs/types\";\n\nconst checkUpdate = (\n   currentW: number,\n   currentH: number,\n   memoW: number,\n   memoH: number,\n   threshold: number,\n   boundFor: \"smaller\" | \"larger\" | \"both\"\n) => {\n   const isSmaller =\n      currentW < memoW - threshold || currentH < memoH - threshold;\n   const isLarger =\n      currentW > memoW + threshold || currentH > memoH + threshold;\n\n   return (\n      (boundFor === \"smaller\" && isSmaller) ||\n      (boundFor === \"larger\" && isLarger) ||\n      (boundFor === \"both\" && (isSmaller || isLarger))\n   );\n};\n\nexport const useResizeBoundary = ({\n   size,\n   boundFor,\n   threshold,\n}: {\n   size: Size;\n   boundFor: \"smaller\" | \"larger\" | \"both\";\n   threshold: number;\n}) => {\n   const memorizedSize = useRef<Size>(size);\n\n   const isBeyondBoundary = useMemo<boolean>(() => {\n      const { width: currentW, height: currentH } = size;\n      const { width: memoW, height: memoH } = memorizedSize.current;\n\n      const isUpdate = checkUpdate(\n         currentW,\n         currentH,\n         memoW,\n         memoH,\n         threshold,\n         boundFor\n      );\n\n      if (isUpdate) {\n         memorizedSize.current = size;\n      }\n      return isUpdate;\n   }, [size, boundFor, threshold]);\n\n   return isBeyondBoundary;\n};\n","export type EasingTypes =\n   | \"easeInSine\"\n   | \"easeOutSine\"\n   | \"easeInOutSine\"\n   | \"easeInQuad\"\n   | \"easeOutQuad\"\n   | \"easeInOutQuad\"\n   | \"easeInCubic\"\n   | \"easeOutCubic\"\n   | \"easeInOutCubic\"\n   | \"easeInQuart\"\n   | \"easeOutQuart\"\n   | \"easeInOutQuart\"\n   | \"easeInQuint\"\n   | \"easeOutQuint\"\n   | \"easeInOutQuint\"\n   | \"easeInExpo\"\n   | \"easeOutExpo\"\n   | \"easeInOutExpo\"\n   | \"easeInCirc\"\n   | \"easeOutCirc\"\n   | \"easeInOutCirc\"\n   | \"easeInBack\"\n   | \"easeOutBack\"\n   | \"easeInOutBack\"\n   | \"easeInElastic\"\n   | \"easeOutElastic\"\n   | \"easeInOutElastic\"\n   | \"easeInBounce\"\n   | \"easeOutBounce\"\n   | \"easeInOutBounce\";\n\ntype EasingFunctions = {\n   [K in EasingTypes]: (x: number) => number;\n};\n\n/**\n * from https://github.com/ai/easings.net\n */\nexport const Easing: EasingFunctions = Object.freeze({\n   easeInSine(x: number): number {\n      return 1 - Math.cos((x * Math.PI) / 2);\n   },\n   easeOutSine(x: number): number {\n      return Math.sin((x * Math.PI) / 2);\n   },\n   easeInOutSine(x: number): number {\n      return -(Math.cos(Math.PI * x) - 1) / 2;\n   },\n   easeInQuad(x: number): number {\n      return x * x;\n   },\n   easeOutQuad(x: number): number {\n      return 1 - (1 - x) * (1 - x);\n   },\n   easeInOutQuad(x: number): number {\n      return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;\n   },\n   easeInCubic(x: number): number {\n      return x * x * x;\n   },\n   easeOutCubic(x: number): number {\n      return 1 - Math.pow(1 - x, 3);\n   },\n   easeInOutCubic(x: number): number {\n      return x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2;\n   },\n   easeInQuart(x: number): number {\n      return x * x * x * x;\n   },\n   easeOutQuart(x: number): number {\n      return 1 - Math.pow(1 - x, 4);\n   },\n   easeInOutQuart(x: number): number {\n      return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;\n   },\n   easeInQuint(x: number): number {\n      return x * x * x * x * x;\n   },\n   easeOutQuint(x: number): number {\n      return 1 - Math.pow(1 - x, 5);\n   },\n   easeInOutQuint(x: number): number {\n      return x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2;\n   },\n   easeInExpo(x: number): number {\n      return x === 0 ? 0 : Math.pow(2, 10 * x - 10);\n   },\n   easeOutExpo(x: number): number {\n      return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);\n   },\n   easeInOutExpo(x: number): number {\n      return x === 0\n         ? 0\n         : x === 1\n         ? 1\n         : x < 0.5\n         ? Math.pow(2, 20 * x - 10) / 2\n         : (2 - Math.pow(2, -20 * x + 10)) / 2;\n   },\n   easeInCirc(x: number): number {\n      return 1 - Math.sqrt(1 - Math.pow(x, 2));\n   },\n   easeOutCirc(x: number): number {\n      return Math.sqrt(1 - Math.pow(x - 1, 2));\n   },\n   easeInOutCirc(x: number): number {\n      return x < 0.5\n         ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2\n         : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;\n   },\n   easeInBack(x: number): number {\n      const c1 = 1.70158;\n      const c3 = c1 + 1;\n\n      return c3 * x * x * x - c1 * x * x;\n   },\n   easeOutBack(x: number): number {\n      const c1 = 1.70158;\n      const c3 = c1 + 1;\n\n      return 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2);\n   },\n   easeInOutBack(x: number): number {\n      const c1 = 1.70158;\n      const c2 = c1 * 1.525;\n\n      return x < 0.5\n         ? (Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\n         : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\n   },\n   easeInElastic(x: number): number {\n      const c4 = (2 * Math.PI) / 3;\n\n      return x === 0\n         ? 0\n         : x === 1\n         ? 1\n         : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4);\n   },\n   easeOutElastic(x: number): number {\n      const c4 = (2 * Math.PI) / 3;\n\n      return x === 0\n         ? 0\n         : x === 1\n         ? 1\n         : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1;\n   },\n   easeInOutElastic(x: number): number {\n      const c5 = (2 * Math.PI) / 4.5;\n\n      return x === 0\n         ? 0\n         : x === 1\n         ? 1\n         : x < 0.5\n         ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2\n         : (Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5)) / 2 +\n           1;\n   },\n   easeInBounce(x: number): number {\n      return 1 - Easing.easeOutBounce(1 - x);\n   },\n   easeOutBounce(x: number): number {\n      const n1 = 7.5625;\n      const d1 = 2.75;\n\n      if (x < 1 / d1) {\n         return n1 * x * x;\n      } else if (x < 2 / d1) {\n         return n1 * (x -= 1.5 / d1) * x + 0.75;\n      } else if (x < 2.5 / d1) {\n         return n1 * (x -= 2.25 / d1) * x + 0.9375;\n      } else {\n         return n1 * (x -= 2.625 / d1) * x + 0.984375;\n      }\n   },\n   easeInOutBounce(x: number): number {\n      return x < 0.5\n         ? (1 - Easing.easeOutBounce(1 - 2 * x)) / 2\n         : (1 + Easing.easeOutBounce(2 * x - 1)) / 2;\n   },\n});\n","import * as THREE from \"three\";\nimport { Easing, EasingTypes } from \"../libs/Easings\";\nimport { useCallback } from \"react\";\n\n/** Returns a unique hash specific to the beat */\nfunction getHash(input: number) {\n   let n = Math.sin(input * 12.9898) * 43758.5453;\n   return n - Math.floor(n);\n}\n\ntype BeatValues = {\n   beat: number;\n   floor: number;\n   fract: number;\n   /** unique hash specific to the beat */\n   hash: number;\n};\n\n/**\n * @param ease easing functions are referenced from https://github.com/ai/easings.net , default : \"easeOutQuart\"\n */\nexport const useBeat = (bpm: number, ease: EasingTypes = \"easeOutQuart\") => {\n   const rhythm = bpm / 60;\n   const easing = Easing[ease];\n   const updateBeat = useCallback(\n      (clock: THREE.Clock) => {\n         let beat = clock.getElapsedTime() * rhythm;\n         const floor = Math.floor(beat);\n         const fract = easing(beat - floor);\n         beat = fract + floor;\n         const hash = getHash(floor);\n         return {\n            beat,\n            floor,\n            fract,\n            hash,\n         } as BeatValues;\n      },\n      [rhythm, easing]\n   );\n   return updateBeat;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo, useRef } from \"react\";\n\n/**\n * @param fps FPS you want to limit , default : `60`\n *\n * ```tsx\n * const limiter = useFPSLimiter(fps);\n * useFrame((props) => {\n *     if (limiter(props.clock)) {\n *\t\t    //some code\n *     }\n * });\n * ```\n */\nexport const useFPSLimiter = (fps: number = 60) => {\n   const interval = useMemo(() => 1 / Math.max(Math.min(fps, 60), 1), [fps]);\n   const prevTime = useRef<number | null>(null);\n\n   const limiter = useCallback(\n      (clock: THREE.Clock) => {\n         const tick = clock.getElapsedTime();\n         if (prevTime.current === null) {\n            prevTime.current = tick;\n            return true;\n         }\n         const deltaTime = tick - prevTime.current;\n         if (deltaTime >= interval) {\n            prevTime.current = tick;\n            return true;\n         }\n         return false;\n      },\n      [interval]\n   );\n\n   return limiter;\n};\n","import { DomSyncerParams } from \"..\";\n\nexport const errorHandler = (params: DomSyncerParams) => {\n   const domLength = params.dom?.length;\n   const textureLength = params.texture?.length;\n\n   if (!domLength || !textureLength) {\n      return true;\n   }\n\n   if (domLength !== textureLength) {\n      return true;\n   }\n\n   return false;\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform vec2 u_textureResolution;\nuniform vec2 u_resolution;\nuniform float u_borderRadius;\n\nvoid main() {\n\t// texuture color\n\tfloat screenAspect = u_resolution.x / u_resolution.y;\n\tfloat textureAspect = u_textureResolution.x / u_textureResolution.y;\n\tvec2 ratio = vec2(\n\t\tmin(screenAspect / textureAspect, 1.0),\n\t\tmin(textureAspect / screenAspect, 1.0)\n\t);\n\n\tvec2 adjustedUv = vUv * ratio + (1.0 - ratio) * 0.5;\n\tvec3 textureColor = texture2D(u_texture, adjustedUv).rgb;\n\tfloat textureAlpha = texture2D(u_texture, adjustedUv).a;\n\n\t// Based on https://mofu-dev.com/en/blog/three-dom-alignment/\n\tfloat maxSide = max(u_resolution.x, u_resolution.y);\n\tfloat minSide = min(u_resolution.x, u_resolution.y);\n\tvec2 aspect = u_resolution / maxSide;\n\tvec2 alphaUv = vUv - 0.5;\n\n\tfloat borderRadius = min(u_borderRadius, minSide * 0.5);\n\tvec2 offset = vec2(borderRadius) / u_resolution;\n\tvec2 alphaXY = smoothstep(vec2(0.5 - offset), vec2(0.5 - offset - 0.001), abs(alphaUv));\n\tfloat alpha = min(1.0, alphaXY.x + alphaXY.y);\n\n\tvec2 alphaUv2 = abs(vUv - 0.5);\n\tfloat radius = borderRadius / maxSide;\n\talphaUv2 = (alphaUv2 - 0.5) * aspect + radius;\n\tfloat roundAlpha = smoothstep(radius + 0.001, radius, length(alphaUv2));\n\n\talpha = min(1.0, alpha + roundAlpha);\n\n\t// multiply texture alpha\n\talpha *= textureAlpha;\n\n\tgl_FragColor = vec4(textureColor, alpha);\n}\n","import * as THREE from \"three\";\nimport { DomSyncerParams } from \"../\";\nimport vertexShader from \"../shader/main.vert\";\nimport fragmentShader from \"../shader/main.frag\";\nimport { MaterialProps, Size } from \"../../../fxs/types\";\nimport { MATERIAL_BASIC_PARAMS } from \"../../../libs/constants\";\nimport { createMaterialParameters } from \"../../../utils/createMaterialParameters\";\n\nexport class DomSyncerMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_textureResolution: { value: THREE.Vector2 };\n      u_resolution: { value: THREE.Vector2 };\n      u_borderRadius: { value: number };\n   };\n}\n\nexport const createMesh = ({\n   params,\n   scene,\n   onBeforeInit,\n}: {\n   params: DomSyncerParams;\n   size: Size;\n   scene: THREE.Scene;\n} & MaterialProps) => {\n   if (scene.children.length > 0) {\n      scene.children.forEach((child) => {\n         if (child instanceof THREE.Mesh) {\n            child.geometry.dispose();\n            child.material.dispose();\n         }\n      });\n      scene.remove(...scene.children);\n   }\n\n   params.texture!.forEach((texture, i) => {\n      const mat = new THREE.ShaderMaterial({\n         ...createMaterialParameters(\n            {\n               uniforms: {\n                  u_texture: { value: texture },\n                  u_textureResolution: {\n                     value: new THREE.Vector2(0, 0),\n                  },\n                  u_resolution: { value: new THREE.Vector2(0, 0) },\n                  u_borderRadius: {\n                     value: params.boderRadius![i]\n                        ? params.boderRadius![i]\n                        : 0.0,\n                  },\n               },\n               vertexShader: vertexShader,\n               fragmentShader: fragmentShader,\n            },\n            onBeforeInit\n         ),\n         ...MATERIAL_BASIC_PARAMS,\n         // Must be transparent.\n         transparent: true,\n      });\n\n      const mesh = new THREE.Mesh(new THREE.PlaneGeometry(1, 1), mat);\n      scene.add(mesh);\n   });\n};\n","import { useCallback, useRef } from \"react\";\nimport { DomSyncerParams } from \"..\";\n\nexport const useIntersectionHandler = () => {\n   const intersectionObserverRef = useRef<IntersectionObserver[]>([]);\n   const intersectionDomRef = useRef<(HTMLElement | Element | null)[]>([]);\n\n   const intersectionHandler = useCallback(\n      ({\n         isIntersectingRef,\n         isIntersectingOnceRef,\n         params,\n      }: {\n         isIntersectingRef: React.MutableRefObject<boolean[]>;\n         isIntersectingOnceRef: React.MutableRefObject<boolean[]>;\n         params: DomSyncerParams;\n      }) => {\n         if (intersectionObserverRef.current.length > 0) {\n            intersectionObserverRef.current.forEach((observer, i) => {\n               observer.unobserve(intersectionDomRef.current[i]!);\n            });\n         }\n\n         intersectionDomRef.current = [];\n         intersectionObserverRef.current = [];\n\n         const newArr = new Array(params.dom!.length).fill(false);\n         isIntersectingRef.current = [...newArr];\n         isIntersectingOnceRef.current = [...newArr];\n\n         params.dom!.forEach((dom, i) => {\n            const callback = (entries: IntersectionObserverEntry[]) => {\n               entries.forEach((entry) => {\n                  params.onIntersect![i] && params.onIntersect![i](entry);\n                  // Update the judgment after execution so that the judgment of isIntersectin can be used when executing onIntersect\n                  isIntersectingRef.current[i] = entry.isIntersecting;\n               });\n            };\n            const observer = new IntersectionObserver(callback, {\n               rootMargin: \"0px\",\n               threshold: 0,\n            });\n            observer.observe(dom!);\n            intersectionObserverRef.current.push(observer);\n            intersectionDomRef.current.push(dom!);\n         });\n      },\n      []\n   );\n\n   return intersectionHandler;\n};\n","import * as THREE from \"three\";\nimport { DomSyncerParams } from \"..\";\nimport {\n   CustomParams,\n   setCustomUniform,\n   setUniform,\n} from \"../../../utils/setUniforms\";\nimport { DomSyncerMaterial } from \"./createMesh\";\nimport { useCallback, useRef } from \"react\";\nimport { Size } from \"../../../fxs/types\";\n\ntype UpdateDomRect = ({\n   params,\n   customParams,\n   size,\n   resolutionRef,\n   scene,\n   isIntersectingRef,\n}: {\n   params: DomSyncerParams;\n   customParams?: CustomParams;\n   size: Size;\n   resolutionRef: React.MutableRefObject<THREE.Vector2>;\n   scene: THREE.Scene;\n   isIntersectingRef: React.MutableRefObject<boolean[]>;\n}) => void;\n\ntype UseUpdateDomRectReturn = [DOMRect[], UpdateDomRect];\n\nexport const useUpdateDomRect = (): UseUpdateDomRectReturn => {\n   const domRects = useRef<DOMRect[]>([]);\n\n   const updateDomRects: UpdateDomRect = useCallback(\n      ({\n         params,\n         customParams,\n         size,\n         resolutionRef,\n         scene,\n         isIntersectingRef,\n      }) => {\n         // Initialize domRects if the number of children in the scene is different from the number of DOMRect\n         if (scene.children.length !== domRects.current!.length) {\n            domRects.current = new Array(scene.children.length);\n         }\n\n         scene.children.forEach((mesh, i) => {\n            const domElement = params.dom![i];\n            if (!domElement) {\n               return;\n            }\n\n            // DOMRect is updated even outside the intersection\n            const rect = domElement.getBoundingClientRect();\n            domRects.current[i] = rect;\n\n            // Intersection cannot be determined accurately depending on the mobile navigation bar, so it seems better to update it constantly\n            mesh.scale.set(rect.width, rect.height, 1.0);\n            mesh.position.set(\n               rect.left + rect.width * 0.5 - size.width * 0.5,\n               -rect.top - rect.height * 0.5 + size.height * 0.5,\n               0.0\n            );\n\n            if (isIntersectingRef.current[i]) {\n               if (params.rotation![i]) {\n                  mesh.rotation.copy(params.rotation![i]);\n               }\n\n               if (mesh instanceof THREE.Mesh) {\n                  const material: DomSyncerMaterial = mesh.material;\n                  const updateValue = setUniform(material);\n                  const updateCustomValue = setCustomUniform(material);\n                  updateValue(\"u_texture\", params.texture![i]);\n                  updateValue(\"u_textureResolution\", [\n                     params.texture![i]?.source?.data?.width || 0,\n                     params.texture![i]?.source?.data?.height || 0,\n                  ]);\n                  updateValue(\n                     \"u_resolution\",\n                     resolutionRef.current.set(rect.width, rect.height)\n                  );\n                  updateValue(\n                     \"u_borderRadius\",\n                     params.boderRadius![i] ? params.boderRadius![i] : 0.0\n                  );\n                  updateCustomValue(customParams);\n               }\n            }\n         });\n      },\n      []\n   );\n\n   return [domRects.current, updateDomRects];\n};\n","import { useCallback, useRef } from \"react\";\n\nexport type IsIntersecting = (\n   index: number,\n   once?: boolean\n) => boolean[] | boolean;\n\nexport const useIsIntersecting = () => {\n   const isIntersectingRef = useRef<boolean[]>([]);\n   const isIntersectingOnceRef = useRef<boolean[]>([]);\n\n   const isIntersecting: IsIntersecting = useCallback((index, once = false) => {\n      isIntersectingRef.current.forEach((value, i) => {\n         if (value) {\n            isIntersectingOnceRef.current[i] = true;\n         }\n      });\n      const temp = once\n         ? [...isIntersectingOnceRef.current]\n         : [...isIntersectingRef.current];\n      return index < 0 ? temp : temp[index];\n   }, []);\n\n   return {\n      isIntersectingRef,\n      isIntersectingOnceRef,\n      isIntersecting,\n   };\n};\n","import { useEffect, useRef } from \"react\";\n\nexport type UseDomViewProps = {\n   onView?: () => void;\n   onHidden?: () => void;\n};\n\nexport type UseDomView = (props: UseDomViewProps) => void;\n\nexport const createUseDomView = (\n   isIntersectingRef: React.MutableRefObject<boolean[]>\n): UseDomView => {\n   const useDomView = ({ onView, onHidden }: UseDomViewProps) => {\n      const isView = useRef<boolean>(false);\n      useEffect(() => {\n         let id: number;\n         const filterIntersection = () => {\n            if (isIntersectingRef.current.some((item) => item)) {\n               if (!isView.current) {\n                  onView && onView();\n                  isView.current = true;\n               }\n            } else {\n               if (isView.current) {\n                  onHidden && onHidden();\n                  isView.current = false;\n               }\n            }\n            id = requestAnimationFrame(filterIntersection);\n         };\n         id = requestAnimationFrame(filterIntersection);\n         return () => {\n            cancelAnimationFrame(id);\n         };\n      }, [onView, onHidden]);\n   };\n   return useDomView;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo, useRef, useState, Key } from \"react\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { HooksProps, HooksReturn } from \"../../fxs/types\";\nimport { useParams } from \"../../utils/useParams\";\nimport { errorHandler } from \"./utils/errorHandler\";\nimport { createMesh } from \"./utils/createMesh\";\nimport { useIntersectionHandler } from \"./utils/useIntersectionHandler\";\nimport { useUpdateDomRect } from \"./utils/useUpdateDomRect\";\nimport { useIsIntersecting, IsIntersecting } from \"./utils/useIsIntersecting\";\nimport { UseDomView, createUseDomView } from \"./utils/createUseDomView\";\nimport { getDpr } from \"../../utils/getDpr\";\nimport { CustomParams } from \"../../utils/setUniforms\";\nimport { DEFAULT_TEXTURE } from \"../../libs/constants\";\n\nexport type DomSyncerParams = {\n   /** DOM array you want to synchronize */\n   dom?: (HTMLElement | Element | null)[];\n   /** Texture array that you want to synchronize with the DOM rectangle */\n   texture?: THREE.Texture[];\n   /** default : `0.0[]` */\n   boderRadius?: number[];\n   /** the angle you want to rotate */\n   rotation?: THREE.Euler[];\n   /** Array of callback functions when crossed */\n   onIntersect?: ((entry: IntersectionObserverEntry) => void)[];\n   /** Because DOM rendering and React updates occur asynchronously, there may be a lag between updating dependent arrays and setting DOM arrays. That's what the Key is for. If the dependent array is updated but the Key is not, the loop will skip and return an empty texture. By updating the timing key when DOM acquisition is complete, you can perfectly synchronize DOM and Mesh updates.updateKey must be a unique value for each update, for example `performance.now()`.*/\n   updateKey?: Key;\n};\n\nexport type DomSyncerObject = {\n   scene: THREE.Scene;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n   /**\n    * A function that returns a determination whether the DOM intersects or not.\n    * The boolean will be updated after executing the onIntersect function.\n    * @param index - Index of the dom for which you want to return an intersection decision. -1 will return the entire array.\n    * @param once - If set to true, it will continue to return true once crossed.\n    */\n   isIntersecting: IsIntersecting;\n   /** target's DOMRect[] */\n   DOMRects: DOMRect[];\n   /** target's intersetions boolean[] */\n   intersections: boolean[];\n   /** You can set callbacks for when at least one DOM is visible and when it is completely hidden. */\n   useDomView: UseDomView;\n};\n\nexport const DOMSYNCER_PARAMS: DomSyncerParams = {\n   texture: [],\n   dom: [],\n   boderRadius: [],\n   rotation: [],\n   onIntersect: [],\n};\n\n/**\n * @link https://github.com/FunTechInc/use-shader-fx?tab=readme-ov-file#usedomsyncer\n * @param dependencies - When this dependency array is changed, the mesh and intersection judgment will be updated according to the passed DOM array.\n */\nexport const useDomSyncer = (\n   { size, dpr, isSizeUpdate, renderTargetOptions, onBeforeInit }: HooksProps,\n   dependencies: React.DependencyList = []\n): HooksReturn<DomSyncerParams, DomSyncerObject, CustomParams> => {\n   const _dpr = getDpr(dpr);\n\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr: _dpr.fbo,\n      isSizeUpdate,\n      ...renderTargetOptions,\n   });\n   const [params, setParams] = useParams<DomSyncerParams>({\n      ...DOMSYNCER_PARAMS,\n      updateKey: performance.now(),\n   });\n\n   const [DOMRects, updateDomRects] = useUpdateDomRect();\n\n   // Avoid instancing vec2 every frame\n   const resolutionRef = useRef<THREE.Vector2>(new THREE.Vector2(0, 0));\n\n   // Update monitored doms according to the dependency array\n   const [refreshTrigger, setRefreshTrigger] = useState(true);\n   useMemo(\n      () => setRefreshTrigger(true),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      dependencies\n   );\n\n   // If the dependencies have been updated but the key has not been updated, skip processing and return an empty texture\n   const updateKey = useRef<Key | null>(null);\n   const emptyTexture = useMemo(() => DEFAULT_TEXTURE, []);\n\n   // set intersection\n   const intersectionHandler = useIntersectionHandler();\n   const { isIntersectingOnceRef, isIntersectingRef, isIntersecting } =\n      useIsIntersecting();\n\n   // create useDomView\n   const useDomView = createUseDomView(isIntersectingRef);\n\n   const updateParams = useMemo(() => {\n      return (newParams?: DomSyncerParams, customParams?: CustomParams) => {\n         setParams(newParams);\n         updateDomRects({\n            params,\n            customParams,\n            size,\n            resolutionRef,\n            scene,\n            isIntersectingRef,\n         });\n      };\n   }, [isIntersectingRef, setParams, updateDomRects, size, scene, params]);\n\n   const updateFx = useCallback(\n      (\n         rootState: RootState,\n         newParams?: DomSyncerParams,\n         customParams?: CustomParams\n      ) => {\n         const { gl, size } = rootState;\n\n         updateParams(newParams, customParams);\n\n         if (errorHandler(params)) {\n            return emptyTexture;\n         }\n\n         if (refreshTrigger) {\n            if (updateKey.current === params.updateKey) {\n               return emptyTexture;\n            } else {\n               updateKey.current = params.updateKey!;\n            }\n         }\n\n         if (refreshTrigger) {\n            createMesh({\n               params,\n               size,\n               scene,\n               onBeforeInit,\n            });\n\n            intersectionHandler({\n               isIntersectingRef,\n               isIntersectingOnceRef,\n               params,\n            });\n\n            setRefreshTrigger(false);\n         }\n\n         return updateRenderTarget(gl);\n      },\n      [\n         updateRenderTarget,\n         intersectionHandler,\n         onBeforeInit,\n         updateParams,\n         refreshTrigger,\n         scene,\n         params,\n         isIntersectingOnceRef,\n         isIntersectingRef,\n         emptyTexture,\n      ]\n   );\n\n   return [\n      updateFx,\n      updateParams,\n      {\n         scene,\n         camera,\n         renderTarget,\n         output: renderTarget.texture,\n         isIntersecting,\n         DOMRects,\n         intersections: isIntersectingRef.current,\n         useDomView,\n      },\n   ];\n};\n","import * as THREE from \"three\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { useResolution } from \"../utils/useResolution\";\nimport {\n   UseFboProps,\n   renderFBO,\n   FBO_DEFAULT_OPTION,\n} from \"../utils/useSingleFBO\";\n\ntype UpdateCopyFunction = (\n   gl: THREE.WebGLRenderer,\n   index: number,\n   /**  call before FBO is rendered */\n   onBeforeRender?: ({ read }: { read: THREE.Texture }) => void\n) => THREE.Texture;\n\ntype UseCopyTextureReturn = [THREE.WebGLRenderTarget[], UpdateCopyFunction];\n\n/**\n * Generate an FBO array to copy the texture.\n * @param dpr If dpr is set, dpr will be multiplied, default : `false`\n * @param isSizeUpdate Whether to resize when resizing occurs. If isDpr is true, set FBO to setSize even if dpr is changed, default : `false`\n * @param length The number of FBOs to create\n * @returns [THREE.WebGLRenderTarget[] , updateCopyTexture] - Receives the RenderTarget array as the first argument and the update function as the second argument. `updateCopyTexture()` receives gl as the first argument and the index of the texture you want to copy as the second argument.\n */\nexport const useCopyTexture = (\n   props: UseFboProps,\n   length: number\n): UseCopyTextureReturn => {\n   const {\n      scene,\n      camera,\n      size,\n      dpr = false,\n      isSizeUpdate = false,\n      depth = false,\n      ...targetSettings\n   } = props;\n\n   const renderTargetArr = useRef<THREE.WebGLRenderTarget[]>([]);\n   const resolution = useResolution(size, dpr);\n\n   renderTargetArr.current = useMemo(() => {\n      return Array.from({ length }, () => {\n         const target = new THREE.WebGLRenderTarget(\n            resolution.x,\n            resolution.y,\n            {\n               ...FBO_DEFAULT_OPTION,\n               ...targetSettings,\n            }\n         );\n         if (depth) {\n            target.depthTexture = new THREE.DepthTexture(\n               resolution.x,\n               resolution.y,\n               THREE.FloatType\n            );\n         }\n         return target;\n      });\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [length]);\n\n   if (isSizeUpdate) {\n      renderTargetArr.current.forEach((fbo) =>\n         fbo.setSize(resolution.x, resolution.y)\n      );\n   }\n\n   useEffect(() => {\n      const temp = renderTargetArr.current;\n      return () => {\n         temp.forEach((fbo) => fbo.dispose());\n      };\n   }, [length]);\n\n   const updateCopyTexture: UpdateCopyFunction = useCallback(\n      (gl, index, onBeforeRender) => {\n         const fbo = renderTargetArr.current[index];\n         renderFBO({\n            gl,\n            scene,\n            camera,\n            fbo,\n            onBeforeRender: () =>\n               onBeforeRender && onBeforeRender({ read: fbo.texture }),\n         });\n         return fbo.texture;\n      },\n      [scene, camera]\n   );\n\n   return [renderTargetArr.current, updateCopyTexture];\n};\n","type Utils = {\n   interpolate: (\n      startValue: number,\n      endValue: number,\n      progress: number,\n      threshold?: number\n   ) => number;\n};\n\nexport const Utils: Utils = Object.freeze({\n   interpolate(startValue, endValue, progress, threshold = 1e-6): number {\n      const result = startValue + (endValue - startValue) * progress;\n      return Math.abs(result) < threshold ? 0 : result;\n   },\n});\n"],"names":["main_default","useResolution","size","dpr","_width","_height","useMemo","THREE","setUniform","material","key","value","uniforms","setCustomUniform","customParams","useAddObject","scene","geometry","Proto","object3D","obj","useEffect","ISDEV","MATERIAL_BASIC_PARAMS","DEFAULT_TEXTURE","wobble3D_default","snoise_default","coverTexture_default","fxBlending_default","planeVertex_default","defaultVertex_default","hsv2rgb_default","rgb2hsv_default","ShaderChunk","wobble3D","snoise","coverTexture","fxBlending","planeVertex","defaultVertex","hsv2rgb","rgb2hsv","includePattern","includeReplacer","match","include","resolveIncludes","string","createMaterialParameters","parameters","onBeforeInit","useMesh","BRUSH_PARAMS","vertexShader","fragmentShader","resolution","mesh","getCameraProps","width","height","frustumSize","aspect","w","h","useCamera","cameraType","near","far","usePointer","lerp","prevPointer","useRef","diffPointer","lerpPointer","lastUpdateTime","velocity","isMoved","useCallback","currentPointer","now","current","deltaTime","isUpdate","prevTemp","useParams","params","isContainsFunctions","paramsRef","setParams","newParams","paramKey","FBO_DEFAULT_OPTION","renderFBO","gl","fbo","camera","onBeforeRender","onSwap","useSingleFBO","props","isSizeUpdate","depth","renderTargetOptions","renderTarget","target","_a","temp","updateRenderTarget","useDoubleFBO","read","write","_b","getDpr","useBrush","_dpr","updatePointer","pressureEnd","updateValue","updateCustomValue","updateParams","rootState","pointer","pointerValues","color","init_default","useInitialMaterial","advection_default","useAdvectionMaterial","DELTA_TIME","divergence_default","useDivergenceMaterial","pressure_default","usePressureMaterial","curl_default","useCurlMaterial","vorticity_default","useVorticityMaterial","clear_default","useClearMaterial","gradientSubtract_default","useGradientSubtractMaterial","splat_default","useSplatMaterial","useCustomMaterial","materialHook","materialProps","customFluidProps","curl","vorticity","advection","divergence","pressure","clear","gradientSubtract","splat","initialMaterial","updateMaterial","curlMaterial","vorticityMaterial","advectionMaterial","divergenceMaterial","pressureMaterial","clearMaterial","gradientSubtractMaterial","splatMaterial","materials","setMeshMaterial","FLUID_PARAMS","useFluid","fboProps","velocityFBO","updateVelocityFBO","densityFBO","updateDensityFBO","curlFBO","updateCurlFBO","divergenceFBO","updateDivergenceFBO","pressureFBO","updatePressureFBO","scaledDiffVec","spaltVec","updateParamsList","updateCustomParamsList","velocityTex","densityTex","scaledDiff","curlTex","divergenceTex","pressureTexTemp","i","scale","max","texture","meshArr","clonedMat","RIPPLE_PARAMS","useRipple","currentWave","opacity","NOISE_PARAMS","useNoise","clock","COLORSTRATA_PARAMS","useColorStrata","MARBLE_PARAMS","useMarble","COSPALETTE_PARAMS","useCosPalette","DUOTONE_PARAMS","useDuoTone","BLENDING_PARAMS","useBlending","FXTEXTURE_PARAMS","useFxTexture","tex0Res","_d","_c","tex1Res","_f","_e","_h","_g","interpolatedResolution","index","BRIGHTNESSPICKER_PARAMS","useBrightnessPicker","FXBLENDING_PARAMS","useFxBlending","ALPHABLENDING_PARAMS","useAlphaBlending","HSV_PARAMS","useHSV","COVERTEXTURE_PARAMS","useCoverTexture","SIMPLEBLUR_PARAMS","useSimpleBlur","updateTempTexture","_tempTexture","MOTIONBLUR_PARAMS","useMotionBlur","WAVE_PARAMS","useWave","CHROMAKEY_PARAMS","useChromaKey","BLANK_PARAMS","useBlank","RAWBLANK_PARAMS","useRawBlank","useCreateObject","points","interactiveMesh","rewriteVertexShader","modifeidAttributes","targetGeometry","targetAttibute","itemSize","vTargetName","vAttributeRewriteKey","vTransitionRewriteKey","vListName","vMorphTransition","stringToAddToMorphAttibutes","stringToAddToMorphAttibutesList","modifyAttributes","attribute","modifiedAttribute","maxLength","arr","diff","addArray","oldArray","randomIndex","j","rewriteFragmentShader","mapArray","mapArrayShader","mapArrayUniforms","textureSwitcherCode","map","condition","action","useMaterial","positions","uvs","modifiedPositions","modifiedUvs","rewritedVertexShader","rewritedFragmentShader","MORPHPARTICLES_PARAMS","useCreateMorphParticles","morphGeometry","geo","useMorphParticles","updateUniform","generatedPositions","generatedUvs","updateFx","isDepth","transmission_pars_fragment_default","transmission_fragment_default","resolveEachMaterial","mat","isCustomTransmission","transmission_pars_fragment","transmission_fragment","baseMaterial","materialParameters","depthOnBeforeInit","depthMaterial","WOBBLE3D_PARAMS","cutomizedParams","depthMat","useCreateWobble3D","wobbleGeometry","mergeVertices","userData","useWobble3D","RootState","useAddMesh","checkUpdate","currentW","currentH","memoW","memoH","threshold","boundFor","isSmaller","isLarger","useResizeBoundary","memorizedSize","Easing","x","c2","c4","c5","getHash","input","useBeat","bpm","ease","rhythm","easing","beat","floor","fract","hash","useFPSLimiter","fps","interval","prevTime","tick","errorHandler","domLength","textureLength","createMesh","child","useIntersectionHandler","intersectionObserverRef","intersectionDomRef","isIntersectingRef","isIntersectingOnceRef","observer","newArr","dom","callback","entries","entry","useUpdateDomRect","domRects","updateDomRects","resolutionRef","domElement","rect","useIsIntersecting","isIntersecting","once","createUseDomView","onView","onHidden","isView","id","filterIntersection","item","DOMSYNCER_PARAMS","useDomSyncer","dependencies","DOMRects","refreshTrigger","setRefreshTrigger","useState","updateKey","emptyTexture","intersectionHandler","useDomView","useCopyTexture","length","targetSettings","renderTargetArr","updateCopyTexture","Utils","startValue","endValue","progress","result"],"mappings":"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"}