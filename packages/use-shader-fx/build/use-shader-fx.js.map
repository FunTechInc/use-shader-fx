{"version":3,"file":"use-shader-fx.js","sources":["../src/hooks/useBrush/shader/main.vert","../src/hooks/useBrush/shader/main.frag","../src/utils/useResolution.ts","../src/utils/useAddMesh.ts","../src/utils/setUniforms.ts","../src/hooks/useBrush/useMesh.ts","../src/utils/useCamera.ts","../src/utils/usePointer.ts","../src/utils/useParams.ts","../src/utils/useSingleFBO.ts","../src/utils/useDoubleFBO.ts","../src/hooks/useBrush/index.ts","../src/hooks/useDuoTone/shader/main.vert","../src/hooks/useDuoTone/shader/main.frag","../src/hooks/useDuoTone/useMesh.ts","../src/hooks/useDuoTone/index.ts","../src/hooks/useBlending/shader/main.vert","../src/hooks/useBlending/shader/main.frag","../src/hooks/useBlending/useMesh.ts","../src/hooks/useBlending/index.ts","../src/hooks/useFluid/shaders/main.vert","../src/hooks/useFluid/shaders/init.frag","../src/hooks/useFluid/materials/useInitialMaterial.ts","../src/hooks/useFluid/shaders/advection.frag","../src/hooks/useFluid/materials/useAdvectionMaterial.ts","../src/hooks/useFluid/shaders/divergence.frag","../src/hooks/useFluid/materials/useDivergenceMaterial.ts","../src/hooks/useFluid/shaders/pressure.frag","../src/hooks/useFluid/materials/usePressureMaterial.ts","../src/hooks/useFluid/shaders/curl.frag","../src/hooks/useFluid/materials/useCurlMaterial.ts","../src/hooks/useFluid/shaders/vorticity.frag","../src/hooks/useFluid/materials/useVorticityMaterial.ts","../src/hooks/useFluid/shaders/clear.frag","../src/hooks/useFluid/materials/useClearMaterial.ts","../src/hooks/useFluid/shaders/gradientSubtract.frag","../src/hooks/useFluid/materials/useGradientSubtractMaterial.ts","../src/hooks/useFluid/shaders/splat.frag","../src/hooks/useFluid/materials/useSplatMaterial.ts","../src/hooks/useFluid/useMesh.ts","../src/hooks/useFluid/index.ts","../src/hooks/useRipple/useMesh.ts","../src/hooks/useRipple/index.ts","../src/hooks/useFxTexture/shader/main.vert","../src/hooks/useFxTexture/shader/main.frag","../src/hooks/useFxTexture/useMesh.ts","../src/hooks/useFxTexture/index.ts","../src/hooks/useNoise/shader/main.vert","../src/hooks/useNoise/shader/main.frag","../src/hooks/useNoise/useMesh.ts","../src/hooks/useNoise/index.ts","../src/libs/constants.ts","../src/hooks/useDomSyncer/utils/errorHandler.ts","../src/hooks/useDomSyncer/shader/main.vert","../src/hooks/useDomSyncer/shader/main.frag","../src/hooks/useDomSyncer/utils/createMesh.ts","../src/hooks/useDomSyncer/utils/useIntersectionHandler.ts","../src/hooks/useDomSyncer/utils/useUpdateDomRect.ts","../src/hooks/useDomSyncer/utils/useIsIntersecting.ts","../src/hooks/useDomSyncer/index.ts","../src/hooks/useSimpleBlur/shader/main.vert","../src/hooks/useSimpleBlur/shader/main.frag","../src/hooks/useSimpleBlur/useMesh.ts","../src/hooks/useSimpleBlur/index.ts","../src/hooks/useWave/shader/main.vert","../src/hooks/useWave/shader/main.frag","../src/hooks/useWave/useMesh.ts","../src/hooks/useWave/index.ts","../src/hooks/useBrightnessPicker/shader/main.vert","../src/hooks/useBrightnessPicker/shader/main.frag","../src/hooks/useBrightnessPicker/useMesh.ts","../src/hooks/useBrightnessPicker/index.ts","../src/hooks/useColorStrata/shader/main.vert","../src/hooks/useColorStrata/shader/main.frag","../src/hooks/useColorStrata/useMesh.ts","../src/hooks/useColorStrata/index.ts","../src/hooks/useFxBlending/shader/main.vert","../src/hooks/useFxBlending/shader/main.frag","../src/hooks/useFxBlending/useMesh.ts","../src/hooks/useFxBlending/index.ts","../src/utils/useCopyTexture.ts"],"sourcesContent":["varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nuniform sampler2D uMap;\nuniform sampler2D uTexture;\nuniform float uRadius;\nuniform float uDissipation;\nuniform vec2 uResolution;\nuniform float uSmudge;\nuniform float uAspect;\nuniform vec2 uMouse;\nuniform vec2 uPrevMouse;\nuniform vec2 uVelocity;\nuniform vec3 uColor;\nuniform float uMotionBlur;\nuniform int uMotionSample;\n\nvarying vec2 vUv;\n\nfloat isOnLine(vec2 point, vec2 start, vec2 end, float width, float aspect) {\n\t// make circle\n\tpoint.x *= aspect;\n\tstart.x *= aspect;\n\tend.x *= aspect;\n\n\t// unit vector in direction\n\tvec2 dir = normalize(end - start);\n\t\n\t// unit vector perpendicular to the line segment\n\tvec2 n = vec2(dir.y, -dir.x);\n\n\tvec2 p0 = point - start;\n\t\n\t// calculate distance on a line\n\tfloat distToLine = abs(dot(p0, n));\n\tfloat distAlongLine = dot(p0, dir);\n\tfloat totalLength = length(end - start);\n\n\t// Include the radius of the circle at the start and end points in the range\n\tfloat distFromStart = length(point - start);\n\tfloat distFromEnd = length(point - end);\n\t\n\tbool withinLine = (distToLine < width && distAlongLine > 0.0 && distAlongLine < totalLength) || distFromStart < width || distFromEnd < width;\n\n\treturn float(withinLine);\n}\n\nvec4 createSmudge(){\n\tvec2 offsets[9];\n\toffsets[0] = vec2(-1, -1); offsets[1] = vec2( 0, -1); offsets[2] = vec2( 1, -1);\n\toffsets[3] = vec2(-1,  0); offsets[4] = vec2( 0,  0); offsets[5] = vec2( 1,  0);\n\toffsets[6] = vec2(-1,  1); offsets[7] = vec2( 0,  1); offsets[8] = vec2( 1,  1);\n\t// Scale offset to texture size\n\tfor(int i = 0; i < 9; i++) {\n\t\toffsets[i] = (offsets[i] * uSmudge) / uResolution;\n\t}\t\n\tvec4 smudgedColor = vec4(0.0);\n\tfor(int i = 0; i < 9; i++) {\n\t\tsmudgedColor += texture2D(uMap, vUv + offsets[i]);\n\t}\n\treturn smudgedColor / 9.0;\n}\n\nvec4 createMotionBlur(vec4 baseColor, vec2 velocity, float motion, int samples) {\n\tvec4 motionBlurredColor = baseColor;\n\tvec2 scaledVelocity = velocity * motion;\n\tfor(int i = 1; i < samples; i++) {\n\t\tfloat t = float(i) / float(samples - 1);\n\t\tvec2 offset = t * scaledVelocity / uResolution;\n\t\tmotionBlurredColor += texture2D(uMap, vUv + offset);\n\t}\n\treturn motionBlurredColor / float(samples);\n}\n\n\nvoid main() {\n\t// Convert UV coordinates to range [-1, 1]\n\tvec2 st = vUv * 2.0 - 1.0;\n\t\n\t// velocity vector\n\tvec2 velocity = uVelocity * uResolution;\n\n\t// add smudge\n\tvec4 smudgedColor = createSmudge();\n\t\n\t// add motion blur\n\tvec4 motionBlurredColor = createMotionBlur(smudgedColor, velocity, uMotionBlur,uMotionSample);\n\n\tvec4 bufferColor = motionBlurredColor * uDissipation;\n\n\t// radius\n\tfloat modifiedRadius = max(0.0,uRadius);\n\n\t//\tcolor \n\tvec3 color = uColor;\n\n\t// map texture to color\n\tvec4 textureColor = texture2D(uTexture, vUv);\n\tvec3 finalColor = mix(color, textureColor.rgb, textureColor.a);\n\n\tfloat onLine = isOnLine(st, uPrevMouse, uMouse, modifiedRadius, uAspect);\n\tbufferColor.rgb = mix(bufferColor.rgb, finalColor, onLine);\n\t\n\tgl_FragColor = vec4(bufferColor.rgb,1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport { Size } from \"@react-three/fiber\";\n\n/**\n * @params dpr if dpr is set, it returns the resolution which is size multiplied by dpr.\n */\nexport const useResolution = (size: Size, dpr: number | false = false) => {\n   const _width = dpr ? size.width * dpr : size.width;\n   const _height = dpr ? size.height * dpr : size.height;\n   const resolution = useMemo(\n      () => new THREE.Vector2(_width, _height),\n      [_width, _height]\n   );\n   return resolution;\n};\n","import * as THREE from \"three\";\nimport { useEffect, useMemo } from \"react\";\n\n/** Generate mesh from geometry and material and add to scene */\nexport const useAddMesh = (\n   scene: THREE.Scene,\n   geometry: THREE.BufferGeometry,\n   material: THREE.Material\n) => {\n   const mesh = useMemo(\n      () => new THREE.Mesh(geometry, material),\n      [geometry, material]\n   );\n\n   useEffect(() => {\n      scene.add(mesh);\n   }, [scene, mesh]);\n\n   useEffect(() => {\n      return () => {\n         scene.remove(mesh);\n         geometry.dispose();\n         material.dispose();\n      };\n   }, [scene, geometry, material, mesh]);\n\n   return mesh;\n};\n","type UniformValue =\n   | THREE.CubeTexture\n   | THREE.Texture\n   | Int32Array\n   | Float32Array\n   | THREE.Matrix4\n   | THREE.Matrix3\n   | THREE.Quaternion\n   | THREE.Vector4\n   | THREE.Vector3\n   | THREE.Vector2\n   | THREE.Color\n   | number\n   | boolean\n   | Array<any>\n   | null;\ntype UniformObject = { [key: string]: { value: UniformValue } };\n\nexport const setUniform = <T extends UniformObject>(\n   material: { uniforms: T },\n   key: keyof T,\n   value: UniformValue\n) => {\n   if (\n      material.uniforms &&\n      material.uniforms[key] &&\n      value !== undefined &&\n      value !== null\n   ) {\n      material.uniforms[key].value = value;\n   } else {\n      console.error(\n         `Uniform key \"${String(\n            key\n         )}\" does not exist in the material. or \"${String(\n            key\n         )}\" is null | undefined`\n      );\n   }\n};\n","import * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useEffect, useMemo } from \"react\";\nimport { useResolution } from \"../../utils/useResolution\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { Size } from \"@react-three/fiber\";\n\nexport class BrushMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uMap: { value: THREE.Texture };\n      uResolution: { value: THREE.Texture };\n      uAspect: { value: number };\n      uTexture: { value: THREE.Texture };\n      uRadius: { value: number };\n      uSmudge: { value: number };\n      uDissipation: { value: number };\n      uMotionBlur: { value: number };\n      uMotionSample: { value: number };\n      uMouse: { value: number };\n      uPrevMouse: { value: number };\n      uVelocity: { value: number };\n      uColor: { value: THREE.Color };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number;\n}) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uMap: { value: new THREE.Texture() },\n               uResolution: { value: new THREE.Vector2(0, 0) },\n               uAspect: { value: 0.0 },\n               uTexture: { value: new THREE.Texture() },\n               uRadius: { value: 0.0 },\n               uSmudge: { value: 0.0 },\n               uDissipation: { value: 0.0 },\n               uMotionBlur: { value: 0.0 },\n               uMotionSample: { value: 0 },\n               uMouse: { value: new THREE.Vector2(0, 0) },\n               uPrevMouse: { value: new THREE.Vector2(0, 0) },\n               uVelocity: { value: new THREE.Vector2(0, 0) },\n               uColor: { value: new THREE.Color(0xffffff) },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   const resolution = useResolution(size, dpr);\n   useEffect(() => {\n      setUniform(material, \"uAspect\", resolution.width / resolution.height);\n      setUniform(material, \"uResolution\", resolution.clone());\n   }, [resolution, material]);\n\n   useAddMesh(scene, geometry, material);\n\n   return material as BrushMaterial;\n};\n","import * as THREE from \"three\";\nimport { useResolution } from \"./useResolution\";\nimport { useMemo } from \"react\";\nimport { Size } from \"@react-three/fiber\";\n\nconst getCameraProps = (width: number, height: number) => {\n   const frustumSize = height;\n   const aspect = width / height;\n   const [w, h] = [(frustumSize * aspect) / 2, frustumSize / 2];\n   return { width: w, height: h, near: -1000, far: 1000 };\n};\n\nexport const useCamera = (size: Size) => {\n   const resolution = useResolution(size);\n   const { width, height, near, far } = getCameraProps(\n      resolution.x,\n      resolution.y\n   );\n   const camera = useMemo(\n      () =>\n         new THREE.OrthographicCamera(\n            -width,\n            width,\n            height,\n            -height,\n            near,\n            far\n         ),\n      [width, height, near, far]\n   );\n   return camera;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useRef } from \"react\";\n\ntype UpdatePointer = (currentPointer: THREE.Vector2) => {\n   currentPointer: THREE.Vector2;\n   prevPointer: THREE.Vector2;\n   diffPointer: THREE.Vector2;\n   velocity: THREE.Vector2;\n   isVelocityUpdate: boolean;\n};\n\n/** When given the pointer vector2 from r3f's RootState, it generates an update function that returns {currentPointer, prevPointer, diffPointer, isVelocityUpdate, velocity}. */\nexport const usePointer = (): UpdatePointer => {\n   const prevPointer = useRef(new THREE.Vector2(0, 0));\n   const diffPointer = useRef(new THREE.Vector2(0, 0));\n   const lastUpdateTime = useRef<number>(0);\n   const velocity = useRef(new THREE.Vector2(0, 0));\n   const isMoved = useRef(false);\n\n   const updatePointer = useCallback((currentPointer: THREE.Vector2) => {\n      const now = performance.now();\n      const current = currentPointer.clone();\n\n      // first frame\n      if (lastUpdateTime.current === 0) {\n         lastUpdateTime.current = now;\n         prevPointer.current = current;\n      }\n      const deltaTime = Math.max(1, now - lastUpdateTime.current);\n      lastUpdateTime.current = now;\n\n      // get velocity\n      velocity.current\n         .copy(current)\n         .sub(prevPointer.current)\n         .divideScalar(deltaTime);\n      const isUpdate = velocity.current.length() > 0;\n\n      //set prev temp pos\n      const prevTemp = isMoved.current ? prevPointer.current.clone() : current;\n      if (!isMoved.current && isUpdate) {\n         isMoved.current = true;\n      }\n      prevPointer.current = current;\n\n      return {\n         currentPointer: current,\n         prevPointer: prevTemp,\n         diffPointer: diffPointer.current.subVectors(current, prevTemp),\n         velocity: velocity.current,\n         isVelocityUpdate: isUpdate,\n      };\n   }, []);\n\n   return updatePointer;\n};\n","import { useCallback, useRef } from \"react\";\n\ntype UseParamsReturn<T> = [T, (params: Partial<T>) => void];\n\n/**\n * @param params Receives an initial value object. With structuredClone, deep copy and set, but if the object contains a function, just set it.\n */\nexport const useParams = <T extends object>(params: T): UseParamsReturn<T> => {\n   const isContainsFunctions = (obj: object): boolean =>\n      Object.values(obj).some((value) => typeof value === \"function\");\n   const paramsRef = useRef(\n      isContainsFunctions(params) ? params : structuredClone(params)\n   );\n\n   const setParams = useCallback((updateParams: Partial<T>) => {\n      for (const key in updateParams) {\n         const paramKey = key as keyof T;\n         if (\n            paramKey in paramsRef.current &&\n            updateParams[paramKey] !== undefined &&\n            updateParams[paramKey] !== null\n         ) {\n            paramsRef.current[paramKey] = updateParams[paramKey]!;\n         } else {\n            console.error(\n               `\"${String(\n                  paramKey\n               )}\" does not exist in the params. or \"${String(\n                  paramKey\n               )}\" is null | undefined`\n            );\n         }\n      }\n   }, []);\n   return [paramsRef.current, setParams];\n};\n","import * as THREE from \"three\";\nimport {\n   useCallback,\n   useEffect,\n   useLayoutEffect,\n   useMemo,\n   useRef,\n} from \"react\";\nimport { useResolution } from \"./useResolution\";\nimport { Size } from \"@react-three/fiber\";\n\nexport const FBO_OPTION: THREE.RenderTargetOptions = {\n   minFilter: THREE.LinearFilter,\n   magFilter: THREE.LinearFilter,\n   type: THREE.HalfFloatType,\n   stencilBuffer: false,\n};\n\nexport type UseFboProps = {\n   scene: THREE.Scene;\n   camera: THREE.Camera;\n   size: Size;\n   /** If dpr is set, dpr will be multiplied, default:false */\n   dpr?: number | false;\n   /** Whether to resize when resizing occurs. If isDpr is true, set FBO to setSize even if dpr is changed, default:false */\n   isSizeUpdate?: boolean;\n   /** Defines the count of MSAA samples. Can only be used with WebGL 2. Default is 0. */\n   samples?: number;\n   /** Renders to the depth buffer. Unlike the three.js,　Default is false. */\n   depthBuffer?: boolean;\n   /** If set, the scene depth will be rendered to this texture. Default is false. */\n   depthTexture?: boolean;\n};\n\nexport const renderFBO = ({\n   gl,\n   fbo,\n   scene,\n   camera,\n   onBeforeRender,\n   onSwap,\n}: {\n   gl: THREE.WebGLRenderer;\n   fbo: THREE.WebGLRenderTarget;\n   scene: THREE.Scene;\n   camera: THREE.Camera;\n   onBeforeRender: () => void;\n   onSwap?: () => void;\n}) => {\n   gl.setRenderTarget(fbo);\n   onBeforeRender();\n   gl.clear();\n   gl.render(scene, camera);\n   onSwap && onSwap();\n   gl.setRenderTarget(null);\n   gl.clear();\n};\n\ntype UpdateRenderTarget = (\n   gl: THREE.WebGLRenderer,\n   /**  call before FBO is rendered */\n   onBeforeRender?: ({ read }: { read: THREE.Texture }) => void\n) => THREE.Texture;\n\ntype UseSingleFBOReturn = [THREE.WebGLRenderTarget, UpdateRenderTarget];\n\n/**\n * @param dpr If dpr is set, dpr will be multiplied, default:false\n * @param isSizeUpdate Whether to resize when resizing occurs. If isDpr is true, set FBO to setSize even if dpr is changed, default:false\n * @returns [THREE.WebGLRenderTarget , updateFBO] -Receives the RenderTarget as the first argument and the update function as the second argument.\n */\nexport const useSingleFBO = ({\n   scene,\n   camera,\n   size,\n   dpr = false,\n   isSizeUpdate = false,\n   samples = 0,\n   depthBuffer = false,\n   depthTexture = false,\n}: UseFboProps): UseSingleFBOReturn => {\n   const renderTarget = useRef<THREE.WebGLRenderTarget>();\n\n   const resolution = useResolution(size, dpr);\n\n   renderTarget.current = useMemo(\n      () => {\n         const target = new THREE.WebGLRenderTarget(\n            resolution.x,\n            resolution.y,\n            {\n               ...FBO_OPTION,\n               samples,\n               depthBuffer,\n            }\n         );\n         if (depthTexture) {\n            target.depthTexture = new THREE.DepthTexture(\n               resolution.x,\n               resolution.y,\n               THREE.FloatType\n            );\n         }\n         return target;\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      []\n   );\n\n   useLayoutEffect(() => {\n      if (isSizeUpdate) {\n         renderTarget.current?.setSize(resolution.x, resolution.y);\n      }\n   }, [resolution, isSizeUpdate]);\n\n   useEffect(() => {\n      const temp = renderTarget.current;\n      return () => {\n         temp?.dispose();\n      };\n   }, []);\n\n   const updateRenderTarget: UpdateRenderTarget = useCallback(\n      (gl, onBeforeRender) => {\n         const fbo = renderTarget.current!;\n         renderFBO({\n            gl,\n            fbo,\n            scene,\n            camera,\n            onBeforeRender: () =>\n               onBeforeRender && onBeforeRender({ read: fbo.texture }),\n         });\n         return fbo.texture;\n      },\n      [scene, camera]\n   );\n\n   return [renderTarget.current, updateRenderTarget];\n};\n","import * as THREE from \"three\";\nimport {\n   useCallback,\n   useEffect,\n   useLayoutEffect,\n   useMemo,\n   useRef,\n} from \"react\";\nimport { FBO_OPTION, UseFboProps, renderFBO } from \"./useSingleFBO\";\nimport { useResolution } from \"./useResolution\";\n\nexport type DoubleRenderTarget = {\n   read: THREE.WebGLRenderTarget | null;\n   write: THREE.WebGLRenderTarget | null;\n};\n\ninterface WebGLDoubleRenderTarget extends DoubleRenderTarget {\n   swap: () => void;\n}\n\ntype FBOUpdateFunction = (\n   gl: THREE.WebGLRenderer,\n   /**  call before FBO is rendered */\n   onBeforeRender?: ({\n      read,\n      write,\n   }: {\n      read: THREE.Texture;\n      write: THREE.Texture;\n   }) => void\n) => THREE.Texture;\n\ntype UseDoubleFBOReturn = [\n   { read: THREE.WebGLRenderTarget; write: THREE.WebGLRenderTarget },\n   FBOUpdateFunction\n];\n\n/**\n * @param dpr If dpr is set, dpr will be multiplied, default:false\n * @param isSizeUpdate Whether to resize when resizing occurs. If isDpr is true, set FBO to setSize even if dpr is changed, default:false\n * @returns [{read:THREE.WebGLRenderTarget,write:THREE.WebGLRenderTarget} , updateFBO] -Receives the RenderTarget as the first argument and the update function as the second argument.\n */\nexport const useDoubleFBO = ({\n   scene,\n   camera,\n   size,\n   dpr = false,\n   isSizeUpdate = false,\n   samples = 0,\n   depthBuffer = false,\n   depthTexture = false,\n}: UseFboProps): UseDoubleFBOReturn => {\n   const renderTarget = useRef<WebGLDoubleRenderTarget>({\n      read: null,\n      write: null,\n      swap: function () {\n         let temp = this.read;\n         this.read = this.write;\n         this.write = temp;\n      },\n   });\n\n   const resolution = useResolution(size, dpr);\n\n   const initRenderTargets = useMemo(() => {\n      const read = new THREE.WebGLRenderTarget(resolution.x, resolution.y, {\n         ...FBO_OPTION,\n         samples,\n         depthBuffer,\n      });\n      const write = new THREE.WebGLRenderTarget(resolution.x, resolution.y, {\n         ...FBO_OPTION,\n         samples,\n         depthBuffer,\n      });\n\n      if (depthTexture) {\n         read.depthTexture = new THREE.DepthTexture(\n            resolution.x,\n            resolution.y,\n            THREE.FloatType\n         );\n         write.depthTexture = new THREE.DepthTexture(\n            resolution.x,\n            resolution.y,\n            THREE.FloatType\n         );\n      }\n\n      return { read, write };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []);\n\n   renderTarget.current.read = initRenderTargets.read;\n   renderTarget.current.write = initRenderTargets.write;\n\n   useLayoutEffect(() => {\n      if (isSizeUpdate) {\n         renderTarget.current.read?.setSize(resolution.x, resolution.y);\n         renderTarget.current.write?.setSize(resolution.x, resolution.y);\n      }\n   }, [resolution, isSizeUpdate]);\n\n   useEffect(() => {\n      const temp = renderTarget.current;\n      return () => {\n         temp.read?.dispose();\n         temp.write?.dispose();\n      };\n   }, []);\n\n   const updateRenderTarget: FBOUpdateFunction = useCallback(\n      (gl, onBeforeRender) => {\n         const fbo = renderTarget.current;\n         renderFBO({\n            gl,\n            scene,\n            camera,\n            fbo: fbo.write!,\n            onBeforeRender: () =>\n               onBeforeRender &&\n               onBeforeRender({\n                  read: fbo.read!.texture,\n                  write: fbo.write!.texture,\n               }),\n            onSwap: () => fbo.swap(),\n         });\n         return fbo.read?.texture as THREE.Texture;\n      },\n      [scene, camera]\n   );\n\n   return [\n      { read: renderTarget.current.read, write: renderTarget.current.write },\n      updateRenderTarget,\n   ];\n};\n","import * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { useCallback, useMemo } from \"react\";\nimport { RootState } from \"@react-three/fiber\";\nimport { usePointer } from \"../../utils/usePointer\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\nimport { DoubleRenderTarget, useDoubleFBO } from \"../../utils/useDoubleFBO\";\n\nexport type BrushParams = {\n   /** Texture applied to the brush.Mixed with the value of a , default:THREE.Texture() */\n   texture?: THREE.Texture;\n   /** size of the stamp, percentage of the size ,default:0.05 */\n   radius?: number;\n   /** Strength of smudge effect , default:0.0*/\n   smudge?: number;\n   /** dissipation rate. If set to 1, it will remain. ,default:1.0 */\n   dissipation?: number;\n   /** Strength of motion blur , default:0.0 */\n   motionBlur?: number;\n   /** Number of motion blur samples. Affects performance default: 5 */\n   motionSample?: number;\n   /** brush color , default:THREE.Color(0xffffff) */\n   color?: THREE.Color;\n};\n\nexport type BrushObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: DoubleRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const BRUSH_PARAMS: BrushParams = {\n   texture: new THREE.Texture(),\n   radius: 0.05,\n   smudge: 0.0,\n   dissipation: 1.0,\n   motionBlur: 0.0,\n   motionSample: 5,\n   color: new THREE.Color(0xffffff),\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useBrush = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<BrushParams, BrushObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh({ scene, size, dpr });\n   const camera = useCamera(size);\n   const updatePointer = usePointer();\n   const [renderTarget, updateRenderTarget] = useDoubleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<BrushParams>(BRUSH_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: BrushParams) => {\n         const { gl, pointer } = props;\n\n         updateParams && setParams(updateParams);\n\n         setUniform(material, \"uTexture\", params.texture!);\n         setUniform(material, \"uRadius\", params.radius!);\n         setUniform(material, \"uSmudge\", params.smudge!);\n         setUniform(material, \"uDissipation\", params.dissipation!);\n         setUniform(material, \"uMotionBlur\", params.motionBlur!);\n         setUniform(material, \"uMotionSample\", params.motionSample!);\n         setUniform(material, \"uColor\", params.color!);\n\n         const { currentPointer, prevPointer, velocity } =\n            updatePointer(pointer);\n         setUniform(material, \"uMouse\", currentPointer);\n         setUniform(material, \"uPrevMouse\", prevPointer);\n         setUniform(material, \"uVelocity\", velocity);\n\n         return updateRenderTarget(gl, ({ read }) => {\n            setUniform(material, \"uMap\", read);\n         });\n      },\n      [material, updatePointer, updateRenderTarget, params, setParams]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.read.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\n\nuniform vec3 uColor0;\nuniform vec3 uColor1;\n\nvoid main() {\n\tvec2 uv = vUv;\n\tvec4 texColor = texture2D(uTexture, uv);\n\tfloat grayscale = dot(texColor.rgb, vec3(0.299, 0.587, 0.114));\n\tvec3 duotone = mix(uColor0, uColor1, grayscale);\n\tgl_FragColor = vec4(duotone, texColor.a);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\n\nexport class DuoToneMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      uColor0: { value: THREE.Color };\n      uColor1: { value: THREE.Color };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uTexture: { value: new THREE.Texture() },\n               uColor0: { value: new THREE.Color(0xffffff) },\n               uColor1: { value: new THREE.Color(0x000000) },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n   useAddMesh(scene, geometry, material);\n   return material as DuoToneMaterial;\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { DuoToneMaterial, useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\n\nexport type DuoToneParams = {\n   /** Make this texture duotone , Default:new THREE.Texture() */\n   texture?: THREE.Texture;\n   /** 1st color ,　Default:new THREE.Color(0xffffff) */\n   color0?: THREE.Color;\n   /** 2nd color , Default: new THREE.Color(0x000000) */\n   color1?: THREE.Color;\n};\n\nexport type DuoToneObject = {\n   scene: THREE.Scene;\n   material: DuoToneMaterial;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const DUOTONE_PARAMS: DuoToneParams = {\n   texture: new THREE.Texture(),\n   color0: new THREE.Color(0xffffff),\n   color1: new THREE.Color(0x000000),\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useDuoTone = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<DuoToneParams, DuoToneObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<DuoToneParams>(DUOTONE_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: DuoToneParams) => {\n         const { gl } = props;\n\n         updateParams && setParams(updateParams);\n\n         setUniform(material, \"uTexture\", params.texture!);\n         setUniform(material, \"uColor0\", params.color0!);\n         setUniform(material, \"uColor1\", params.color1!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform sampler2D u_map;\nuniform bool u_isAlphaMap;\nuniform sampler2D u_alphaMap;\nuniform float u_mapIntensity;\nuniform vec3 u_brightness;\nuniform float u_min;\nuniform float u_max;\nuniform vec3 u_dodgeColor;\nuniform bool u_isDodgeColor;\n\nvoid main() {\n\tvec2 uv = vUv;\n\n\t// fx blending\n\tvec3 mapColor = texture2D(u_map, uv).rgb;\n\tvec3 normalizedMap = mapColor * 2.0 - 1.0;\n\n\tuv = uv * 2.0 - 1.0;\n\tuv *= mix(vec2(1.0), abs(normalizedMap.rg), u_mapIntensity);\n\tuv = (uv + 1.0) / 2.0;\n\n\t// colro blending\n\tfloat brightness = dot(mapColor,u_brightness);\n\tvec4 textureMap = texture2D(u_texture, uv);\n\tfloat blendValue = smoothstep(u_min, u_max, brightness);\n\n\t// set dodge color\n\tvec3 dodgeColor = u_isDodgeColor ? u_dodgeColor : mapColor;\n\tvec3 outputColor = blendValue * dodgeColor + (1.0 - blendValue) * textureMap.rgb;\n\t\n\t// alpha blending\n\tfloat alpha = u_isAlphaMap ? texture2D(u_alphaMap, uv).a : textureMap.a;\n\tfloat mixValue = u_isAlphaMap ? alpha : 0.0;\n\tvec3 alphColor = mix(outputColor,mapColor,mixValue);\n\n\tgl_FragColor = vec4(alphColor, alpha);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\n\nexport class BlendingMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_map: { value: THREE.Texture };\n      u_alphaMap: { value: THREE.Texture };\n      u_isAlphaMap: { value: boolean };\n      u_mapIntensity: { value: number };\n      u_brightness: { value: THREE.Vector3 };\n      u_min: { value: number };\n      u_max: { value: number };\n      u_dodgeColor: { value: THREE.Color };\n      u_isDodgeColor: { value: boolean };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               u_texture: { value: new THREE.Texture() },\n               u_map: { value: new THREE.Texture() },\n               u_alphaMap: { value: new THREE.Texture() },\n               u_isAlphaMap: { value: false },\n               u_mapIntensity: { value: 0.0 },\n               u_brightness: { value: new THREE.Vector3() },\n               u_min: { value: 0.0 },\n               u_max: { value: 0.9 },\n               u_dodgeColor: { value: new THREE.Color(0xffffff) },\n               u_isDodgeColor: { value: false },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n   useAddMesh(scene, geometry, material);\n   return material as BlendingMaterial;\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\n\nexport type BlendingParams = {\n   /** Make this texture Blending , default:THREE.Texture */\n   texture?: THREE.Texture;\n   /** map texture, default:THREE.Texture */\n   map?: THREE.Texture;\n   /** map strength , r,g value are affecting , default:0.3 */\n   mapIntensity?: number;\n   /** Alpha blending is performed using the alpha of the set texture. , default:false */\n   alphaMap?: THREE.Texture | false;\n   /** default:(0.5,0.5,0.5) */\n   brightness?: THREE.Vector3;\n   /** default:0.0 */\n   min?: number;\n   /** default:1.0 */\n   max?: number;\n   /** If set, this value will apply color dodge , default: false */\n   dodgeColor?: THREE.Color | false;\n};\n\nexport type BlendingObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const BLENDING_PARAMS: BlendingParams = {\n   texture: new THREE.Texture(),\n   map: new THREE.Texture(),\n   alphaMap: false,\n   mapIntensity: 0.3,\n   brightness: new THREE.Vector3(0.5, 0.5, 0.5),\n   min: 0.0,\n   max: 1.0,\n   dodgeColor: false,\n};\n\n/**\n * Blend map to texture. You can set the threshold for blending with brightness. You can set the dodge color by setting color. \nIf you don't want to reflect the map's color, you can use useFxBlending instead.\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useBlending = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<BlendingParams, BlendingObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<BlendingParams>(BLENDING_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: BlendingParams) => {\n         const { gl } = props;\n         updateParams && setParams(updateParams);\n         setUniform(material, \"u_texture\", params.texture!);\n         setUniform(material, \"u_map\", params.map!);\n         setUniform(material, \"u_mapIntensity\", params.mapIntensity!);\n\n         if (params.alphaMap) {\n            setUniform(material, \"u_alphaMap\", params.alphaMap!);\n            setUniform(material, \"u_isAlphaMap\", true);\n         } else {\n            setUniform(material, \"u_isAlphaMap\", false);\n         }\n\n         setUniform(material, \"u_brightness\", params.brightness!);\n         setUniform(material, \"u_min\", params.min!);\n         setUniform(material, \"u_max\", params.max!);\n         if (params.dodgeColor) {\n            setUniform(material, \"u_dodgeColor\", params.dodgeColor);\n            setUniform(material, \"u_isDodgeColor\", true);\n         } else {\n            setUniform(material, \"u_isDodgeColor\", false);\n         }\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform vec2 texelSize;\n\nvoid main () {\n\tvUv = uv;\n\tvL = vUv - vec2(texelSize.x, 0.0);\n\tvR = vUv + vec2(texelSize.x, 0.0);\n\tvT = vUv + vec2(0.0, texelSize.y);\n\tvB = vUv - vec2(0.0, texelSize.y);\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvoid main(){\n\tgl_FragColor = vec4(0.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/init.frag\";\n\nexport const useInitialMaterial = () => {\n   const initialMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            depthTest: false,\n            depthWrite: false,\n         }),\n      []\n   );\n\n   return initialMaterial as THREE.ShaderMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uVelocity;\nuniform sampler2D uSource;\nuniform vec2 texelSize;\nuniform float dt;\nuniform float dissipation;\n\nvoid main () {\n\tvec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n\tgl_FragColor = dissipation * texture2D(uSource, coord);\n\tgl_FragColor.a = 1.0;\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/advection.frag\";\n\nexport class AdvectionMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      uSource: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n      dt: { value: number };\n      dissipation: { value: number };\n   };\n}\n\nexport const useAdvectionMaterial = () => {\n   const advectionMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uVelocity: { value: new THREE.Texture() },\n               uSource: { value: new THREE.Texture() },\n               texelSize: { value: new THREE.Vector2() },\n               dt: { value: 0.0 },\n               dissipation: { value: 0.0 },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return advectionMaterial as AdvectionMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\n\nvec2 sampleVelocity (in vec2 uv) {\n\tvec2 multiplier = vec2(1.0, 1.0);\n\tif (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }\n\tif (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }\n\tif (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }\n\tif (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }\n\treturn multiplier * texture2D(uVelocity, uv).xy;\n}\n\nvoid main () {\n\tfloat L = sampleVelocity(vL).x;\n\tfloat R = sampleVelocity(vR).x;\n\tfloat T = sampleVelocity(vT).y;\n\tfloat B = sampleVelocity(vB).y;\n\tfloat div = 0.5 * (R - L + T - B);\n\tgl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/divergence.frag\";\n\nexport class DivergenceMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useDivergenceMaterial = () => {\n   const divergenceMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uVelocity: { value: null },\n               texelSize: { value: new THREE.Vector2() },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return divergenceMaterial as DivergenceMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uDivergence;\n\nvec2 boundary (in vec2 uv) {\n\tuv = min(max(uv, 0.0), 1.0);\n\treturn uv;\n}\n\nvoid main () {\n\tfloat L = texture2D(uPressure, boundary(vL)).x;\n\tfloat R = texture2D(uPressure, boundary(vR)).x;\n\tfloat T = texture2D(uPressure, boundary(vT)).x;\n\tfloat B = texture2D(uPressure, boundary(vB)).x;\n\tfloat C = texture2D(uPressure, vUv).x;\n\tfloat divergence = texture2D(uDivergence, vUv).x;\n\tfloat pressure = (L + R + B + T - divergence) * 0.25;\n\tgl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/pressure.frag\";\n\nexport class PressureMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uPressure: { value: THREE.Texture };\n      uDivergence: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const usePressureMaterial = () => {\n   const pressureMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uPressure: { value: null },\n               uDivergence: { value: null },\n               texelSize: { value: new THREE.Vector2() },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return pressureMaterial as PressureMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\n\nvoid main () {\n\tfloat L = texture2D(uVelocity, vL).y;\n\tfloat R = texture2D(uVelocity, vR).y;\n\tfloat T = texture2D(uVelocity, vT).x;\n\tfloat B = texture2D(uVelocity, vB).x;\n\tfloat vorticity = R - L - T + B;\n\tgl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/curl.frag\";\n\nexport class CurlMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useCurlMaterial = () => {\n   const curlMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uVelocity: { value: null },\n               texelSize: { value: new THREE.Vector2() },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return curlMaterial as CurlMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\nuniform sampler2D uCurl;\nuniform float curl;\nuniform float dt;\n\nvoid main () {\n\tfloat T = texture2D(uCurl, vT).x;\n\tfloat B = texture2D(uCurl, vB).x;\n\tfloat C = texture2D(uCurl, vUv).x;\n\tvec2 force = vec2(abs(T) - abs(B), 0.0);\n\tforce *= 1.0 / length(force + 0.00001) * curl * C;\n\tvec2 vel = texture2D(uVelocity, vUv).xy;\n\tgl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/vorticity.frag\";\n\nexport class VorticityMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uVelocity: { value: THREE.Texture };\n      uCurl: { value: THREE.Texture };\n      curl: { value: number };\n      dt: { value: number };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useVorticityMaterial = () => {\n   const vorticityMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uVelocity: { value: null },\n               uCurl: { value: null },\n               curl: { value: 0 },\n               dt: { value: 0 },\n               texelSize: { value: new THREE.Vector2() },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return vorticityMaterial as VorticityMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\nuniform float value;\n\nvoid main () {\n\tgl_FragColor = value * texture2D(uTexture, vUv);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/clear.frag\";\n\nexport class ClearMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      value: { value: number };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useClearMaterial = () => {\n   const advectionMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uTexture: { value: new THREE.Texture() },\n               value: { value: 0.0 },\n               texelSize: { value: new THREE.Vector2() },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return advectionMaterial as ClearMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uVelocity;\n\nvec2 boundary (in vec2 uv) {\n\tuv = min(max(uv, 0.0), 1.0);\n\treturn uv;\n}\n\nvoid main () {\n\tfloat L = texture2D(uPressure, boundary(vL)).x;\n\tfloat R = texture2D(uPressure, boundary(vR)).x;\n\tfloat T = texture2D(uPressure, boundary(vT)).x;\n\tfloat B = texture2D(uPressure, boundary(vB)).x;\n\tvec2 velocity = texture2D(uVelocity, vUv).xy;\n\tvelocity.xy -= vec2(R - L, T - B);\n\tgl_FragColor = vec4(velocity, 0.0, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/gradientSubtract.frag\";\n\nexport class GradientSubtractMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uPressure: { value: THREE.Texture };\n      uVelocity: { value: THREE.Texture };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useGradientSubtractMaterial = () => {\n   const gradientSubtractMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uPressure: { value: new THREE.Texture() },\n               uVelocity: { value: new THREE.Texture() },\n               texelSize: { value: new THREE.Vector2() },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return gradientSubtractMaterial as GradientSubtractMaterial;\n};\n","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D uTarget;\nuniform float aspectRatio;\nuniform vec3 color;\nuniform vec2 point;\nuniform float radius;\n\nvoid main () {\n\tvec2 nPoint = (point + vec2(1.0)) * 0.5;\n\tvec2 p = vUv - nPoint.xy;\n\tp.x *= aspectRatio;\n\tvec3 splat = exp(-dot(p, p) / radius) * color;\n\tvec3 base = texture2D(uTarget, vUv).xyz;\n\tgl_FragColor = vec4(base + splat, 1.0);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"../shaders/main.vert\";\nimport fragmentShader from \"../shaders/splat.frag\";\n\nexport class SplatMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTarget: { value: THREE.Texture };\n      aspectRatio: { value: number };\n      color: { value: THREE.Vector3 };\n      point: { value: THREE.Vector2 };\n      radius: { value: number };\n      texelSize: { value: THREE.Vector2 };\n   };\n}\n\nexport const useSplateMaterial = () => {\n   const splatMaterial = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uTarget: { value: new THREE.Texture() },\n               aspectRatio: { value: 0 },\n               color: { value: new THREE.Vector3() },\n               point: { value: new THREE.Vector2() },\n               radius: { value: 0.0 },\n               texelSize: { value: new THREE.Vector2() },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   return splatMaterial as SplatMaterial;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useInitialMaterial } from \"./materials/useInitialMaterial\";\nimport {\n   AdvectionMaterial,\n   useAdvectionMaterial,\n} from \"./materials/useAdvectionMaterial\";\nimport {\n   DivergenceMaterial,\n   useDivergenceMaterial,\n} from \"./materials/useDivergenceMaterial\";\nimport {\n   PressureMaterial,\n   usePressureMaterial,\n} from \"./materials/usePressureMaterial\";\nimport { CurlMaterial, useCurlMaterial } from \"./materials/useCurlMaterial\";\nimport {\n   VorticityMaterial,\n   useVorticityMaterial,\n} from \"./materials/useVorticityMaterial\";\nimport { useResolution } from \"../../utils/useResolution\";\nimport { ClearMaterial, useClearMaterial } from \"./materials/useClearMaterial\";\nimport {\n   GradientSubtractMaterial,\n   useGradientSubtractMaterial,\n} from \"./materials/useGradientSubtractMaterial\";\nimport { SplatMaterial, useSplateMaterial } from \"./materials/useSplatMaterial\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { Size } from \"@react-three/fiber\";\n\ntype TMaterials =\n   | AdvectionMaterial\n   | DivergenceMaterial\n   | CurlMaterial\n   | PressureMaterial\n   | ClearMaterial\n   | GradientSubtractMaterial\n   | SplatMaterial;\n\nexport type FluidMaterials = {\n   vorticityMaterial: VorticityMaterial;\n   curlMaterial: CurlMaterial;\n   advectionMaterial: AdvectionMaterial;\n   divergenceMaterial: DivergenceMaterial;\n   pressureMaterial: PressureMaterial;\n   clearMaterial: ClearMaterial;\n   gradientSubtractMaterial: GradientSubtractMaterial;\n   splatMaterial: SplatMaterial;\n};\ntype TUseMeshReturnType = [FluidMaterials, (material: TMaterials) => void];\n\n/**\n * Returns the material update function in the second argument\n */\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number;\n}): TUseMeshReturnType => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const initialMaterial = useInitialMaterial();\n   const updateMaterial = initialMaterial.clone();\n   const curlMaterial = useCurlMaterial();\n   const vorticityMaterial = useVorticityMaterial();\n   const advectionMaterial = useAdvectionMaterial();\n   const divergenceMaterial = useDivergenceMaterial();\n   const pressureMaterial = usePressureMaterial();\n   const clearMaterial = useClearMaterial();\n   const gradientSubtractMaterial = useGradientSubtractMaterial();\n   const splatMaterial = useSplateMaterial();\n   const materials = useMemo(\n      () => ({\n         vorticityMaterial,\n         curlMaterial,\n         advectionMaterial,\n         divergenceMaterial,\n         pressureMaterial,\n         clearMaterial,\n         gradientSubtractMaterial,\n         splatMaterial,\n      }),\n      [\n         vorticityMaterial,\n         curlMaterial,\n         advectionMaterial,\n         divergenceMaterial,\n         pressureMaterial,\n         clearMaterial,\n         gradientSubtractMaterial,\n         splatMaterial,\n      ]\n   );\n\n   const resolution = useResolution(size, dpr);\n   useEffect(() => {\n      setUniform(\n         materials.splatMaterial,\n         \"aspectRatio\",\n         resolution.x / resolution.y\n      );\n      for (const material of Object.values(materials)) {\n         setUniform<typeof material.uniforms>(\n            material,\n            \"texelSize\",\n            new THREE.Vector2(1.0 / resolution.x, 1.0 / resolution.y)\n         );\n      }\n   }, [resolution, materials]);\n\n   const mesh = useAddMesh(scene, geometry, initialMaterial);\n   useEffect(() => {\n      initialMaterial.dispose();\n      mesh.material = updateMaterial;\n   }, [initialMaterial, mesh, updateMaterial]);\n\n   useEffect(() => {\n      return () => {\n         for (const material of Object.values(materials)) {\n            material.dispose();\n         }\n      };\n   }, [materials]);\n\n   const setMeshMaterial = useCallback(\n      (material: TMaterials) => {\n         mesh.material = material;\n         mesh.material.needsUpdate = true;\n      },\n      [mesh]\n   );\n\n   return [materials, setMeshMaterial];\n};\n","import * as THREE from \"three\";\nimport { FluidMaterials, useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport { usePointer } from \"../../utils/usePointer\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\nimport { UseFboProps } from \"../../utils/useSingleFBO\";\nimport { DoubleRenderTarget, useDoubleFBO } from \"../../utils/useDoubleFBO\";\n\nexport type FluidParams = {\n   /** density disspation , default:0.98 */\n   density_dissipation?: number;\n   /** velocity dissipation , default:0.99 */\n   velocity_dissipation?: number;\n   /** velocity acceleration , default:10.0 */\n   velocity_acceleration?: number;\n   /** pressure dissipation , default:0.9 */\n   pressure_dissipation?: number;\n   /** pressure iterations. affects performance , default:20 */\n   pressure_iterations?: number;\n   /** curl_strength , default:35 */\n   curl_strength?: number;\n   /** splat radius , default:0.002 */\n   splat_radius?: number;\n   /** Fluid Color.THREE.Vector3 Alternatively, it accepts a function that returns THREE.Vector3.The function takes velocity:THREE.Vector2 as an argument. , default:THREE.Vector3(1.0, 1.0, 1.0) */\n   fluid_color?: ((velocity: THREE.Vector2) => THREE.Vector3) | THREE.Vector3;\n};\n\nexport type FluidObject = {\n   scene: THREE.Scene;\n   materials: FluidMaterials;\n   camera: THREE.Camera;\n   renderTarget: {\n      velocity: DoubleRenderTarget;\n      density: DoubleRenderTarget;\n      curl: THREE.WebGLRenderTarget;\n      divergence: THREE.WebGLRenderTarget;\n      pressure: DoubleRenderTarget;\n   };\n   output: THREE.Texture;\n};\n\nexport const FLUID_PARAMS: FluidParams = {\n   density_dissipation: 0.98,\n   velocity_dissipation: 0.99,\n   velocity_acceleration: 10.0,\n   pressure_dissipation: 0.9,\n   pressure_iterations: 20,\n   curl_strength: 35,\n   splat_radius: 0.002,\n   fluid_color: new THREE.Vector3(1.0, 1.0, 1.0),\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useFluid = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<FluidParams, FluidObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const [materials, setMeshMaterial] = useMesh({ scene, size, dpr });\n   const camera = useCamera(size);\n   const updatePointer = usePointer();\n\n   const fboProps = useMemo<UseFboProps>(\n      () => ({\n         scene,\n         camera,\n         size,\n         samples,\n      }),\n      [scene, camera, size, samples]\n   );\n   const [velocityFBO, updateVelocityFBO] = useDoubleFBO(fboProps);\n   const [densityFBO, updateDensityFBO] = useDoubleFBO(fboProps);\n   const [curlFBO, updateCurlFBO] = useSingleFBO(fboProps);\n   const [divergenceFBO, updateDivergenceFBO] = useSingleFBO(fboProps);\n   const [pressureFBO, updatePressureFBO] = useDoubleFBO(fboProps);\n\n   const lastTime = useRef(0);\n   const scaledDiffVec = useRef(new THREE.Vector2(0, 0));\n   const spaltVec = useRef(new THREE.Vector3(0, 0, 0));\n\n   const [params, setParams] = useParams<FluidParams>(FLUID_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: FluidParams) => {\n         const { gl, pointer, clock, size } = props;\n\n         updateParams && setParams(updateParams);\n\n         if (lastTime.current === 0) {\n            lastTime.current = clock.getElapsedTime();\n         }\n         const dt = Math.min(\n            (clock.getElapsedTime() - lastTime.current) / 3,\n            0.02\n         );\n         lastTime.current = clock.getElapsedTime();\n\n         // update velocity\n         const velocityTex = updateVelocityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.advectionMaterial);\n            setUniform(materials.advectionMaterial, \"uVelocity\", read);\n            setUniform(materials.advectionMaterial, \"uSource\", read);\n            setUniform(materials.advectionMaterial, \"dt\", dt);\n            setUniform(\n               materials.advectionMaterial,\n               \"dissipation\",\n               params.velocity_dissipation!\n            );\n         });\n\n         // update density\n         const densityTex = updateDensityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.advectionMaterial);\n            setUniform(materials.advectionMaterial, \"uVelocity\", velocityTex);\n            setUniform(materials.advectionMaterial, \"uSource\", read);\n            setUniform(\n               materials.advectionMaterial,\n               \"dissipation\",\n               params.density_dissipation!\n            );\n         });\n\n         // update splatting\n         const { currentPointer, diffPointer, isVelocityUpdate, velocity } =\n            updatePointer(pointer);\n         if (isVelocityUpdate) {\n            updateVelocityFBO(gl, ({ read }) => {\n               setMeshMaterial(materials.splatMaterial);\n               setUniform(materials.splatMaterial, \"uTarget\", read);\n               setUniform(materials.splatMaterial, \"point\", currentPointer);\n               const scaledDiff = diffPointer.multiply(\n                  scaledDiffVec.current\n                     .set(size.width, size.height)\n                     .multiplyScalar(params.velocity_acceleration!)\n               );\n               setUniform(\n                  materials.splatMaterial,\n                  \"color\",\n                  spaltVec.current.set(scaledDiff.x, scaledDiff.y, 1.0)\n               );\n               setUniform(\n                  materials.splatMaterial,\n                  \"radius\",\n                  params.splat_radius!\n               );\n            });\n            updateDensityFBO(gl, ({ read }) => {\n               setMeshMaterial(materials.splatMaterial);\n               setUniform(materials.splatMaterial, \"uTarget\", read);\n               const color: THREE.Vector3 =\n                  typeof params.fluid_color === \"function\"\n                     ? params.fluid_color(velocity)\n                     : params.fluid_color!;\n               setUniform(materials.splatMaterial, \"color\", color);\n            });\n         }\n\n         // update curl\n         const curlTex = updateCurlFBO(gl, () => {\n            setMeshMaterial(materials.curlMaterial);\n            setUniform(materials.curlMaterial, \"uVelocity\", velocityTex);\n         });\n\n         // update vorticity\n         updateVelocityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.vorticityMaterial);\n            setUniform(materials.vorticityMaterial, \"uVelocity\", read);\n            setUniform(materials.vorticityMaterial, \"uCurl\", curlTex);\n            setUniform(\n               materials.vorticityMaterial,\n               \"curl\",\n               params.curl_strength!\n            );\n            setUniform(materials.vorticityMaterial, \"dt\", dt);\n         });\n\n         // update divergence\n         const divergenceTex = updateDivergenceFBO(gl, () => {\n            setMeshMaterial(materials.divergenceMaterial);\n            setUniform(materials.divergenceMaterial, \"uVelocity\", velocityTex);\n         });\n\n         // update pressure\n         updatePressureFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.clearMaterial);\n            setUniform(materials.clearMaterial, \"uTexture\", read);\n            setUniform(\n               materials.clearMaterial,\n               \"value\",\n               params.pressure_dissipation!\n            );\n         });\n\n         // solve pressure iterative (Gauss-Seidel)\n         setMeshMaterial(materials.pressureMaterial);\n         setUniform(materials.pressureMaterial, \"uDivergence\", divergenceTex);\n         let pressureTexTemp: THREE.Texture;\n         for (let i = 0; i < params.pressure_iterations!; i++) {\n            pressureTexTemp = updatePressureFBO(gl, ({ read }) => {\n               setUniform(materials.pressureMaterial, \"uPressure\", read);\n            });\n         }\n\n         // update gradienSubtract\n         updateVelocityFBO(gl, ({ read }) => {\n            setMeshMaterial(materials.gradientSubtractMaterial);\n            setUniform(\n               materials.gradientSubtractMaterial,\n               \"uPressure\",\n               pressureTexTemp\n            );\n            setUniform(materials.gradientSubtractMaterial, \"uVelocity\", read);\n         });\n\n         return densityTex;\n      },\n      [\n         materials,\n         setMeshMaterial,\n         updateCurlFBO,\n         updateDensityFBO,\n         updateDivergenceFBO,\n         updatePointer,\n         updatePressureFBO,\n         updateVelocityFBO,\n         setParams,\n         params,\n      ]\n   );\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         materials: materials,\n         camera: camera,\n         renderTarget: {\n            velocity: velocityFBO,\n            density: densityFBO,\n            curl: curlFBO,\n            divergence: divergenceFBO,\n            pressure: pressureFBO,\n         },\n         output: densityFBO.read.texture,\n      },\n   ];\n};\n","import { useEffect, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\n\ntype UseMeshProps = {\n   scale: number;\n   max: number;\n   texture?: THREE.Texture;\n   scene: THREE.Scene;\n};\n\nexport const useMesh = ({ scale, max, texture, scene }: UseMeshProps) => {\n   const meshArr = useRef<THREE.Mesh[]>([]);\n   const geometry = useMemo(\n      () => new THREE.PlaneGeometry(scale, scale),\n      [scale]\n   );\n   const material = useMemo(\n      () =>\n         new THREE.MeshBasicMaterial({\n            map: texture ?? null,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false,\n         }),\n      [texture]\n   );\n\n   useEffect(() => {\n      for (let i = 0; i < max; i++) {\n         const mesh = new THREE.Mesh(geometry.clone(), material.clone());\n         mesh.rotateZ(2 * Math.PI * Math.random());\n         mesh.visible = false;\n         scene.add(mesh);\n         meshArr.current.push(mesh);\n      }\n   }, [geometry, material, scene, max]);\n\n   useEffect(() => {\n      return () => {\n         meshArr.current.forEach((mesh) => {\n            mesh.geometry.dispose();\n            if (Array.isArray(mesh.material)) {\n               mesh.material.forEach((material) => material.dispose());\n            } else {\n               mesh.material.dispose();\n            }\n            scene.remove(mesh);\n         });\n         meshArr.current = [];\n      };\n   }, [scene]);\n\n   return meshArr.current;\n};\n","import { useCallback, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { usePointer } from \"../../utils/usePointer\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\n\nexport type RippleParams = {\n   /** How often ripples appear,default:0.01 */\n   frequency?: number;\n   /** rotation rate,default:0.05 */\n   rotation?: number;\n   /** fadeout speed,default:0.9 */\n   fadeout_speed?: number;\n   /** scale rate,default:0.3 */\n   scale?: number;\n   /** alpha,default:0.6 */\n   alpha?: number;\n};\n\nexport type RippleObject = {\n   scene: THREE.Scene;\n   meshArr: THREE.Mesh[];\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const RIPPLE_PARAMS: RippleParams = {\n   frequency: 0.01,\n   rotation: 0.05,\n   fadeout_speed: 0.9,\n   scale: 0.3,\n   alpha: 0.6,\n};\n\ninterface UseRippleProps extends HooksProps {\n   /** texture applied to ripple */\n   texture: THREE.Texture;\n   /** ripple size, default:64 */\n   scale?: number;\n   /** ripple max length, default:100 */\n   max?: number;\n}\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useRipple = ({\n   texture,\n   scale = 64,\n   max = 100,\n   size,\n   dpr,\n   samples = 0,\n}: UseRippleProps): HooksReturn<RippleParams, RippleObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const meshArr = useMesh({\n      scale: scale,\n      max: max,\n      texture,\n      scene,\n   });\n   const camera = useCamera(size);\n   const updatePointer = usePointer();\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<RippleParams>(RIPPLE_PARAMS);\n\n   const currentWave = useRef(0);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: RippleParams) => {\n         const { gl, pointer, size } = props;\n\n         updateParams && setParams(updateParams);\n\n         const { currentPointer, diffPointer } = updatePointer(pointer);\n         if (params.frequency! < diffPointer.length()) {\n            const mesh = meshArr[currentWave.current];\n            mesh.visible = true;\n            mesh.position.set(\n               currentPointer.x * (size.width / 2),\n               currentPointer.y * (size.height / 2),\n               0\n            );\n            mesh.scale.x = mesh.scale.y = 0.0;\n            (mesh.material as THREE.MeshBasicMaterial).opacity = params.alpha!;\n            currentWave.current = (currentWave.current + 1) % max;\n         }\n         meshArr.forEach((mesh) => {\n            if (mesh.visible) {\n               const material = mesh.material as THREE.MeshBasicMaterial;\n               mesh.rotation.z += params.rotation!;\n               material.opacity *= params.fadeout_speed!;\n               mesh.scale.x =\n                  params.fadeout_speed! * mesh.scale.x + params.scale!;\n               mesh.scale.y = mesh.scale.x;\n               if (material.opacity < 0.002) mesh.visible = false;\n            }\n         });\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, meshArr, updatePointer, max, params, setParams]\n   );\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         camera: camera,\n         meshArr: meshArr,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform vec2 uResolution;\nuniform vec2 uTextureResolution;\nuniform sampler2D uTexture0;\nuniform sampler2D uTexture1;\nuniform sampler2D uMap;\nuniform float mapIntensity;\nuniform float edgeIntensity;\nuniform float progress;\nuniform float dirX;\nuniform float dirY;\nuniform vec2 epicenter;\nuniform float padding;\n\nbool isInPaddingArea(vec2 uv) {\n   return uv.x < padding || uv.x > 1.0 - padding || uv.y < padding || uv.y > 1.0 - padding;\n}\n\nvoid main() {\n\tfloat screenAspect = uResolution.x / uResolution.y;\n\tfloat textureAspect = uTextureResolution.x / uTextureResolution.y;\n\tvec2 aspectRatio = vec2(\n\t\tmin(screenAspect / textureAspect, 1.0),\n\t\tmin(textureAspect / screenAspect, 1.0)\n\t);\n\tvec2 uv = vUv * aspectRatio + (1.0 - aspectRatio) * .5;\n\n\t// fx map\n\tvec2 map = texture2D(uMap, uv).rg;\n\tvec2 normalizedMap = map * 2.0 - 1.0;\n\n\t// multiply edge fx\n\tuv = uv * 2.0 - 1.0;\n\tuv *= map * distance(epicenter, uv) * edgeIntensity + 1.0;\n\tuv = (uv + 1.0) / 2.0;\n\n\t// padding\n\tif (isInPaddingArea(uv)) {\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n\t}\n\tvec2 paddedUV = uv * (1.0 - 2.0 * padding * -1.) + padding * -1.;\n\n\t// centered uv\n\tvec2 centeredUV = paddedUV - vec2(0.5);\n\n\t// multiply map fx\n\tcenteredUV *= normalizedMap * map * mapIntensity + 1.0;\n\n\t// texture 0\n\tfloat xOffsetTexture0 = 0.5 - dirX * progress;\n\tfloat yOffsetTexture0 = 0.5 - dirY * progress;\n\tvec2 samplePosTexture0 = vec2(xOffsetTexture0, yOffsetTexture0) + centeredUV;\n\n\t//texture 1\n\tfloat xOffsetTexture1 = 0.5 + dirX * (1.0 - progress);\n\tfloat yOffsetTexture1 = 0.5 + dirY * (1.0 - progress);\n\tvec2 samplePosTexture1 = vec2(xOffsetTexture1, yOffsetTexture1) + centeredUV;\n\n\tvec4 color0 = texture2D(uTexture0, samplePosTexture0);\n\tvec4 color1 = texture2D(uTexture1, samplePosTexture1);\n\n\tgl_FragColor = mix(color0, color1, progress);\n\n}","import { useEffect, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useResolution } from \"../../utils/useResolution\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\nimport { Size } from \"@react-three/fiber\";\n\nexport class TransitionBgMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uResolution: { value: THREE.Vector2 };\n      uTextureResolution: { value: THREE.Vector2 };\n      uTexture0: { value: THREE.Texture };\n      uTexture1: { value: THREE.Texture };\n      padding: { value: number };\n      uMap: { value: THREE.Texture };\n      edgeIntensity: { value: number };\n      mapIntensity: { value: number };\n      epicenter: { value: THREE.Vector2 };\n      progress: { value: number };\n      dirX: { value: number };\n      dirY: { value: number };\n   };\n}\n\nexport const useMesh = ({\n   scene,\n   size,\n   dpr,\n}: {\n   scene: THREE.Scene;\n   size: Size;\n   dpr: number;\n}) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uResolution: { value: new THREE.Vector2() },\n               uTextureResolution: { value: new THREE.Vector2() },\n               uTexture0: { value: new THREE.Texture() },\n               uTexture1: { value: new THREE.Texture() },\n               padding: { value: 0.0 },\n               uMap: { value: new THREE.Texture() },\n               edgeIntensity: { value: 0.0 },\n               mapIntensity: { value: 0.0 },\n               epicenter: { value: new THREE.Vector2(0.0, 0.0) },\n               progress: { value: 0.0 },\n               dirX: { value: 0.0 },\n               dirY: { value: 0.0 },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   const resolution = useResolution(size, dpr);\n   useEffect(() => {\n      material.uniforms.uResolution.value = resolution.clone();\n   }, [resolution, material]);\n\n   useAddMesh(scene, geometry, material);\n\n   return material as TransitionBgMaterial;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo } from \"react\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\n\nexport type FxTextureParams = {\n   /** 1st texture , default:THREE.Texture() */\n   texture0?: THREE.Texture;\n   /** 2nd texture , default:THREE.Texture() */\n   texture1?: THREE.Texture;\n   /** background texture resolution , default:THREE.Vector2(0, 0) */\n   textureResolution?: THREE.Vector2;\n   /** add transparent padding, 0.0 ~ 1.0 , default:0.0 */\n   padding?: number;\n   /** The color map. The uv value is affected according to this rbg , default:THREE.Texture() */\n   map?: THREE.Texture;\n   /** intensity of map , r,g value are affecting , default:0.0 */\n   mapIntensity?: number;\n   /** Intensity of effect on edges , default:0.0 */\n   edgeIntensity?: number;\n   /** epicenter of fx, -1 ~ 1 , default:vec2(0.0,0.0)*/\n   epicenter?: THREE.Vector2;\n   /** Switch value to switch between texture0 and texture1 */\n   progress?: number;\n   /** direction of transition , default: THREE.Vector2(0, 0) */\n   dir?: THREE.Vector2;\n};\n\nexport type FxTextureObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const FXTEXTURE_PARAMS: FxTextureParams = {\n   texture0: new THREE.Texture(),\n   texture1: new THREE.Texture(),\n   textureResolution: new THREE.Vector2(0, 0),\n   padding: 0.0,\n   map: new THREE.Texture(),\n   mapIntensity: 0.0,\n   edgeIntensity: 0.0,\n   epicenter: new THREE.Vector2(0, 0),\n   progress: 0.0,\n   dir: new THREE.Vector2(0, 0),\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useFxTexture = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<FxTextureParams, FxTextureObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh({ scene, size, dpr });\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      dpr,\n      size,\n      samples,\n      isSizeUpdate: true,\n   });\n\n   const [params, setParams] = useParams<FxTextureParams>(FXTEXTURE_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: FxTextureParams) => {\n         const { gl } = props;\n\n         updateParams && setParams(updateParams);\n\n         setUniform(material, \"uTexture0\", params.texture0!);\n         setUniform(material, \"uTexture1\", params.texture1!);\n         setUniform(material, \"uTextureResolution\", params.textureResolution!);\n         setUniform(material, \"padding\", params.padding!);\n         setUniform(material, \"uMap\", params.map!);\n         setUniform(material, \"mapIntensity\", params.mapIntensity!);\n         setUniform(material, \"edgeIntensity\", params.edgeIntensity!);\n         setUniform(material, \"epicenter\", params.epicenter!);\n         setUniform(material, \"progress\", params.progress!);\n         setUniform(material, \"dirX\", params.dir!.x);\n         setUniform(material, \"dirY\", params.dir!.y);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, material, params, setParams]\n   );\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\nprecision highp int;\n\nvarying vec2 vUv;\nuniform float uTime;\nuniform float timeStrength;\nuniform int noiseOctaves;\nuniform int fbmOctaves;\nuniform int warpOctaves;\nuniform vec2 warpDirection;\nuniform float warpStrength;\nuniform float scale;\n\nconst float per  = 0.5;\nconst float PI   = 3.14159265359;\n\nfloat rnd(vec2 n) {\n\tfloat a = 0.129898;\n\tfloat b = 0.78233;\n\tfloat c = 437.585453;\n\tfloat dt= dot(n ,vec2(a, b));\n\tfloat sn= mod(dt, PI);\n\treturn fract(sin(sn) * c);\n}\n\nfloat interpolate(float a, float b, float x){\n    float f = (1.0 - cos(x * PI)) * 0.5;\n    return a * (1.0 - f) + b * f;\n}\n\nfloat irnd(vec2 p){\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\tvec4 v = vec4(rnd(vec2(i.x,i.y)),rnd(vec2(i.x + 1.0,i.y)),rnd(vec2(i.x,i.y + 1.0)),rnd(vec2(i.x + 1.0, i.y + 1.0)));\n\treturn interpolate(interpolate(v.x, v.y, f.x), interpolate(v.z, v.w, f.x), f.y);\n}\n\n// Based on The Book of Shaders\n// https://thebookofshaders.com/13/\nfloat noise(vec2 p, float time){\n\tfloat t = 0.0;\n\tfor(int i = 0; i < noiseOctaves; i++){\n\t\tfloat freq = pow(2.0, float(i));\n\t\tfloat amp  = pow(per, float(noiseOctaves - i));\n\t\tt += irnd(vec2(p.y / freq + time, p.x / freq + time)) * amp;\n\t}\n\treturn t;\n}\n\nfloat fbm(vec2 x, float time) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n\tfloat sign = 1.0;\n\tfor (int i = 0; i < fbmOctaves; ++i) {\n\t\tv += a * noise(x, time * sign);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t\tsign *= -1.0;\n\t}\n\treturn v;\n}\n\nfloat warp(vec2 x, float g,float time){\n\tfloat val = 0.0;\n\tfor (int i = 0; i < warpOctaves; i++){\n\t\tval = fbm(x + g * vec2(cos(warpDirection.x * val), sin(warpDirection.y * val)), time);\n\t}\n\treturn val;\n}\n\nvoid main() {\n\tfloat noise = warp(gl_FragCoord.xy * scale ,warpStrength,uTime * timeStrength);\n\tgl_FragColor = vec4(vec3(noise),1.0);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\n\nexport class NoiseMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTime: { value: number };\n      scale: { value: number };\n      timeStrength: { value: number };\n      noiseOctaves: { value: number };\n      fbmOctaves: { value: number };\n      warpOctaves: { value: number };\n      warpDirection: { value: THREE.Vector2 };\n      warpStrength: { value: number };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uTime: { value: 0.0 },\n               scale: { value: 0.0 },\n               timeStrength: { value: 0.0 },\n               noiseOctaves: { value: 0 },\n               fbmOctaves: { value: 0 },\n               warpOctaves: { value: 0 },\n               warpDirection: { value: new THREE.Vector2() },\n               warpStrength: { value: 0.0 },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n   useAddMesh(scene, geometry, material);\n   return material as NoiseMaterial;\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { useParams } from \"../../utils/useParams\";\nimport { HooksProps, HooksReturn } from \"../types\";\n\nexport type NoiseParams = {\n   /** noise scale , default:0.004 */\n   scale?: number;\n   /** time factor default:0.3 */\n   timeStrength?: number;\n   /** noiseOctaves, affects performance default:2 */\n   noiseOctaves?: number;\n   /** fbmOctaves, affects performance default:2 */\n   fbmOctaves?: number;\n   /** domain warping octaves , affects performance default:2  */\n   warpOctaves?: number;\n   /** direction of domain warping , default:(2.0,2,0) */\n   warpDirection?: THREE.Vector2;\n   /** strength of domain warping , default:8.0 */\n   warpStrength?: number;\n};\n\nexport type NoiseObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const NOISE_PARAMS: NoiseParams = {\n   scale: 0.004,\n   timeStrength: 0.3,\n   noiseOctaves: 2,\n   fbmOctaves: 2,\n   warpOctaves: 2,\n   warpDirection: new THREE.Vector2(2.0, 2.0),\n   warpStrength: 8.0,\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n *\n * It is a basic value noise with `fbm` and `domain warping`\n */\nexport const useNoise = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<NoiseParams, NoiseObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<NoiseParams>(NOISE_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: NoiseParams) => {\n         const { gl, clock } = props;\n\n         updateParams && setParams(updateParams);\n\n         setUniform(material, \"scale\", params.scale!);\n         setUniform(material, \"timeStrength\", params.timeStrength!);\n         setUniform(material, \"noiseOctaves\", params.noiseOctaves!);\n         setUniform(material, \"fbmOctaves\", params.fbmOctaves!);\n         setUniform(material, \"warpOctaves\", params.warpOctaves!);\n         setUniform(material, \"warpDirection\", params.warpDirection!);\n         setUniform(material, \"warpStrength\", params.warpStrength!);\n\n         setUniform(material, \"uTime\", clock.getElapsedTime());\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","export const ISDEV = process.env.NODE_ENV === \"development\";\n","import { DomSyncerParams } from \"..\";\nimport { ISDEV } from \"../../../libs/constants\";\n\nexport const errorHandler = (params: DomSyncerParams) => {\n   const domLength = params.dom?.length;\n   const textureLength = params.texture?.length;\n   const resolutionLength = params.resolution?.length;\n\n   if (!domLength || !textureLength || !resolutionLength) {\n      ISDEV && console.warn(\"No dom or texture or resolution is set\");\n      return false;\n   }\n\n   if (domLength !== textureLength || domLength !== resolutionLength) {\n      ISDEV && console.warn(\"not Match dom , texture and resolution length\");\n      return false;\n   }\n\n   return true;\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform vec2 u_textureResolution;\nuniform vec2 u_resolution;\nuniform float u_borderRadius;\n\nvoid main() {\n\t// texuture color\n\tfloat screenAspect = u_resolution.x / u_resolution.y;\n\tfloat textureAspect = u_textureResolution.x / u_textureResolution.y;\n\tvec2 ratio = vec2(\n\t\tmin(screenAspect / textureAspect, 1.0),\n\t\tmin(textureAspect / screenAspect, 1.0)\n\t);\n\n\tvec2 adjustedUv = vUv * ratio + (1.0 - ratio) * 0.5;\n\tvec3 textureColor = texture2D(u_texture, adjustedUv).rgb;\n\tfloat textureAlpha = texture2D(u_texture, adjustedUv).a;\n\n\t// Based on https://mofu-dev.com/en/blog/three-dom-alignment/\n\tfloat maxSide = max(u_resolution.x, u_resolution.y);\n\tfloat minSide = min(u_resolution.x, u_resolution.y);\n\tvec2 aspect = u_resolution / maxSide;\n\tvec2 alphaUv = vUv - 0.5;\n\n\tfloat borderRadius = min(u_borderRadius, minSide * 0.5);\n\tvec2 offset = vec2(borderRadius) / u_resolution;\n\tvec2 alphaXY = smoothstep(vec2(0.5 - offset), vec2(0.5 - offset - 0.001), abs(alphaUv));\n\tfloat alpha = min(1.0, alphaXY.x + alphaXY.y);\n\n\tvec2 alphaUv2 = abs(vUv - 0.5);\n\tfloat radius = borderRadius / maxSide;\n\talphaUv2 = (alphaUv2 - 0.5) * aspect + radius;\n\tfloat roundAlpha = smoothstep(radius + 0.001, radius, length(alphaUv2));\n\n\talpha = min(1.0, alpha + roundAlpha);\n\n\t// multiply texture alpha\n\talpha *= textureAlpha;\n\n\tgl_FragColor = vec4(textureColor, alpha);\n}\n","import * as THREE from \"three\";\nimport { DomSyncerParams } from \"../\";\nimport { Size } from \"@react-three/fiber\";\nimport vertexShader from \"../shader/main.vert\";\nimport fragmentShader from \"../shader/main.frag\";\n\nexport class DomSyncerMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_textureResolution: { value: THREE.Vector2 };\n      u_resolution: { value: THREE.Vector2 };\n      u_borderRadius: { value: number };\n   };\n}\n\nexport const createMesh = ({\n   params,\n   size,\n   scene,\n}: {\n   params: DomSyncerParams;\n   size: Size;\n   scene: THREE.Scene;\n}) => {\n   if (scene.children.length > 0) {\n      scene.children.forEach((child) => {\n         if (child instanceof THREE.Mesh) {\n            child.geometry.dispose();\n            child.material.dispose();\n         }\n      });\n      scene.remove(...scene.children);\n   }\n\n   params.texture!.forEach((texture, i) => {\n      const mesh = new THREE.Mesh(\n         new THREE.PlaneGeometry(1, 1),\n         new THREE.ShaderMaterial({\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            transparent: true,\n            uniforms: {\n               u_texture: { value: texture },\n               u_textureResolution: { value: new THREE.Vector2(0, 0) },\n               u_resolution: { value: new THREE.Vector2(0, 0) },\n               u_borderRadius: {\n                  value: params.boderRadius![i] ? params.boderRadius![i] : 0.0,\n               },\n            },\n         })\n      );\n      scene.add(mesh);\n   });\n};\n","import { useCallback, useRef } from \"react\";\nimport { DomSyncerParams } from \"..\";\n\nexport const useIntersectionHandler = () => {\n   const intersectionObserverRef = useRef<IntersectionObserver[]>([]);\n   const intersectionDomRef = useRef<(HTMLElement | Element | null)[]>([]);\n\n   const intersectionHandler = useCallback(\n      ({\n         isIntersectingRef,\n         isIntersectingOnceRef,\n         params,\n      }: {\n         isIntersectingRef: React.MutableRefObject<boolean[]>;\n         isIntersectingOnceRef: React.MutableRefObject<boolean[]>;\n         params: DomSyncerParams;\n      }) => {\n         if (intersectionObserverRef.current.length > 0) {\n            intersectionObserverRef.current.forEach((observer, i) => {\n               observer.unobserve(intersectionDomRef.current[i]!);\n            });\n         }\n\n         intersectionDomRef.current = [];\n         intersectionObserverRef.current = [];\n\n         const newArr = new Array(params.dom!.length).fill(false);\n         isIntersectingRef.current = [...newArr];\n         isIntersectingOnceRef.current = [...newArr];\n\n         params.dom!.forEach((dom, i) => {\n            const callback = (entries: IntersectionObserverEntry[]) => {\n               entries.forEach((entry) => {\n                  params.onIntersect![i] && params.onIntersect![i](entry);\n                  // Update the judgment after execution so that the judgment of isIntersectin can be used when executing onIntersect\n                  isIntersectingRef.current[i] = entry.isIntersecting;\n               });\n            };\n            const observer = new IntersectionObserver(callback, {\n               rootMargin: \"0px\",\n               threshold: 0,\n            });\n            observer.observe(dom!);\n            intersectionObserverRef.current.push(observer);\n            intersectionDomRef.current.push(dom!);\n         });\n      },\n      []\n   );\n\n   return intersectionHandler;\n};\n","import * as THREE from \"three\";\nimport { DomSyncerParams } from \"..\";\nimport { Size } from \"@react-three/fiber\";\nimport { setUniform } from \"../../../utils/setUniforms\";\nimport { DomSyncerMaterial } from \"./createMesh\";\nimport { useCallback, useRef } from \"react\";\nimport { ISDEV } from \"../../../libs/constants\";\n\ntype UpdateDomRect = ({\n   params,\n   size,\n   resolutionRef,\n   scene,\n   isIntersectingRef,\n}: {\n   params: DomSyncerParams;\n   size: Size;\n   resolutionRef: React.MutableRefObject<THREE.Vector2>;\n   scene: THREE.Scene;\n   isIntersectingRef: React.MutableRefObject<boolean[]>;\n}) => void;\n\ntype UseUpdateDomRectReturn = [DOMRect[], UpdateDomRect];\n\nexport const useUpdateDomRect = (): UseUpdateDomRectReturn => {\n   const domRects = useRef<DOMRect[]>([]);\n\n   const updateDomRects: UpdateDomRect = useCallback(\n      ({ params, size, resolutionRef, scene, isIntersectingRef }) => {\n         // Initialize domRects if the number of children in the scene is different from the number of DOMRect\n         if (scene.children.length !== domRects.current!.length) {\n            domRects.current = new Array(scene.children.length);\n         }\n\n         scene.children.forEach((mesh, i) => {\n            const domElement = params.dom![i];\n            if (!domElement) {\n               ISDEV && console.warn(\"DOM is null.\");\n               return;\n            }\n\n            // DOMRect is updated even outside the intersection\n            const rect = domElement.getBoundingClientRect();\n            domRects.current[i] = rect;\n\n            // Intersection cannot be determined accurately depending on the mobile navigation bar, so it seems better to update it constantly\n            mesh.scale.set(rect.width, rect.height, 1.0);\n            mesh.position.set(\n               rect.left + rect.width * 0.5 - size.width * 0.5,\n               -rect.top - rect.height * 0.5 + size.height * 0.5,\n               0.0\n            );\n\n            if (isIntersectingRef.current[i]) {\n               if (params.rotation![i]) {\n                  mesh.rotation.copy(params.rotation![i]);\n               }\n\n               if (mesh instanceof THREE.Mesh) {\n                  const material: DomSyncerMaterial = mesh.material;\n                  setUniform(material, \"u_texture\", params.texture![i]);\n                  setUniform(\n                     material,\n                     \"u_textureResolution\",\n                     params.resolution![i]\n                  );\n                  setUniform(\n                     material,\n                     \"u_resolution\",\n                     resolutionRef.current.set(rect.width, rect.height)\n                  );\n                  setUniform(\n                     material,\n                     \"u_borderRadius\",\n                     params.boderRadius![i] ? params.boderRadius![i] : 0.0\n                  );\n               }\n            }\n         });\n      },\n      []\n   );\n\n   return [domRects.current, updateDomRects];\n};\n","import { useCallback, useRef } from \"react\";\n\nexport type IsIntersecting = (\n   index: number,\n   once?: boolean\n) => boolean[] | boolean;\n\nexport const useIsIntersecting = () => {\n   const isIntersectingRef = useRef<boolean[]>([]);\n   const isIntersectingOnceRef = useRef<boolean[]>([]);\n\n   const isIntersecting: IsIntersecting = useCallback((index, once = false) => {\n      isIntersectingRef.current.forEach((value, i) => {\n         if (value) {\n            isIntersectingOnceRef.current[i] = true;\n         }\n      });\n      const temp = once\n         ? [...isIntersectingOnceRef.current]\n         : [...isIntersectingRef.current];\n      return index < 0 ? temp : temp[index];\n   }, []);\n\n   return {\n      isIntersectingRef,\n      isIntersectingOnceRef,\n      isIntersecting,\n   };\n};\n","import * as THREE from \"three\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\nimport { errorHandler } from \"./utils/errorHandler\";\nimport { createMesh } from \"./utils/createMesh\";\nimport { useIntersectionHandler } from \"./utils/useIntersectionHandler\";\nimport { useUpdateDomRect } from \"./utils/useUpdateDomRect\";\nimport { useIsIntersecting, IsIntersecting } from \"./utils/useIsIntersecting\";\n\nexport type DomSyncerParams = {\n   /** DOM array you want to synchronize */\n   dom?: (HTMLElement | Element | null)[];\n   /** Texture array that you want to synchronize with the DOM rectangle */\n   texture?: THREE.Texture[];\n   /** Texture resolution array to pass */\n   resolution?: THREE.Vector2[];\n   /** default:0.0[] */\n   boderRadius?: number[];\n   /** the angle you want to rotate */\n   rotation?: THREE.Euler[];\n   /** Array of callback functions when crossed */\n   onIntersect?: ((entry: IntersectionObserverEntry) => void)[];\n};\n\nexport type DomSyncerObject = {\n   scene: THREE.Scene;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n   /**\n    * A function that returns a determination whether the DOM intersects or not.\n    * The boolean will be updated after executing the onIntersect function.\n    * @param index - Index of the dom for which you want to return an intersection decision. -1 will return the entire array.\n    * @param once - If set to true, it will continue to return true once crossed.\n    */\n   isIntersecting: IsIntersecting;\n   /** Returns the target's DOMRect[] */\n   DOMRects: DOMRect[];\n};\n\nexport const DOMSYNCER_PARAMS: DomSyncerParams = {\n   texture: [],\n   dom: [],\n   resolution: [],\n   boderRadius: [],\n   rotation: [],\n   onIntersect: [],\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useDomSyncer = (\n   { size, dpr, samples = 0 }: HooksProps,\n   dependencies: React.DependencyList = []\n): HooksReturn<DomSyncerParams, DomSyncerObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n      isSizeUpdate: true,\n   });\n   const [params, setParams] = useParams<DomSyncerParams>(DOMSYNCER_PARAMS);\n\n   const [DOMRects, updateDomRects] = useUpdateDomRect();\n\n   // Avoid instancing vec2 every frame\n   const resolutionRef = useRef<THREE.Vector2>(new THREE.Vector2(0, 0));\n\n   // Update monitored doms according to the dependency array\n   const [refreshTrigger, setRefreshTrigger] = useState(true);\n   useEffect(() => {\n      setRefreshTrigger(true);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, dependencies);\n\n   const intersectionHandler = useIntersectionHandler();\n   const { isIntersectingOnceRef, isIntersectingRef, isIntersecting } =\n      useIsIntersecting();\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: DomSyncerParams) => {\n         const { gl, size } = props;\n\n         updateParams && setParams(updateParams);\n\n         if (errorHandler(params)) {\n            if (refreshTrigger) {\n               createMesh({\n                  params,\n                  size,\n                  scene,\n               });\n\n               intersectionHandler({\n                  isIntersectingRef,\n                  isIntersectingOnceRef,\n                  params,\n               });\n\n               setRefreshTrigger(false);\n            }\n\n            updateDomRects({\n               params,\n               size,\n               resolutionRef,\n               scene,\n               isIntersectingRef,\n            });\n         }\n\n         return updateRenderTarget(gl);\n      },\n      [\n         updateRenderTarget,\n         setParams,\n         intersectionHandler,\n         updateDomRects,\n         refreshTrigger,\n         scene,\n         params,\n         isIntersectingOnceRef,\n         isIntersectingRef,\n      ]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n         isIntersecting: isIntersecting,\n         DOMRects: DOMRects,\n      },\n   ];\n};\n","precision mediump float;\n\nvarying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision mediump float;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\nuniform vec2 uResolution;\nuniform float uBlurSize;\n\nvoid main() {\n\tvec2 uv = vUv;\t\n\tvec2 perDivSize = uBlurSize / uResolution;\n\n\t// calc average color value from adjacent point\n\tvec4 outColor = vec4(\n\t\ttexture2D(uTexture, uv + perDivSize * vec2(-1.0, -1.0)) +\n\t\ttexture2D(uTexture, uv + perDivSize * vec2(0.0, -1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(1.0, -1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(-1.0, 0.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(0.0,  0.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(1.0,  0.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(-1.0, 1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(0.0,  1.0)) + \n\t\ttexture2D(uTexture, uv + perDivSize * vec2(1.0,  1.0))\n\t\t) / 9.0;\n\t\n\tgl_FragColor = outColor;\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\n\nimport { useAddMesh } from \"../../utils/useAddMesh\";\n\nexport class SampleMaterial extends THREE.ShaderMaterial {\n   uniforms!: {      \n      uTexture: { value: THREE.Texture };\n      uResolution: { value: THREE.Vector2 };\n      uBlurSize: { value: number };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uTexture: { value: new THREE.Texture() },\n               uResolution: { value: new THREE.Vector2(0,0) },\n               uBlurSize: { value: 1, }\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n   useAddMesh(scene, geometry, material);\n   return material as SampleMaterial;\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { useDoubleFBO } from \"../../utils/useDoubleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { useParams } from \"../../utils/useParams\";\n\nimport type { HooksProps, HooksReturn } from \"../types\";\n\nexport type SimpleBlurParams = {\n   /** Make this texture blur , Default:new THREE.Texture() */\n   texture: THREE.Texture;\n   /** blurSize, default:3 */\n   blurSize: number;\n   /** blurPower, affects performance default:5 */\n   blurPower: number;\n};\n\nexport type SimpleBlurObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const SIMPLEBLUR_PARAMS: SimpleBlurParams = {\n   texture: new THREE.Texture(),\n   blurSize: 3,\n   blurPower: 5,\n};\n\nexport const useSimpleBlur = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<SimpleBlurParams, SimpleBlurObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n\n   const fboProps = useMemo(\n      () => ({\n         scene,\n         camera,\n         size,\n         dpr,\n         samples,\n      }),\n      [scene, camera, size, dpr, samples]\n   );\n   const [renderTarget, updateRenderTarget] = useSingleFBO(fboProps);\n   const [_, updateTempTexture] = useDoubleFBO(fboProps);\n   const [params, setParams] = useParams<SimpleBlurParams>(SIMPLEBLUR_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: SimpleBlurParams) => {\n         const { gl } = props;\n\n         updateParams && setParams(updateParams);\n\n         setUniform(material, \"uTexture\", params.texture);\n         setUniform(material, \"uResolution\", [\n            params.texture.source.data.width,\n            params.texture.source.data.height,\n         ]);\n         setUniform(material, \"uBlurSize\", params.blurSize);\n\n         let _tempTexture: THREE.Texture = updateTempTexture(gl);\n\n         const iterations = params.blurPower;\n         for (let i = 0; i < iterations; i++) {\n            setUniform(material, \"uTexture\", _tempTexture);\n            _tempTexture = updateTempTexture(gl);\n         }\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, updateTempTexture, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform float uProgress;\nuniform float uStrength;\nuniform float uWidth;\nuniform vec2 uEpicenter;\nuniform int uMode;\n\nfloat PI = 3.141592653589;\n\nvoid main() {\n\n\tvec2 uv = vUv;\n\n\tfloat progress = min(uProgress, 1.0);\n\tfloat progressFactor = sin(progress * PI);\n\n\tfloat border = progress - progress * progressFactor * uWidth;\n\tfloat blur = uStrength * progressFactor;\n\t\n\t// 0 ~ 1\n\tvec2 normalizeCenter = (uEpicenter + 1.0) / 2.0;\n\n\t// 0:center 1:horizontal 2:vertical\n\tfloat dist = uMode == 0 ? length(uv - normalizeCenter) : uMode == 1 ? length(uv.x - normalizeCenter.x) : length(uv.y - normalizeCenter.y);\n\n\t// Calculate the maximum distance to the four corners of the screen\n\tfloat maxDistance = max(\n\t\tlength(vec2(0.0, 0.0) - normalizeCenter),\n\t\tmax(\n\t\t\t\tlength(vec2(1.0, 0.0) - normalizeCenter),\n\t\t\t\tmax(\n\t\t\t\t\tlength(vec2(0.0, 1.0) - normalizeCenter),\n\t\t\t\t\tlength(vec2(1.0, 1.0) - normalizeCenter)\n\t\t\t\t)\n\t\t)\n\t);\n\n\t// Scale distance so that waves extend to the edge of the screen\n\tdist = maxDistance > 0.0 ? dist / maxDistance : dist;\n\n\tvec3 color = vec3(smoothstep(border - blur, border, dist) -\n                  smoothstep(progress, progress + blur, dist));\n\t\n\t// Ensure color is 0 when progress is 0,1\n\tcolor *= progressFactor;\n\n\tgl_FragColor = vec4(color, 1.0);\n}\n\n","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\nimport { Size } from \"@react-three/fiber\";\n\nexport class WaveMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uEpicenter: { value: THREE.Vector2 };\n      uProgress: { value: number };\n      uStrength: { value: number };\n      uWidth: { value: number };\n      uMode: { value: number };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uEpicenter: { value: new THREE.Vector2(0.0, 0.0) },\n               uProgress: { value: 0.0 },\n               uStrength: { value: 0.0 },\n               uWidth: { value: 0.0 },\n               uMode: { value: 0 },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   useAddMesh(scene, geometry, material);\n\n   return material as WaveMaterial;\n};\n","import * as THREE from \"three\";\nimport { useCallback, useMemo } from \"react\";\nimport { useMesh } from \"./useMesh\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { useParams } from \"../../utils/useParams\";\nimport { HooksProps, HooksReturn } from \"../types\";\n\nexport type WaveParams = {\n   /** -1.0 ~ 1.0 , default:vec2(0.0,0.0) */\n   epicenter?: THREE.Vector2;\n   /** 0.0 ~ 1.0 , default:0.0 */\n   progress?: number;\n   /** default:0.0 */\n   width?: number;\n   /** default:0.0 */\n   strength?: number;\n   /** default:center */\n   mode?: \"center\" | \"horizontal\" | \"vertical\";\n};\n\nexport type WaveObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const WAVE_PARAMS: WaveParams = {\n   epicenter: new THREE.Vector2(0.0, 0.0),\n   progress: 0.0,\n   width: 0.0,\n   strength: 0.0,\n   mode: \"center\",\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useWave = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<WaveParams, WaveObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n      isSizeUpdate: true,\n   });\n\n   const [params, setParams] = useParams<WaveParams>(WAVE_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: WaveParams) => {\n         const { gl } = props;\n\n         updateParams && setParams(updateParams);\n\n         setUniform(material, \"uEpicenter\", params.epicenter!);\n         setUniform(material, \"uProgress\", params.progress!);\n         setUniform(material, \"uWidth\", params.width!);\n         setUniform(material, \"uStrength\", params.strength!);\n         setUniform(\n            material,\n            \"uMode\",\n            params.mode! === \"center\"\n               ? 0\n               : params.mode! === \"horizontal\"\n               ? 1\n               : 2\n         );\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform vec3 u_brightness;\nuniform float u_min;\nuniform float u_max;\n\nvoid main() {\n\tvec2 uv = vUv;\n\tvec3 color = texture2D(u_texture, uv).rgb;\n\tfloat brightness = dot(color,u_brightness);\n\tfloat alpha = clamp(smoothstep(u_min, u_max, brightness),0.0,1.0);\n\tgl_FragColor = vec4(color, alpha);\n}","import * as THREE from \"three\";\nimport { useMemo } from \"react\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\n\nexport class BrightnessPickerMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_brightness: { value: THREE.Vector3 };\n      u_min: { value: number };\n      u_max: { value: number };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               u_texture: { value: new THREE.Texture() },\n               u_brightness: { value: new THREE.Vector3() },\n               u_min: { value: 0.0 },\n               u_max: { value: 1.0 },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n   useAddMesh(scene, geometry, material);\n   return material as BrightnessPickerMaterial;\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\n\nexport type BrightnessPickerParams = {\n   /** pick brightness from this texture , default:THREE.Texture */\n   texture?: THREE.Texture;\n   /** default:(0.5,0.5,0.5) */\n   brightness?: THREE.Vector3;\n   /** default:0.0 */\n   min?: number;\n   /** default:1.0 */\n   max?: number;\n};\n\nexport type BrightnessPickerObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const BRIGHTNESSPICKER_PARAMS: BrightnessPickerParams = {\n   texture: new THREE.Texture(),\n   brightness: new THREE.Vector3(0.5, 0.5, 0.5),\n   min: 0.0,\n   max: 1.0,\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useBrightnessPicker = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<BrightnessPickerParams, BrightnessPickerObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<BrightnessPickerParams>(\n      BRIGHTNESSPICKER_PARAMS\n   );\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: BrightnessPickerParams) => {\n         const { gl } = props;\n         updateParams && setParams(updateParams);\n         setUniform(material, \"u_texture\", params.texture!);\n         setUniform(material, \"u_brightness\", params.brightness!);\n         setUniform(material, \"u_min\", params.min!);\n         setUniform(material, \"u_max\", params.max!);\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\nvarying vec2 vUv;\n\nuniform sampler2D uTexture;\nuniform bool isTexture;\nuniform sampler2D noise;\nuniform bool isNoise;\nuniform vec2 noiseStrength;\nuniform float laminateLayer;\nuniform vec2 laminateInterval;\nuniform vec2 laminateDetail;\nuniform vec2 distortion;\nuniform vec3 colorFactor;\nuniform float uTime;\nuniform vec2 timeStrength;\nuniform float scale;\n\nvoid main() {\n\tvec2 uv = vUv;\n\n\tvec2 pos = isTexture ? texture2D(uTexture, uv).rg : uv * scale;\n\tvec2 noise = isNoise ? texture2D(noise, uv).rg : vec2(0.0);\n\tfloat alpha = isTexture ? texture2D(uTexture, uv).a : 1.0;\n\t\n\t// Avoid floating point bugs caused by GPU drivers.\n\talpha = (alpha < 1e-10) ? 0.0 : alpha;\n\n\tvec3 col;\n\tfor(float j = 0.0; j < 3.0; j++){\n\t\tfor(float i = 1.0; i < laminateLayer; i++){\n\t\t\tfloat timeNoiseSin = sin(uTime / (i + j)) * timeStrength.x + noise.r * noiseStrength.x;\n\t\t\tfloat timeNoiseCos = cos(uTime / (i + j)) * timeStrength.y + noise.g * noiseStrength.y;\n\t\t\tpos.x += laminateInterval.x / (i + j) * cos(i * distortion.x * pos.y + timeNoiseSin + sin(i + j));\n\t\t\tpos.y += laminateInterval.y / (i + j) * cos(i * distortion.y * pos.x + timeNoiseCos + sin(i + j));\n\t\t}\n\t\tcol[int(j)] = sin(pow(pos.x, 2.) * pow(laminateDetail.x, 2.)) + sin(pow(pos.y, 2.) * pow(laminateDetail.y, 2.));\n\t}\n\n\tcol *= colorFactor * alpha;\n\tcol = clamp(col, 0.0, 1.0);\n\t\n\tgl_FragColor = vec4(col, alpha);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\n\nexport class ColorStrataMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      uTexture: { value: THREE.Texture };\n      isTexture: { value: boolean };\n      scale: { value: number };\n      noise: { value: THREE.Texture };\n      noiseStrength: { value: THREE.Vector2 };\n      isNoise: { value: boolean };\n      laminateLayer: { value: number };\n      laminateInterval: { value: THREE.Vector2 };\n      laminateDetail: { value: THREE.Vector2 };\n      distortion: { value: THREE.Vector2 };\n      colorFactor: { value: THREE.Vector3 };\n      uTime: { value: number };\n      timeStrength: { value: THREE.Vector2 };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               uTexture: { value: new THREE.Texture() },\n               isTexture: { value: false },\n               scale: { value: 1.0 },\n               noise: { value: new THREE.Texture() },\n               noiseStrength: { value: new THREE.Vector2(0, 0) },\n               isNoise: { value: false },\n               laminateLayer: { value: 1.0 },\n               laminateInterval: { value: new THREE.Vector2(0.1, 0.1) },\n               laminateDetail: { value: new THREE.Vector2(1, 1) },\n               distortion: { value: new THREE.Vector2(0, 0) },\n               colorFactor: { value: new THREE.Vector3(1, 1, 1) },\n               uTime: { value: 0 },\n               timeStrength: { value: new THREE.Vector2(0, 0) },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n\n   useAddMesh(scene, geometry, material);\n   return material as ColorStrataMaterial;\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\n\nexport type ColorStrataParams = {\n   /** default: null */\n   texture?: THREE.Texture | false;\n   /** Valid when texture is false. default : 1 */\n   scale?: number;\n   /** default: 1.0 */\n   laminateLayer?: number;\n   /** default: (0.1, 0.1) */\n   laminateInterval?: THREE.Vector2;\n   /** default: (1.0, 1.0) */\n   laminateDetail?: THREE.Vector2;\n   /** default: (0.0, 0.0) */\n   distortion?: THREE.Vector2;\n   /** default: (1.0, 1.0,1.0) */\n   colorFactor?: THREE.Vector3;\n   /** default: (0.0, 0.0) */\n   timeStrength?: THREE.Vector2;\n   /** default:null */\n   noise?: THREE.Texture | false;\n   /** default : (0.0,0.0) */\n   noiseStrength?: THREE.Vector2;\n};\n\nexport type ColorStrataObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const COLORSTRATA_PARAMS: ColorStrataParams = {\n   texture: false,\n   scale: 1.0,\n   laminateLayer: 1.0,\n   laminateInterval: new THREE.Vector2(0.1, 0.1),\n   laminateDetail: new THREE.Vector2(1, 1),\n   distortion: new THREE.Vector2(0, 0),\n   colorFactor: new THREE.Vector3(1, 1, 1),\n   timeStrength: new THREE.Vector2(0, 0),\n   noise: false,\n   noiseStrength: new THREE.Vector2(0, 0),\n};\n\n/**\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useColorStrata = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<ColorStrataParams, ColorStrataObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<ColorStrataParams>(COLORSTRATA_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: ColorStrataParams) => {\n         const { gl, clock } = props;\n         updateParams && setParams(updateParams);\n\n         if (params.texture) {\n            setUniform(material, \"uTexture\", params.texture);\n            setUniform(material, \"isTexture\", true);\n         } else {\n            setUniform(material, \"isTexture\", false);\n            setUniform(material, \"scale\", params.scale!);\n         }\n\n         if (params.noise) {\n            setUniform(material, \"noise\", params.noise);\n            setUniform(material, \"isNoise\", true);\n            setUniform(material, \"noiseStrength\", params.noiseStrength!);\n         } else {\n            setUniform(material, \"isNoise\", false);\n         }\n\n         setUniform(material, \"uTime\", clock.getElapsedTime());\n\n         setUniform(material, \"laminateLayer\", params.laminateLayer!);\n         setUniform(material, \"laminateInterval\", params.laminateInterval!);\n         setUniform(material, \"laminateDetail\", params.laminateDetail!);\n         setUniform(material, \"distortion\", params.distortion!);\n         setUniform(material, \"colorFactor\", params.colorFactor!);\n         setUniform(material, \"timeStrength\", params.timeStrength!);\n\n         return updateRenderTarget(gl);\n      },\n      [updateRenderTarget, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","varying vec2 vUv;\n\nvoid main() {\n\tvUv = uv;\n\tgl_Position = vec4(position, 1.0);\n}","precision highp float;\n\nvarying vec2 vUv;\nuniform sampler2D u_texture;\nuniform sampler2D u_map;\nuniform float u_mapIntensity;\n\nvoid main() {\n\tvec2 uv = vUv;\n\n\tvec2 mapColor = texture2D(u_map, uv).rg;\n\tvec2 normalizedMap = mapColor * 2.0 - 1.0;\n\t\n\tuv = uv * 2.0 - 1.0;\n\tuv *= mix(vec2(1.0), abs(normalizedMap.rg), u_mapIntensity);\n\tuv = (uv + 1.0) / 2.0;\n\n\tgl_FragColor = texture2D(u_texture, uv);\n}","import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport vertexShader from \"./shader/main.vert\";\nimport fragmentShader from \"./shader/main.frag\";\nimport { useAddMesh } from \"../../utils/useAddMesh\";\n\nexport class FxBlendingMaterial extends THREE.ShaderMaterial {\n   uniforms!: {\n      u_texture: { value: THREE.Texture };\n      u_map: { value: THREE.Texture };\n      u_mapIntensity: { value: number };\n   };\n}\n\nexport const useMesh = (scene: THREE.Scene) => {\n   const geometry = useMemo(() => new THREE.PlaneGeometry(2, 2), []);\n   const material = useMemo(\n      () =>\n         new THREE.ShaderMaterial({\n            uniforms: {\n               u_texture: { value: new THREE.Texture() },\n               u_map: { value: new THREE.Texture() },\n               u_mapIntensity: { value: 0.0 },\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n         }),\n      []\n   );\n   useAddMesh(scene, geometry, material);\n   return material as FxBlendingMaterial;\n};\n","import { useCallback, useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useMesh } from \"./useMesh\";\nimport { useCamera } from \"../../utils/useCamera\";\nimport { RootState } from \"@react-three/fiber\";\nimport { useSingleFBO } from \"../../utils/useSingleFBO\";\nimport { setUniform } from \"../../utils/setUniforms\";\nimport { HooksProps, HooksReturn } from \"../types\";\nimport { useParams } from \"../../utils/useParams\";\n\nexport type FxBlendingParams = {\n   /** Make this texture Blending , default:THREE.Texture */\n   texture?: THREE.Texture;\n   /** map texture, default:THREE.Texture */\n   map?: THREE.Texture;\n   /** map strength , r,g value are affecting , default:0.3 */\n   mapIntensity?: number;\n};\n\nexport type FxBlendingObject = {\n   scene: THREE.Scene;\n   material: THREE.Material;\n   camera: THREE.Camera;\n   renderTarget: THREE.WebGLRenderTarget;\n   output: THREE.Texture;\n};\n\nexport const FXBLENDING_PARAMS: FxBlendingParams = {\n   texture: new THREE.Texture(),\n   map: new THREE.Texture(),\n   mapIntensity: 0.3,\n};\n\n/**\n * Blend map to texture. You can change the intensity of fx applied by the rg value of map. Unlike \"useBlending\", the map color is not reflected.\n * @link https://github.com/takuma-hmng8/use-shader-fx#usage\n */\nexport const useFxBlending = ({\n   size,\n   dpr,\n   samples = 0,\n}: HooksProps): HooksReturn<FxBlendingParams, FxBlendingObject> => {\n   const scene = useMemo(() => new THREE.Scene(), []);\n   const material = useMesh(scene);\n   const camera = useCamera(size);\n   const [renderTarget, updateRenderTarget] = useSingleFBO({\n      scene,\n      camera,\n      size,\n      dpr,\n      samples,\n   });\n\n   const [params, setParams] = useParams<FxBlendingParams>(FXBLENDING_PARAMS);\n\n   const updateFx = useCallback(\n      (props: RootState, updateParams?: FxBlendingParams) => {\n         const { gl } = props;\n         updateParams && setParams(updateParams);\n         setUniform(material, \"u_texture\", params.texture!);\n         setUniform(material, \"u_map\", params.map!);\n         setUniform(material, \"u_mapIntensity\", params.mapIntensity!);\n         const bufferTexture = updateRenderTarget(gl);\n         return bufferTexture;\n      },\n      [updateRenderTarget, material, setParams, params]\n   );\n\n   return [\n      updateFx,\n      setParams,\n      {\n         scene: scene,\n         material: material,\n         camera: camera,\n         renderTarget: renderTarget,\n         output: renderTarget.texture,\n      },\n   ];\n};\n","import * as THREE from \"three\";\nimport {\n   useCallback,\n   useEffect,\n   useLayoutEffect,\n   useMemo,\n   useRef,\n} from \"react\";\nimport { useResolution } from \"./useResolution\";\nimport { UseFboProps, renderFBO, FBO_OPTION } from \"./useSingleFBO\";\n\ntype UpdateCopyFunction = (\n   gl: THREE.WebGLRenderer,\n   index: number,\n   /**  call before FBO is rendered */\n   onBeforeRender?: ({ read }: { read: THREE.Texture }) => void\n) => THREE.Texture;\n\ntype UseCopyTextureReturn = [THREE.WebGLRenderTarget[], UpdateCopyFunction];\n\n/**\n * Generate an FBO array to copy the texture.\n * @param dpr If dpr is set, dpr will be multiplied, default:false\n * @param isSizeUpdate Whether to resize when resizing occurs. If isDpr is true, set FBO to setSize even if dpr is changed, default:false\n * @param length The number of FBOs to create\n * @returns [THREE.WebGLRenderTarget[] , updateCopyTexture] -Receives the RenderTarget array as the first argument and the update function as the second argument. updateCopyTexture() receives gl as the first argument and the index of the texture you want to copy as the second argument.\n */\nexport const useCopyTexture = (\n   {\n      scene,\n      camera,\n      size,\n      dpr = false,\n      isSizeUpdate = false,\n      samples = 0,\n      depthBuffer = false,\n      depthTexture = false,\n   }: UseFboProps,\n   length: number\n): UseCopyTextureReturn => {\n   const renderTargetArr = useRef<THREE.WebGLRenderTarget[]>([]);\n   const resolution = useResolution(size, dpr);\n\n   renderTargetArr.current = useMemo(() => {\n      return Array.from({ length }, () => {\n         const target = new THREE.WebGLRenderTarget(\n            resolution.x,\n            resolution.y,\n            {\n               ...FBO_OPTION,\n               samples,\n               depthBuffer,\n            }\n         );\n         if (depthTexture) {\n            target.depthTexture = new THREE.DepthTexture(\n               resolution.x,\n               resolution.y,\n               THREE.FloatType\n            );\n         }\n         return target;\n      });\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [length]);\n\n   useLayoutEffect(() => {\n      if (isSizeUpdate) {\n         renderTargetArr.current.forEach((fbo) =>\n            fbo.setSize(resolution.x, resolution.y)\n         );\n      }\n   }, [resolution, isSizeUpdate]);\n\n   useEffect(() => {\n      const temp = renderTargetArr.current;\n      return () => {\n         temp.forEach((fbo) => fbo.dispose());\n      };\n   }, [length]);\n\n   const updateCopyTexture: UpdateCopyFunction = useCallback(\n      (gl, index, onBeforeRender) => {\n         const fbo = renderTargetArr.current[index];\n         renderFBO({\n            gl,\n            scene,\n            camera,\n            fbo,\n            onBeforeRender: () =>\n               onBeforeRender && onBeforeRender({ read: fbo.texture }),\n         });\n         return fbo.texture;\n      },\n      [scene, camera]\n   );\n\n   return [renderTargetArr.current, updateCopyTexture];\n};\n"],"names":["main_default","useResolution","size","dpr","_width","_height","useMemo","THREE","useAddMesh","scene","geometry","material","mesh","useEffect","setUniform","key","value","useMesh","vertexShader","fragmentShader","resolution","getCameraProps","width","height","frustumSize","aspect","w","h","useCamera","near","far","usePointer","prevPointer","useRef","diffPointer","lastUpdateTime","velocity","isMoved","useCallback","currentPointer","now","current","deltaTime","isUpdate","prevTemp","useParams","params","paramsRef","obj","setParams","updateParams","paramKey","FBO_OPTION","renderFBO","gl","fbo","camera","onBeforeRender","onSwap","useSingleFBO","isSizeUpdate","samples","depthBuffer","depthTexture","renderTarget","target","useLayoutEffect","_a","temp","updateRenderTarget","useDoubleFBO","initRenderTargets","read","write","_b","BRUSH_PARAMS","useBrush","updatePointer","props","pointer","DUOTONE_PARAMS","useDuoTone","BLENDING_PARAMS","useBlending","init_default","useInitialMaterial","advection_default","useAdvectionMaterial","divergence_default","useDivergenceMaterial","pressure_default","usePressureMaterial","curl_default","useCurlMaterial","vorticity_default","useVorticityMaterial","clear_default","useClearMaterial","gradientSubtract_default","useGradientSubtractMaterial","splat_default","useSplateMaterial","initialMaterial","updateMaterial","curlMaterial","vorticityMaterial","advectionMaterial","divergenceMaterial","pressureMaterial","clearMaterial","gradientSubtractMaterial","splatMaterial","materials","setMeshMaterial","FLUID_PARAMS","useFluid","fboProps","velocityFBO","updateVelocityFBO","densityFBO","updateDensityFBO","curlFBO","updateCurlFBO","divergenceFBO","updateDivergenceFBO","pressureFBO","updatePressureFBO","lastTime","scaledDiffVec","spaltVec","clock","dt","velocityTex","densityTex","isVelocityUpdate","scaledDiff","color","curlTex","divergenceTex","pressureTexTemp","i","scale","max","texture","meshArr","RIPPLE_PARAMS","useRipple","currentWave","FXTEXTURE_PARAMS","useFxTexture","NOISE_PARAMS","useNoise","ISDEV","errorHandler","domLength","textureLength","resolutionLength","_c","createMesh","child","useIntersectionHandler","intersectionObserverRef","intersectionDomRef","isIntersectingRef","isIntersectingOnceRef","observer","newArr","dom","callback","entries","entry","useUpdateDomRect","domRects","updateDomRects","resolutionRef","domElement","rect","useIsIntersecting","isIntersecting","index","once","DOMSYNCER_PARAMS","useDomSyncer","dependencies","DOMRects","refreshTrigger","setRefreshTrigger","useState","intersectionHandler","SIMPLEBLUR_PARAMS","useSimpleBlur","_","updateTempTexture","_tempTexture","iterations","WAVE_PARAMS","useWave","BRIGHTNESSPICKER_PARAMS","useBrightnessPicker","COLORSTRATA_PARAMS","useColorStrata","FXBLENDING_PARAMS","useFxBlending","useCopyTexture","length","renderTargetArr","updateCopyTexture"],"mappings":"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"}